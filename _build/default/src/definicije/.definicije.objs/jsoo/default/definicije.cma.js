// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.2

//# unitInfo: Provides: Definicije
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Definicije = [0];
   runtime.caml_register_global(0, Definicije, "Definicije");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Stanje
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function iz_niza(oznaka){return [0, oznaka];}
   function v_niz(param){var oznaka = param[1]; return oznaka;}
   var Definicije_Stanje = [0, iz_niza, v_niz];
   runtime.caml_register_global(0, Definicije_Stanje, "Definicije__Stanje");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Avtomat
//# unitInfo: Requires: Definicije__Stanje, Stdlib__List, Stdlib__Seq, Stdlib__String
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    Definicije_Stanje = global_data.Definicije__Stanje;
   function prazen_avtomat(zacetno_stanje){
    return [0, [0, zacetno_stanje, 0], zacetno_stanje, 0, 0];
   }
   function dodaj_nesprejemno_stanje(stanje, avtomat){
    return [0, [0, stanje, avtomat[1]], avtomat[2], avtomat[3], avtomat[4]];
   }
   function dodaj_sprejemno_stanje(stanje, avtomat){
    return [0,
            [0, stanje, avtomat[1]],
            avtomat[2],
            [0, stanje, avtomat[3]],
            avtomat[4]];
   }
   function dodaj_prehod(stanje1, znak, stanje2, avtomat){
    return [0,
            avtomat[1],
            avtomat[2],
            avtomat[3],
            [0, [0, stanje1, znak, stanje2], avtomat[4]]];
   }
   function prehodna_funkcija(avtomat, stanje, znak){
    var
     match =
       caml_call2
        (Stdlib_List[40],
         function(param){
          var
           znak$0 = param[2],
           stanje1 = param[1],
           _b_ = runtime.caml_equal(stanje1, stanje),
           _c_ = _b_ ? znak === znak$0 ? 1 : 0 : _b_;
          return _c_;
         },
         avtomat[4]);
    if(! match) return 0;
    var stanje2 = match[1][3];
    return [0, stanje2];
   }
   function zacetno_stanje(avtomat){return avtomat[2];}
   function seznam_stanj(avtomat){return avtomat[1];}
   function seznam_prehodov(avtomat){return avtomat[4];}
   function je_sprejemno_stanje(avtomat, stanje){
    return caml_call2(Stdlib_List[37], stanje, avtomat[3]);
   }
   var
    q0 = caml_call1(Definicije_Stanje[1], "q0"),
    q1 = caml_call1(Definicije_Stanje[1], "q1"),
    q2 = caml_call1(Definicije_Stanje[1], "q2"),
    enke_1mod3 =
      dodaj_prehod
       (q2,
        49,
        q0,
        dodaj_prehod
         (q1,
          49,
          q2,
          dodaj_prehod
           (q0,
            49,
            q1,
            dodaj_prehod
             (q2,
              48,
              q2,
              dodaj_prehod
               (q1,
                48,
                q1,
                dodaj_prehod
                 (q0,
                  48,
                  q0,
                  dodaj_nesprejemno_stanje
                   (q2, dodaj_sprejemno_stanje(q1, prazen_avtomat(q0)))))))));
   function preberi_niz(avtomat, q, niz){
    function aux(acc, znak){
     if(! acc) return 0;
     var q = acc[1];
     return prehodna_funkcija(avtomat, q, znak);
    }
    var _a_ = caml_call1(Stdlib_String[40], niz);
    return caml_call1(caml_call2(Stdlib_Seq[5], aux, [0, q]), _a_);
   }
   var
    Definicije_Avtomat =
      [0,
       prazen_avtomat,
       dodaj_nesprejemno_stanje,
       dodaj_sprejemno_stanje,
       dodaj_prehod,
       prehodna_funkcija,
       zacetno_stanje,
       seznam_stanj,
       seznam_prehodov,
       je_sprejemno_stanje,
       enke_1mod3,
       preberi_niz];
   runtime.caml_register_global(7, Definicije_Avtomat, "Definicije__Avtomat");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Trak
//# unitInfo: Requires: Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_String = global_data.Stdlib__String;
   function trenutni_znak(trak){
    return runtime.caml_string_get(trak[1], trak[2]);
   }
   function je_na_koncu(trak){
    return caml_ml_string_length(trak[1]) === trak[2] ? 1 : 0;
   }
   function premakni_naprej(trak){return [0, trak[1], trak[2] + 1 | 0];}
   function iz_niza(niz){return [0, niz, 0];}
   var prazen = iz_niza(cst);
   function v_niz(trak){return trak[1];}
   function prebrani(trak){
    return caml_call3(Stdlib_String[16], trak[1], 0, trak[2]);
   }
   function neprebrani(trak){
    return caml_call3
            (Stdlib_String[16],
             trak[1],
             trak[2],
             caml_ml_string_length(trak[1]) - trak[2] | 0);
   }
   var
    Definicije_Trak =
      [0,
       prazen,
       trenutni_znak,
       je_na_koncu,
       premakni_naprej,
       iz_niza,
       v_niz,
       prebrani,
       neprebrani];
   runtime.caml_register_global(2, Definicije_Trak, "Definicije__Trak");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__ZagnaniAvtomat
//# unitInfo: Requires: Definicije__Avtomat, Definicije__Trak
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Definicije_Avtomat = global_data.Definicije__Avtomat,
    Definicije_Trak = global_data.Definicije__Trak;
   function pozeni(avtomat, trak){
    return [0, avtomat, trak, caml_call1(Definicije_Avtomat[6], avtomat)];
   }
   function avtomat(param){var avtomat = param[1]; return avtomat;}
   function trak(param){var trak = param[2]; return trak;}
   function stanje(param){var stanje = param[3]; return stanje;}
   function korak_naprej(param){
    var stanje = param[3], trak = param[2], avtomat = param[1];
    if(caml_call1(Definicije_Trak[3], trak)) return 0;
    var
     _a_ = caml_call1(Definicije_Trak[2], trak),
     stanje$0 = caml_call3(Definicije_Avtomat[5], avtomat, stanje, _a_);
    if(! stanje$0) return 0;
    var stanje$1 = stanje$0[1];
    return [0, [0, avtomat, caml_call1(Definicije_Trak[4], trak), stanje$1]];
   }
   function je_v_sprejemnem_stanju(param){
    var stanje = param[3], avtomat = param[1];
    return caml_call2(Definicije_Avtomat[9], avtomat, stanje);
   }
   var
    Definicije_ZagnaniAvtomat =
      [0, pozeni, avtomat, trak, stanje, korak_naprej, je_v_sprejemnem_stanju];
   runtime.caml_register_global
    (2, Definicije_ZagnaniAvtomat, "Definicije__ZagnaniAvtomat");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Pravila
//# unitInfo: Requires: Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Array = global_data.Stdlib__Array;
   function sestejlist(seznam){
    var seznam$0 = seznam;
    for(;;){
     if(! seznam$0) return 0;
     if(seznam$0[1]){var tail = seznam$0[2]; return 1 + sestejlist(tail) | 0;}
     var seznam$1 = seznam$0[2];
     seznam$0 = seznam$1;
    }
   }
   function spremeni_stanje(sosedilist, trenutno_stanje){
    var zivisosedi = sestejlist(sosedilist);
    if(4 >= zivisosedi && ! trenutno_stanje) return 0;
    if(3 >= zivisosedi && trenutno_stanje) return 0;
    return trenutno_stanje ? 8 < zivisosedi ? 0 : 1 : 1;
   }
   function spremeni_stanje_zivi(zivisosedi, trenutno_stanje){
    if(3 >= zivisosedi && ! trenutno_stanje) return 0;
    if(1 >= zivisosedi && trenutno_stanje) return 0;
    return trenutno_stanje ? 8 < zivisosedi ? 0 : 1 : 1;
   }
   function matrikasestejizloceni(izloci, matrika){
    var
     m = matrika.length - 1,
     n = caml_check_bound(matrika, 0)[1].length - 1;
    return caml_call2
            (Stdlib_Array[1],
             m,
             function(i){
              return caml_call2
                      (Stdlib_Array[1],
                       n,
                       function(j){
                        return sestejlist(caml_call5(izloci, matrika, m, n, i, j));
                       });
             });
   }
   function kopirajmatriko(matrika){
    return caml_call2(Stdlib_Array[14], Stdlib_Array[7], matrika);
   }
   function korak(izloci, matrika){
    var
     m = matrika.length - 1,
     n = caml_check_bound(matrika, 0)[1].length - 1;
    return caml_call2
            (Stdlib_Array[1],
             m,
             function(i){
              return caml_call2
                      (Stdlib_Array[1],
                       n,
                       function(j){
                        var
                         _a_ =
                           caml_check_bound(caml_check_bound(matrika, i)[1 + i], j)
                            [1 + j];
                        return spremeni_stanje_zivi
                                (sestejlist(caml_call5(izloci, matrika, m, n, i, j)), _a_);
                       });
             });
   }
   var
    zacetnamatrika =
      [0,
       [0, 0, 1, 1, 1, 1, 1, 1].slice(),
       [0, 0, 1, 1, 1, 1, 1, 1].slice(),
       [0, 1, 1, 1, 1, 1, 1, 1].slice(),
       [0, 0, 0, 1, 1, 1, 0, 1].slice(),
       [0, 0, 0, 0, 1, 0, 1, 0].slice()],
    Definicije_Pravila =
      [0,
       sestejlist,
       spremeni_stanje,
       spremeni_stanje_zivi,
       matrikasestejizloceni,
       kopirajmatriko,
       korak,
       zacetnamatrika];
   runtime.caml_register_global(6, Definicije_Pravila, "Definicije__Pravila");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Definicije__Izlocisosede
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_mod = runtime.caml_mod;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = "\n",
    cst$1 = "",
    cst = " ",
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib = global_data.Stdlib;
   function randomarray(n){
    if(0 === n) return [0];
    var
     _R_ = randomarray(n - 1 | 0),
     _S_ = [0, caml_call1(Stdlib_Random[15], 0)];
    return caml_call2(Stdlib_Array[4], _S_, _R_);
   }
   function randommatrika(m, n){
    if(0 === m) return [0];
    var _P_ = randommatrika(m - 1 | 0, n), _Q_ = [0, randomarray(n)];
    return caml_call2(Stdlib_Array[4], _Q_, _P_);
   }
   function symbol(x, y){
    var _O_ = caml_call2(Stdlib[28], cst, y);
    return caml_call2(Stdlib[28], x, _O_);
   }
   function izpisimatrikoint(matrika){
    return caml_call2
            (Stdlib_Array[14],
             function(vrstica){
              var
               _L_ = caml_call2(Stdlib_Array[14], Stdlib[33], vrstica),
               _M_ =
                 caml_call1(caml_call2(Stdlib_Array[18], symbol, cst$1), _L_),
               _N_ = caml_call2(Stdlib[28], _M_, cst$0);
              return caml_call1(Stdlib[42], _N_);
             },
             matrika);
   }
   function mapmatrix(f, mat){
    return caml_call2
            (Stdlib_Array[14],
             function(vrstica){
              return caml_call2(Stdlib_Array[14], f, vrstica);
             },
             mat);
   }
   function intofbool(param){return param ? 1 : 0;}
   function boolofint(param){return 0 === param ? 0 : 1 === param ? 1 : 1;}
   function izpisisosedeint(sosedi){
    if(sosedi){
     var _D_ = sosedi[2];
     if(_D_){
      var _E_ = _D_[2];
      if(_E_){
       var _F_ = _E_[2];
       if(_F_){
        var _G_ = _F_[2];
        if(_G_){
         var _H_ = _G_[2];
         if(_H_){
          var _I_ = _H_[2];
          if(_I_){
           var _J_ = _I_[2];
           if(_J_){
            var _K_ = _J_[2];
            if(_K_ && ! _K_[2]){
             var
              deveti = _K_[1],
              osmi = _J_[1],
              sedmi = _I_[1],
              sesti = _H_[1],
              peti = _G_[1],
              cetrti = _F_[1],
              tretji = _E_[1],
              drugi = _D_[1],
              prvi = sosedi[1];
             return izpisimatrikoint
                     ([0,
                       [0, 0, prvi, 0, drugi, 0, 0],
                       [0, tretji, cetrti, 0, peti, sesti, 0],
                       [0, 0, sedmi, 0, osmi, 0, deveti]]);
            }
           }
          }
         }
        }
       }
      }
     }
    }
    return izpisimatrikoint(caml_call3(Stdlib_Array[2], 3, 6, 0));
   }
   function izlocisosede(matrika, m, n, i, j){
    var
     _l_ = caml_mod((j - 1 | 0) + n | 0, n),
     _m_ = caml_mod((i - 1 | 0) + m | 0, m),
     prvi =
       caml_check_bound(caml_check_bound(matrika, _m_)[1 + _m_], _l_)[1 + _l_],
     _n_ = caml_mod(j + 1 | 0, n),
     _o_ = caml_mod((i - 1 | 0) + m | 0, m),
     drugi =
       caml_check_bound(caml_check_bound(matrika, _o_)[1 + _o_], _n_)[1 + _n_],
     _p_ = caml_mod((j - 2 | 0) + n | 0, n),
     _q_ = caml_mod(i, m),
     tretji =
       caml_check_bound(caml_check_bound(matrika, _q_)[1 + _q_], _p_)[1 + _p_],
     _r_ = caml_mod((j - 1 | 0) + n | 0, n),
     _s_ = caml_mod(i, m),
     cetrti =
       caml_check_bound(caml_check_bound(matrika, _s_)[1 + _s_], _r_)[1 + _r_],
     _t_ = caml_mod(j + 1 | 0, n),
     _u_ = caml_mod(i, m),
     peti =
       caml_check_bound(caml_check_bound(matrika, _u_)[1 + _u_], _t_)[1 + _t_],
     _v_ = caml_mod(j + 2 | 0, n),
     _w_ = caml_mod(i, m),
     sesti =
       caml_check_bound(caml_check_bound(matrika, _w_)[1 + _w_], _v_)[1 + _v_],
     _x_ = caml_mod((j - 1 | 0) + n | 0, n),
     _y_ = caml_mod(i + 1 | 0, m),
     sedmi =
       caml_check_bound(caml_check_bound(matrika, _y_)[1 + _y_], _x_)[1 + _x_],
     _z_ = caml_mod(j + 1 | 0, n),
     _A_ = caml_mod(i + 1 | 0, m),
     osmi =
       caml_check_bound(caml_check_bound(matrika, _A_)[1 + _A_], _z_)[1 + _z_],
     _B_ = caml_mod(j + 3 | 0, n),
     _C_ = caml_mod(i + 1 | 0, m),
     deveti =
       caml_check_bound(caml_check_bound(matrika, _C_)[1 + _C_], _B_)[1 + _B_];
    return [0,
            prvi,
            [0,
             drugi,
             [0,
              tretji,
              [0,
               cetrti,
               [0, peti, [0, sesti, [0, sedmi, [0, osmi, [0, deveti, 0]]]]]]]]];
   }
   function dotprod(matrikaa, matrikab){
    var
     m = matrikaa.length - 1,
     n = caml_check_bound(matrikaa, 0)[1].length - 1,
     vsota = [0, 0],
     _d_ = m - 1 | 0,
     _c_ = 0;
    if(_d_ >= 0){
     var i = _c_;
     for(;;){
      var _f_ = n - 1 | 0, _e_ = 0;
      if(_f_ >= 0){
       var j = _e_;
       for(;;){
        var
         _h_ =
           caml_check_bound(caml_check_bound(matrikaa, i)[1 + i], j)[1 + j],
         _i_ =
           _h_
            ? caml_check_bound(caml_check_bound(matrikab, i)[1 + i], j)[1 + j]
            : _h_,
         _j_ = intofbool(_i_);
        vsota[1] = vsota[1] + _j_ | 0;
        var _k_ = j + 1 | 0;
        if(_f_ === j) break;
        j = _k_;
       }
      }
      var _g_ = i + 1 | 0;
      if(_d_ === i) break;
      i = _g_;
     }
    }
    return vsota[1];
   }
   function init_matrix(rows, cols, f){
    return caml_call2
            (Stdlib_Array[1],
             rows,
             function(i){
              return caml_call2
                      (Stdlib_Array[1],
                       cols,
                       function(j){return caml_call2(f, i, j);});
             });
   }
   function izlocisosedskomatriko(celamatrika, k, prviindeks, drugiindeks){
    var
     m = celamatrika.length - 1,
     n = caml_check_bound(celamatrika, 0)[1].length - 1;
    return init_matrix
            (k,
             k,
             function(i, j){
              var
               _a_ = caml_mod(j + drugiindeks | 0, n),
               _b_ = caml_mod(i + prviindeks | 0, m);
              return caml_check_bound
                       (caml_check_bound(celamatrika, _b_)[1 + _b_], _a_)
                      [1 + _a_];
             });
   }
   function naredimatrikovsot(celamatrika, matrikasosescine){
    var
     m = celamatrika.length - 1,
     n = caml_check_bound(celamatrika, 0)[1].length - 1,
     k = matrikasosescine.length - 1;
    return init_matrix
            (m,
             n,
             function(i, j){
              return dotprod
                      (izlocisosedskomatriko(celamatrika, k, i, j),
                       matrikasosescine);
             });
   }
   var
    Definicije_Izlocisosede =
      [0,
       randomarray,
       randommatrika,
       symbol,
       izpisimatrikoint,
       mapmatrix,
       intofbool,
       boolofint,
       izpisisosedeint,
       izlocisosede,
       dotprod,
       init_matrix,
       izlocisosedskomatriko,
       naredimatrikovsot];
   runtime.caml_register_global
    (6, Definicije_Izlocisosede, "Definicije__Izlocisosede");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
