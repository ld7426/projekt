// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.2

//# unitInfo: Provides: Vdom
//# unitInfo: Requires: CamlinternalLazy, Stdlib, Stdlib__Buffer, Stdlib__Lazy, Stdlib__List, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = "",
    cst_altKey = "altKey",
    cst_autofocus$0 = "autofocus",
    cst_change$1 = "change",
    cst_className$1 = "className",
    cst_click$2 = "click",
    cst_ctrlKey = "ctrlKey",
    cst_currentTarget = "currentTarget",
    cst_input$1 = "input",
    cst_keydown$1 = "keydown",
    cst_keyup$1 = "keyup",
    cst_mousedown$1 = "mousedown",
    cst_shiftKey = "shiftKey",
    cst_target = "target",
    cst_target_value = "target.value",
    caml_equal = runtime.caml_equal,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    x = "&quote;",
    cst$0 = ":",
    cst$1 = ";",
    cst$2 = " ",
    cst$3 = "/>",
    cst$4 = "<\/",
    cst = cst$5,
    key$24 = "target.checked",
    key$23 = "target.selectedIndex",
    key$22 = cst_target_value,
    key$21 = cst_target_value,
    key$19 = cst_target,
    key$20 = cst_currentTarget,
    key$17 = cst_target,
    key$18 = cst_currentTarget,
    key$1 = "left",
    key$2 = "top",
    name = "getBoundingClientRect",
    key$3 = cst_currentTarget,
    key = "clientX",
    key$0 = "clientY",
    key$4 = "pageX",
    key$5 = "pageY",
    key$6 = "buttons",
    key$7 = cst_altKey,
    key$8 = cst_ctrlKey,
    key$9 = cst_shiftKey,
    key$10 = "which",
    key$11 = cst_altKey,
    key$12 = cst_ctrlKey,
    key$13 = cst_shiftKey,
    arg = [0, [0, "text"], 0],
    name$0 = "getData",
    key$14 = "clipboardData",
    key$15 = "currentTarget.selectionStart",
    key$16 = "currentTarget.selectionEnd",
    svg_ns = "http://www.w3.org/2000/svg",
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Echo = [248, "Vdom.Cmd.Echo", caml_fresh_oo_id(0)],
    Batch = [248, "Vdom.Cmd.Batch", caml_fresh_oo_id(0)],
    Bind = [248, "Vdom.Cmd.Bind", caml_fresh_oo_id(0)],
    Map = [248, "Vdom.Cmd.Map", caml_fresh_oo_id(0)];
   function echo(msg){return [0, Echo, msg];}
   function batch(l){return [0, Batch, l];}
   function map(f, x){return [0, Map, f, x];}
   function bind(x, f){return [0, Bind, x, f];}
   var
    Cmd = [0, Echo, Batch, Bind, Map, echo, batch, map, bind],
    Custom = [0];
   function field(key, d){return [0, key, d];}
   function method(name, arg, d){return [1, name, arg, d];}
   function bind$0(f, d){return [2, f, d];}
   function let$0(d, f){return [2, f, d];}
   function const$0(msg){return [3, msg];}
   function factor(f){return [4, f];}
   function map$0(f, d){
    function f$0(msg){var msg$0 = caml_call1(f, msg); return [3, msg$0];}
    return [2, f$0, d];
   }
   function let$1(d, f){return map$0(f, d);}
   function pair(d1, d2){
    function f(x1){function f(x2){return [0, x1, x2];} return map$0(f, d2);}
    return [2, f, d1];
   }
   function app(f, d){
    function f$0(ff){return map$0(ff, d);}
    return [2, f$0, f];
   }
   function map2(f, d1, d2){
    function f$0(x1){
     function f$0(x2){return caml_call2(f, x1, x2);}
     return map$0(f$0, d2);
    }
    return [2, f$0, d1];
   }
   function map_some(f){
    function _C_(x){return [0, caml_call1(f, x)];}
    return function(_D_){return map$0(_C_, _D_);};
   }
   var
    string = 0,
    int$0 = 1,
    float$0 = 2,
    bool = 3,
    unit = [3, 0],
    object = 4;
   function list(d){return [5, d];}
   function fail(error){return [6, error];}
   function try$0(d){return [7, d];}
   function f(param){
    var
     shift_key = param[2],
     _v_ = param[1],
     ctrl_key = _v_[2],
     _w_ = _v_[1],
     alt_key = _w_[2],
     _x_ = _w_[1],
     buttons = _x_[2],
     _y_ = _x_[1],
     page_y = _y_[2],
     _z_ = _y_[1],
     page_x = _z_[2],
     _A_ = _z_[1],
     left_top = _A_[2],
     match = _A_[1],
     y = match[2],
     x = match[1],
     left_top$0 = caml_call1(Stdlib_Lazy[6], left_top);
    function get(x){
     var _B_ = runtime.caml_obj_tag(x);
     a:
     if(250 === _B_)
      var match = x[1];
     else{
      if(246 !== _B_ && 244 !== _B_){var match = x; break a;}
      var match = caml_call1(CamlinternalLazy[2], x);
     }
     if(0 === match[0]){var x$0 = match[1]; return x$0;}
     var err = match[1];
     return caml_call1(Stdlib[2], err);
    }
    var
     element_x = [246, function(param){return x - get(left_top$0)[1];}],
     element_y = [246, function(param){return y - get(left_top$0)[2];}];
    return [0,
            x,
            y,
            page_x,
            page_y,
            element_x,
            element_y,
            buttons,
            alt_key,
            ctrl_key,
            shift_key];
   }
   var left$11 = [0, key, float$0], left = pair(left$11, [0, key$0, float$0]);
   function f$0(param){
    function f(param){
     var top = param[2], left = param[1];
     return [0, left, top];
    }
    var
     left = [0, key$1, float$0],
     d = pair(left, [0, key$2, float$0]),
     d$1 = map$0(f, d),
     d$0 = [1, name, 0, d$1];
    return [0, key$3, d$0];
   }
   var
    left$0 = pair(left, [4, f$0]),
    left$1 = pair(left$0, [0, key$4, float$0]),
    left$2 = pair(left$1, [0, key$5, float$0]),
    left$3 = pair(left$2, [0, key$6, int$0]),
    left$4 = pair(left$3, [0, key$7, bool]),
    left$5 = pair(left$4, [0, key$8, bool]),
    d = pair(left$5, [0, key$9, bool]),
    mouse_event = map$0(f, d);
   function f$1(param){
    var
     shift_key = param[2],
     _u_ = param[1],
     ctrl_key = _u_[2],
     match = _u_[1],
     alt_key = match[2],
     which = match[1];
    return [0, which, alt_key, ctrl_key, shift_key];
   }
   var
    left$10 = [0, key$10, int$0],
    left$6 = pair(left$10, [0, key$11, bool]),
    left$7 = pair(left$6, [0, key$12, bool]),
    d$0 = pair(left$7, [0, key$13, bool]),
    key_event = map$0(f$1, d$0);
   function f$2(param){
    var
     selection_end = param[2],
     match = param[1],
     selection_start = match[2],
     text = match[1];
    return [0, text, selection_start, selection_end];
   }
   var
    d$2 = [1, name$0, arg, string],
    left$9 = [0, key$14, d$2],
    left$8 = pair(left$9, [0, key$15, int$0]),
    d$1 = pair(left$8, [0, key$16, int$0]),
    paste_event = map$0(f$2, d$1),
    cst_mousedown = cst_mousedown$1,
    cst_mousedown$0 = cst_mousedown$1,
    cst_mouseup = "mouseup",
    cst_click = cst_click$2,
    cst_click$0 = cst_click$2,
    cst_dblclick = "dblclick",
    cst_contextmenu = "contextmenu",
    _a_ = [0, 0],
    cst_mousemove = "mousemove",
    cst_mouseenter = "mouseenter",
    cst_mouseleave = "mouseleave",
    cst_mouseover = "mouseover",
    cst_focus = "focus",
    cst_blur = "blur",
    cst_input = cst_input$1,
    cst_change = cst_change$1,
    cst_change$0 = cst_change$1,
    cst_click$1 = cst_click$2,
    cst_keydown = cst_keydown$1,
    cst_keydown$0 = cst_keydown$1,
    cst_keyup = cst_keyup$1,
    cst_keyup$0 = cst_keyup$1,
    cst_paste = "paste",
    cst_scroll_to_show = "scroll-to-show";
   function on_with_options(event_type, decoder){
    return [2, [0, event_type, decoder, function(_t_){return _t_;}]];
   }
   function on(prevent_default, stop_propagation, event_type, decoder){
    var
     prevent_default$0 = prevent_default ? 1 : 0,
     stop_propagation$0 = stop_propagation ? 1 : 0;
    function f(msg){return [0, msg, stop_propagation$0, prevent_default$0];}
    return on_with_options(event_type, map$0(f, decoder));
   }
   function on_cancel(stop_propagation, event_type, decoder){
    var stop_propagation$0 = stop_propagation ? 1 : 0;
    function f(msg){
     return msg
             ? [0, msg, stop_propagation$0, 1]
             : [0, msg, stop_propagation$0, 0];
    }
    return on_with_options(event_type, map$0(f, decoder));
   }
   function on_js_with_options(event_type, handler){
    function f(o){return caml_call1(handler, o);}
    return on_with_options(event_type, map$0(f, object));
   }
   function on_js(prevent_default, stop_propagation, event_type, handler){
    var
     prevent_default$0 = prevent_default ? 1 : 0,
     stop_propagation$0 = stop_propagation ? 1 : 0;
    return on_js_with_options
            (event_type,
             function(e){
              return [0,
                      caml_call1(handler, e),
                      stop_propagation$0,
                      prevent_default$0];
             });
   }
   function onmouseevent(prevent_default, stop_propagation, type, msg){
    return on
            (prevent_default,
             stop_propagation,
             type,
             map_some(msg)(mouse_event));
   }
   function onmouseevent_cancel(stop_propagation, type, msg){
    return on_cancel(stop_propagation, type, map$0(msg, mouse_event));
   }
   function onmousedown(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_mousedown, msg);
   }
   function onmousedown_cancel(stop_propagation, msg){
    return onmouseevent_cancel(stop_propagation, cst_mousedown$0, msg);
   }
   function onmouseup(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_mouseup, msg);
   }
   function onclick(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_click, msg);
   }
   function onclick_cancel(stop_propagation, msg){
    return onmouseevent_cancel(stop_propagation, cst_click$0, msg);
   }
   function ondblclick(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_dblclick, msg);
   }
   function oncontextmenu(stop_propagation, msg){
    return onmouseevent(_a_, stop_propagation, cst_contextmenu, msg);
   }
   function onmousemove(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_mousemove, msg);
   }
   function onmouseenter(prevent_default, stop_propagation, msg){
    function f(param){
     var current_target = param[2], target = param[1];
     return caml_equal(target, current_target)
             ? map_some(msg)(mouse_event)
             : [3, 0];
    }
    var left = [0, key$17, object], d = pair(left, [0, key$18, object]);
    return on(prevent_default, stop_propagation, cst_mouseenter, [2, f, d]);
   }
   function onmouseleave(prevent_default, stop_propagation, msg){
    function f(param){
     var current_target = param[2], target = param[1];
     return caml_equal(target, current_target)
             ? map_some(msg)(mouse_event)
             : [3, 0];
    }
    var left = [0, key$19, object], d = pair(left, [0, key$20, object]);
    return on(prevent_default, stop_propagation, cst_mouseleave, [2, f, d]);
   }
   function onmouseover(prevent_default, stop_propagation, msg){
    return onmouseevent(prevent_default, stop_propagation, cst_mouseover, msg);
   }
   function onfocus(prevent_default, stop_propagation, msg){
    var msg$0 = [0, msg];
    return on(prevent_default, stop_propagation, cst_focus, [3, msg$0]);
   }
   function onblur(prevent_default, stop_propagation, msg){
    var msg$0 = [0, msg];
    return on(prevent_default, stop_propagation, cst_blur, [3, msg$0]);
   }
   function oninput(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_input,
             map_some(msg)([0, key$21, string]));
   }
   function onchange(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_change,
             map_some(msg)([0, key$22, string]));
   }
   function onchange_index(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_change$0,
             map_some(msg)([0, key$23, int$0]));
   }
   function onchange_checked(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_click$1,
             map_some(msg)([0, key$24, bool]));
   }
   function onkeyevent(prevent_default, stop_propagation, type, msg){
    return on
            (prevent_default,
             stop_propagation,
             type,
             map_some(msg)(key_event));
   }
   function onkeyevent_cancel(stop_propagation, type, msg){
    return on_cancel(stop_propagation, type, map$0(msg, key_event));
   }
   function onkeydown(prevent_default, stop_propagation, msg){
    return onkeyevent(prevent_default, stop_propagation, cst_keydown, msg);
   }
   function onkeydown_cancel(stop_propagation, msg){
    return onkeyevent_cancel(stop_propagation, cst_keydown$0, msg);
   }
   function onkeyup(prevent_default, stop_propagation, msg){
    return onkeyevent(prevent_default, stop_propagation, cst_keyup, msg);
   }
   function onkeyup_cancel(stop_propagation, msg){
    return onkeyevent_cancel(stop_propagation, cst_keyup$0, msg);
   }
   function onpaste(prevent_default, stop_propagation, msg){
    return on
            (prevent_default,
             stop_propagation,
             cst_paste,
             map$0(msg, paste_event));
   }
   function oncustomevent(msg){return [2, [1, msg]];}
   function str_prop(k, v){return [0, k, [0, v]];}
   function int_prop(k, v){return [0, k, [1, v]];}
   function bool_prop(k, v){return [0, k, [3, v]];}
   function float_prop(k, v){return [0, k, [2, v]];}
   function style(k, v){return [1, k, v];}
   function attr(k, v){return [3, k, v];}
   function int_attr(k, v){return [3, k, caml_call1(Stdlib[33], v)];}
   function float_attr(k, v){return [3, k, caml_call1(Stdlib[35], v)];}
   function scroll_to_show(align_top){
    return bool_prop(cst_scroll_to_show, align_top);
   }
   var
    autofocus = bool_prop(cst_autofocus$0, 1),
    cst_autofocus = cst_autofocus$0;
   function autofocus_counter(x){return int_prop(cst_autofocus, x);}
   var
    autofocus_if_visible = str_prop(cst_autofocus$0, "if-visible"),
    autosubmit = bool_prop("autosubmit", 1),
    select = bool_prop("select", 1),
    cst_className = cst_className$1,
    cst_type = "type";
   function class$0(x){return [0, cst_className, [0, x]];}
   function type(x){return [0, cst_type, [0, x]];}
   var
    type_button = type("button"),
    cst_value = "value",
    cst_disabled = "disabled",
    _b_ = [0, [2, 0, [12, 32, [2, 0, 0]]], "%s %s"],
    cst_className$0 = cst_className$1,
    cst_txt = "_txt",
    cst_fragment = "_fragment",
    cst_div = "div",
    cst_input$0 = cst_input$1,
    cst_span = "span",
    cst_map = "_map",
    cst_memo = "_memo",
    _c_ = [0, 0],
    cst_custom = "_custom",
    _d_ = [0, 0, 0],
    cst_class = "class",
    cst_style = "style",
    _e_ = [0, [2, 0, [11, '="', [2, 0, [12, 34, 0]]]], '%s="%s"'],
    cst_xmlns = "xmlns";
   function value(x){return [0, cst_value, [0, x]];}
   function disabled(x){return [0, cst_disabled, [3, x]];}
   function add_class(x, attrs){
    var
     has_className =
       caml_call2
        (Stdlib_List[34],
         function(param){
          if(0 === param[0] && param[1] === cst_className$1) return 1;
          return 0;
         },
         attrs);
    return has_className
            ? caml_call2
              (Stdlib_List[20],
               function(a){
                if(0 === a[0] && a[1] === cst_className$1){
                 var match = a[2];
                 if(0 === match[0]){
                  var s = match[1];
                  return [0,
                          cst_className$0,
                          [0, caml_call3(Stdlib_Printf[4], _b_, s, x)]];
                 }
                }
                return a;
               },
               attrs)
            : [0, class$0(x), attrs];
   }
   function text(opt, txt){
    var key = opt ? opt[1] : cst_txt;
    return [0, key, txt];
   }
   function fragment(opt, children){
    var key = opt ? opt[1] : cst_fragment;
    return [1, key, children];
   }
   function elt(_s_, tag, key, opt, l){
    var ns = _s_ ? _s_[1] : cst, a = opt ? opt[1] : 0;
    if(key) var k = key[1], k$0 = k; else var k$0 = tag;
    return [2, k$0, ns, tag, a, l];
   }
   function svg_elt(tag, key, a, l){return elt([0, svg_ns], tag, key, a, l);}
   function div(key, a, l){return elt(0, cst_div, key, a, l);}
   function input(key, a, l){return elt(0, cst_input$0, key, a, l);}
   function txt_span(key, a, s){
    return elt(0, cst_span, key, a, [0, text(0, s), 0]);
   }
   function map_attr(f, x){
    switch(x[0]){
      case 2:
       var attributes = x[4], _o_ = x[5], _p_ = caml_call1(f, attributes);
       return [2, x[1], x[2], x[3], _p_, _o_];
      case 5:
       var attributes$0 = x[3], _q_ = x[4], _r_ = caml_call1(f, attributes$0);
       return [5, x[1], x[2], _r_, _q_];
      default: return x;
    }
   }
   function map$1(opt, f, child){
    var key = opt ? opt[1] : cst_map;
    return [3, key, f, child];
   }
   function memo(opt, f, arg){
    var key = opt ? opt[1] : cst_memo;
    return [4, key, f, arg];
   }
   function custom(_n_, opt, propagate_events, elt){
    var key = _n_ ? _n_[1] : cst_custom, a = opt ? opt[1] : 0;
    return [5, key, elt, a, caml_equal(propagate_events, _c_)];
   }
   function return$0(opt, model){
    var c = opt ? opt[1] : 0;
    return [0, model, caml_call1(Cmd[6], c)];
   }
   function app$0(init, update, view, param){return [0, init, update, view];}
   function simple_app(init, update, view, param){
    function update$0(model, msg){
     return return$0(0, caml_call2(update, model, msg));
    }
    var init$0 = return$0(0, init);
    return [0, init$0, update$0, view];
   }
   function to_html(vdom){
    var b = caml_call1(Stdlib_Buffer[1], 654);
    function aux(param){
     var param$0 = param;
     for(;;)
      switch(param$0[0]){
        case 0:
         var txt = param$0[2]; return caml_call2(Stdlib_Buffer[16], b, txt);
        case 1:
         var children = param$0[2];
         return caml_call2(Stdlib_List[18], aux, children);
        case 2:
         var
          children$0 = param$0[5],
          attributes = param$0[4],
          tag = param$0[3],
          ns = param$0[2],
          match =
            caml_call3
             (Stdlib_List[26],
              function(_l_, param){
               var styles = _l_[2], attrs = _l_[1];
               switch(param[0]){
                 case 0:
                  var value = param[2], name = param[1];
                  switch(value[0]){
                    case 0:
                     var s = value[1], value$0 = s; break;
                    case 1:
                     var i = value[1], value$0 = caml_call1(Stdlib[33], i);
                     break;
                    case 2:
                     var
                      f = value[1],
                      s$0 = caml_call1(Stdlib[35], f),
                      l = [0, caml_ml_string_length(s$0)];
                     for(;;){
                      if(0 >= l[1]) break;
                      if(caml_string_get(s$0, l[1] - 1 | 0) !== 46) break;
                      l[1]--;
                     }
                     var
                      _m_ =
                        l[1] < caml_ml_string_length(s$0)
                         ? caml_call3(Stdlib_String[16], s$0, 0, l[1])
                         : s$0,
                      value$0 = _m_;
                     break;
                    default:
                     var b = value[1], value$0 = caml_call1(Stdlib[30], b);
                  }
                  var name$0 = name !== cst_className$1 ? name : cst_class;
                  return [0, [0, [0, name$0, value$0], attrs], styles];
                 case 1:
                  var value$1 = param[2], name$1 = param[1];
                  return [0, attrs, [0, [0, name$1, value$1], styles]];
                 case 2:
                  return [0, attrs, styles];
                 default:
                  var value$2 = param[2], name$2 = param[1];
                  return [0, [0, [0, name$2, value$2], attrs], styles];
               }
              },
              _d_,
              attributes),
          styles = match[2],
          attrs = match[1];
         if(styles)
          var
           _f_ =
             caml_call2
              (Stdlib_List[20],
               function(param){
                var
                 x2 = param[2],
                 x1 = param[1],
                 _k_ = caml_call2(Stdlib[28], cst$0, x2);
                return caml_call2(Stdlib[28], x1, _k_);
               },
               styles),
           styles$0 = caml_call1(caml_call1(Stdlib_String[7], cst$1), _f_),
           attrs$0 = [0, [0, cst_style, styles$0], attrs];
         else
          var attrs$0 = attrs;
         var
          attrs$1 = caml_call1(Stdlib_List[10], attrs$0),
          attrs$2 = ns == cst$5 ? attrs$1 : [0, [0, cst_xmlns, ns], attrs$1],
          _g_ =
            caml_call2
             (Stdlib_List[20],
              function(param){
               var
                v = param[2],
                k = param[1],
                match = caml_call2(Stdlib_String[37], v, 34);
               if(match){
                var
                 i0 = match[1],
                 buf = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(v));
                caml_call4(Stdlib_Buffer[18], buf, v, 0, i0);
                var _h_ = caml_ml_string_length(v) - 1 | 0;
                if(_h_ >= i0){
                 var i = i0;
                 for(;;){
                  var u = caml_string_get(v, i);
                  if(u === 34)
                   caml_call2(Stdlib_Buffer[16], buf, x);
                  else
                   caml_call2(Stdlib_Buffer[12], buf, u);
                  var _i_ = i + 1 | 0;
                  if(_h_ === i) break;
                  i = _i_;
                 }
                }
                var _j_ = caml_call1(Stdlib_Buffer[2], buf);
               }
               else
                var _j_ = v;
               return caml_call3(Stdlib_Printf[4], _e_, k, _j_);
              },
              attrs$2),
          attrs$3 = caml_call1(caml_call1(Stdlib_String[7], cst$2), _g_);
         caml_call2(Stdlib_Buffer[12], b, 60);
         caml_call2(Stdlib_Buffer[16], b, tag);
         if(attrs$3 !== cst$5){
          caml_call2(Stdlib_Buffer[12], b, 32);
          caml_call2(Stdlib_Buffer[16], b, attrs$3);
         }
         return 0 === children$0
                 ? caml_call2(Stdlib_Buffer[16], b, cst$3)
                 : (caml_call2
                    (Stdlib_Buffer[12], b, 62),
                   caml_call2(Stdlib_List[18], aux, children$0),
                   caml_call2(Stdlib_Buffer[16], b, cst$4),
                   caml_call2(Stdlib_Buffer[16], b, tag),
                   caml_call2(Stdlib_Buffer[12], b, 62));
        case 3:
         var child = param$0[3]; param$0 = child; break;
        case 4:
         var arg = param$0[3], f = param$0[2];
         param$0 = caml_call1(f, arg);
         break;
        default: return 0;
      }
    }
    aux(vdom);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   var
    Vdom =
      [0,
       Cmd,
       [0,
        field,
        method,
        app,
        bind$0,
        const$0,
        const$0,
        factor,
        map$0,
        map2,
        pair,
        fail,
        try$0,
        string,
        int$0,
        float$0,
        bool,
        unit,
        object,
        list,
        let$0,
        let$1,
        pair],
       Custom,
       on,
       on_with_options,
       on_js,
       on_js_with_options,
       onmousedown,
       onmousedown_cancel,
       onmouseup,
       onclick,
       onclick_cancel,
       ondblclick,
       oncontextmenu,
       onfocus,
       onblur,
       oninput,
       onchange_checked,
       onchange,
       onchange_index,
       onmousemove,
       onmouseenter,
       onmouseleave,
       onmouseover,
       onkeydown,
       onkeydown_cancel,
       onkeyup,
       onkeyup_cancel,
       onpaste,
       oncustomevent,
       str_prop,
       int_prop,
       bool_prop,
       float_prop,
       style,
       attr,
       int_attr,
       float_attr,
       class$0,
       type,
       type_button,
       value,
       disabled,
       add_class,
       scroll_to_show,
       autofocus,
       autofocus_if_visible,
       autofocus_counter,
       select,
       autosubmit,
       elt,
       svg_elt,
       text,
       fragment,
       map_attr,
       map$1,
       memo,
       custom,
       div,
       input,
       txt_span,
       return$0,
       app$0,
       simple_app,
       to_html];
   runtime.caml_register_global(104, Vdom, "Vdom");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
