// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.2

//# unitInfo: Provides: Js_browser
//# unitInfo: Requires: Assert_failure, Ojs, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Array = "Array",
    cst_Date = "Date",
    cst_JSON = "JSON",
    cst_URL = "URL",
    cst_Uint8Array = "Uint8Array",
    cst_binaryType = "binaryType",
    cst_blur = "blur",
    cst_bottom = "bottom",
    cst_challenge = "challenge",
    cst_checked = "checked",
    cst_className = "className",
    cst_click = "click",
    cst_clientDataJSON = "clientDataJSON",
    cst_close = "close",
    cst_code = "code",
    cst_cookie = "cookie",
    cst_credentials = "credentials",
    cst_document = "document",
    cst_files = "files",
    cst_firstChild = "firstChild",
    cst_focus = "focus",
    cst_hash = "hash",
    cst_height = "height",
    cst_host = "host",
    cst_hostname = "hostname",
    cst_href = "href",
    cst_id = "id",
    cst_innerHTML = "innerHTML",
    cst_key = "key",
    cst_left = "left",
    cst_length = "length",
    cst_lib_js_browser_ml = "lib/js_browser.ml",
    cst_location = "location",
    cst_name = "name",
    cst_navigator = "navigator",
    cst_nodeValue = "nodeValue",
    cst_onload = "onload",
    cst_open = "open",
    cst_origin = "origin",
    cst_pathname = "pathname",
    cst_port = "port",
    cst_protocol = "protocol",
    cst_publicKey = "publicKey",
    cst_push = "push",
    cst_readyState = "readyState",
    cst_response = "response",
    cst_responseType = "responseType",
    cst_result = "result",
    cst_right = "right",
    cst_scrollTop = "scrollTop",
    cst_search = "search",
    cst_select = "select",
    cst_selectionEnd = "selectionEnd",
    cst_selectionStart = "selectionStart",
    cst_submit = "submit",
    cst_timeout = "timeout",
    cst_top = "top",
    cst_type = "type",
    cst_userVerification = "userVerification",
    cst_value = "value",
    cst_width = "width",
    cst_window = "window",
    caml_js_from_string = runtime.caml_js_from_string,
    caml_js_to_string = runtime.caml_js_to_string,
    caml_js_wrap_callback_strict = runtime.caml_js_wrap_callback_strict,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ojs_new_arr = runtime.caml_ojs_new_arr;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Ojs = global_data.Ojs,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List;
   function then(error, success, param){
    var ojs = param[2], alpha_of_js = param[1];
    function x1(x){return caml_call1(success, caml_call1(alpha_of_js, x));}
    ojs.then
     (caml_js_wrap_callback_strict(1, x1),
      caml_call2
       (Ojs[8],
        function(x4){return caml_js_wrap_callback_strict(1, x4);},
        error));
    return 0;
   }
   function t_of_js(x8){return x8;}
   function t_to_js(x7){return x7;}
   function length(x9){return x9[cst_length];}
   function key(x11, x10){
    var _ak_ = x11.key(x10);
    return caml_call2(Ojs[7], caml_js_to_string, _ak_);
   }
   function get_item(x14, x13){
    var _aj_ = x14.getItem(caml_js_from_string(x13));
    return caml_call2(Ojs[7], caml_js_to_string, _aj_);
   }
   function set_item(x18, x16, x17){
    x18.setItem(caml_js_from_string(x16), caml_js_from_string(x17));
    return 0;
   }
   function remove_item(x20, x19){
    x20.removeItem(caml_js_from_string(x19));
    return 0;
   }
   function clear(x21){x21.clear(); return 0;}
   var
    Storage =
      [0,
       t_of_js,
       t_to_js,
       length,
       key,
       get_item,
       set_item,
       remove_item,
       clear];
   function t_of_js$0(x23){return x23;}
   function t_to_js$0(x22){return x22;}
   function new_reg_exp(x24, x25, param){
    var x26 = new Ojs[19][cst_Array];
    x26.push(caml_js_from_string(x24));
    if(x25){var x27 = x25[1]; x26.push(caml_js_from_string(x27));}
    var x23 = caml_ojs_new_arr(Ojs[19]["RegExp"], x26);
    return x23;
   }
   var RegExp = [0, t_of_js$0, t_to_js$0, new_reg_exp];
   function t_of_js$1(x29){return x29;}
   function t_to_js$1(x28){return x28;}
   var of_string = caml_js_from_string, to_string = caml_js_to_string;
   function length$0(x30){return x30[cst_length];}
   function char_code_at(x32, x31){return x32.charCodeAt(x31);}
   function to_lower_case(x33){var x29 = x33.toLowerCase(); return x29;}
   function to_upper_case(x34){var x29 = x34.toUpperCase(); return x29;}
   function concat(x38, x35){
    var x36 = new Ojs[19][cst_Array];
    caml_call2(Stdlib_List[17], function(x37){x36.push(x37); return 0;}, x35);
    var x29 = x38["concat"].apply(x38, x36);
    return x29;
   }
   function includes(x41, x40){return x41.includes(x40) | 0;}
   function ends_with(x43, x42){return x43.endsWith(x42) | 0;}
   function index_of(x45, x44){return x45.indexOf(x44);}
   function repeat(x47, x46){var x29 = x47.repeat(x46); return x29;}
   function search(x49, x48){return x49.search(caml_call1(RegExp[2], x48));}
   function trim(x50){var x29 = x50.trim(); return x29;}
   var
    JsString =
      [0,
       t_of_js$1,
       t_to_js$1,
       of_string,
       to_string,
       length$0,
       char_code_at,
       to_lower_case,
       to_upper_case,
       concat,
       includes,
       ends_with,
       index_of,
       repeat,
       search,
       trim];
   function t_of_js$2(x52){return x52;}
   function t_to_js$2(x51){return x51;}
   function new_date(x53){var x52 = new Ojs[19][cst_Date](x53); return x52;}
   function now(param){return Ojs[19][cst_Date].now();}
   function parse(x54){
    var _ai_ = caml_js_from_string(x54), x52 = Ojs[19][cst_Date].parse(_ai_);
    return x52;
   }
   function get_date(x55){return x55.getDate();}
   function get_day(x56){return x56.getDay();}
   function get_full_year(x57){return x57.getFullYear();}
   function get_hours(x58){return x58.getHours();}
   function get_milliseconds(x59){return x59.getMilliseconds();}
   function get_minutes(x60){return x60.getMinutes();}
   function get_month(x61){return x61.getMonth();}
   function get_seconds(x62){return x62.getSeconds();}
   function get_time(x63){return x63.getTime();}
   function get_timezone_offset(x64){return x64.getTimezoneOffset();}
   function get_UTC_date(x65){return x65.getUTCDate();}
   function get_UTC_day(x66){return x66.getUTCDay();}
   function get_UTC_full_year(x67){return x67.getUTCFullYear();}
   function get_UTC_hours(x68){return x68.getUTCHours();}
   function get_UTC_milliseconds(x69){return x69.getUTCMilliseconds();}
   function get_UTC_minutes(x70){return x70.getUTCMinutes();}
   function get_UTC_month(x71){return x71.getUTCMonth();}
   function get_UTC_seconds(x72){return x72.getUTCSeconds();}
   function get_year(x73){return x73.getYear();}
   function set_date(x75, x74){x75.setDate(x74); return 0;}
   function set_full_year(x77, x76){x77.setFullYear(x76); return 0;}
   function set_hours(x79, x78){x79.setHours(x78); return 0;}
   function set_milliseconds(x81, x80){x81.setMilliseconds(x80); return 0;}
   function set_minutes(x83, x82){x83.setMinutes(x82); return 0;}
   function set_month(x85, x84){x85.setMonth(x84); return 0;}
   function set_seconds(x87, x86){x87.setSeconds(x86); return 0;}
   function set_time(x89, x88){x89.setTime(x88); return 0;}
   function set_UTC_date(x91, x90){x91.setUTCDate(x90); return 0;}
   function set_UTC_full_year(x93, x92){x93.setUTCFullYear(x92); return 0;}
   function set_UTC_hours(x95, x94){x95.setUTCHours(x94); return 0;}
   function set_UTC_milliseconds(x97, x96){x97.setUTCMilliseconds(x96); return 0;
   }
   function set_UTC_minutes(x99, x98){x99.setUTCMinutes(x98); return 0;}
   function set_UTC_month(x101, x100){x101.setUTCMonth(x100); return 0;}
   function set_UTC_seconds(x103, x102){x103.setUTCSeconds(x102); return 0;}
   function set_year(x105, x104){x105.setYear(x104); return 0;}
   function to_date_string(x106){
    return caml_js_to_string(x106.toDateString());
   }
   function to_GMT_string(x107){return caml_js_to_string(x107.toGMTString());}
   function to_ISO_string(x108){return caml_js_to_string(x108.toISOString());}
   function to_locale_string(x109){
    return caml_js_to_string(x109.toLocaleString());
   }
   function to_string$0(x110){return caml_js_to_string(x110.toString());}
   function to_time_string(x111){
    return caml_js_to_string(x111.toTimeString());
   }
   function to_UTC_string(x112){return caml_js_to_string(x112.toUTCString());}
   var
    Date =
      [0,
       t_of_js$2,
       t_to_js$2,
       new_date,
       now,
       parse,
       get_date,
       get_day,
       get_full_year,
       get_hours,
       get_milliseconds,
       get_minutes,
       get_month,
       get_seconds,
       get_time,
       get_timezone_offset,
       get_UTC_date,
       get_UTC_day,
       get_UTC_full_year,
       get_UTC_hours,
       get_UTC_milliseconds,
       get_UTC_minutes,
       get_UTC_month,
       get_UTC_seconds,
       get_year,
       set_date,
       set_full_year,
       set_hours,
       set_milliseconds,
       set_minutes,
       set_month,
       set_seconds,
       set_time,
       set_UTC_date,
       set_UTC_full_year,
       set_UTC_hours,
       set_UTC_milliseconds,
       set_UTC_minutes,
       set_UTC_month,
       set_UTC_seconds,
       set_year,
       to_date_string,
       to_GMT_string,
       to_ISO_string,
       to_locale_string,
       to_string$0,
       to_time_string,
       to_UTC_string];
   function t_of_js$3(x114){return x114;}
   function t_to_js$3(x113){return x113;}
   function create(x115){
    var x114 = new Ojs[19]["ArrayBuffer"](x115);
    return x114;
   }
   var ArrayBuffer = [0, t_of_js$3, t_to_js$3, create];
   function options(x118, x119, param){
    var x120 = caml_call1(Ojs[11], 0);
    if(x118){var x122 = x118[1]; x120[cst_type] = caml_js_from_string(x122);}
    if(x119){var x121 = x119[1]; x120["endings"] = caml_js_from_string(x121);}
    return x120;
   }
   function t_of_js$4(x124){return x124;}
   function t_to_js$4(x123){return x123;}
   function create$0(x125, x126, param){
    var x127 = new Ojs[19][cst_Array];
    x127.push(caml_call2(Ojs[4], function(x129){return x129;}, x125));
    if(x126){var x128 = x126[1]; x127.push(x128);}
    var x124 = caml_ojs_new_arr(Ojs[19]["Blob"], x127);
    return x124;
   }
   function size(x130){return x130["size"];}
   function type(x131){return caml_js_to_string(x131[cst_type]);}
   function text(x132, param){
    var x = x132.text(), f = caml_js_to_string;
    return [0, f, x];
   }
   function t_of_js$5(x135){return x135;}
   function t_to_js$5(x134){return x134;}
   function options$0(x138, x139, param){
    var x140 = caml_call1(Ojs[11], 0);
    if(x138){var x142 = x138[1]; x140[cst_type] = caml_js_from_string(x142);}
    if(x139){var x141 = x139[1]; x140["lastModified"] = x141;}
    return x140;
   }
   function create$1(x143, x145, x146){
    var
     _ag_ = caml_js_from_string(x145),
     _ah_ = caml_call2(Ojs[2], t_to_js$4, x143),
     x135 = new Ojs[19]["File"](_ah_, _ag_, x146);
    return x135;
   }
   function name(x147){return caml_js_to_string(x147[cst_name]);}
   function t_of_js$6(x149){return x149;}
   function t_to_js$6(x148){return x148;}
   function files(x150){
    var _af_ = x150[cst_files];
    return caml_call2(Ojs[3], t_of_js$5, _af_);
   }
   function get_data(x153, x152){
    return caml_js_to_string(x153.getData(caml_js_from_string(x152)));
   }
   var DataTransfer = [0, t_of_js$6, t_to_js$6, files, get_data];
   function t_of_js$7(x155){return x155;}
   function t_to_js$7(x154){return x154;}
   function kind_to_js(x156){
    if(typeof x156 !== "number"){
     var x157 = x156[1];
     return caml_js_from_string(x157);
    }
    var _ae_ = x156;
    if(88 <= _ae_){
     if(132 <= _ae_)
      switch(_ae_){
        case 132:
         return "resume";
        case 133:
         return "scroll";
        case 134:
         return "seeked";
        case 135:
         return "seeking";
        case 136:
         return cst_select;
        case 137:
         return "selectionchange";
        case 138:
         return "selectstart";
        case 139:
         return "show";
        case 140:
         return "slotchange";
        case 141:
         return "soundend";
        case 142:
         return "soundstart";
        case 143:
         return "speechend";
        case 144:
         return "speechstart";
        case 145:
         return "stalled";
        case 146:
         return "start";
        case 147:
         return "storage";
        case 148:
         return cst_submit;
        case 149:
         return "success";
        case 150:
         return "suspend";
        case 151:
         return "SVGAbort";
        case 152:
         return "SVGError";
        case 153:
         return "SVGLoad";
        case 154:
         return "SVGResize";
        case 155:
         return "SVGScroll";
        case 156:
         return "SVGUnload";
        case 157:
         return "SVGZoom";
        case 158:
         return cst_timeout;
        case 159:
         return "timeupdate";
        case 160:
         return "touchcancel";
        case 161:
         return "touchend";
        case 162:
         return "touchmove";
        case 163:
         return "touchstart";
        case 164:
         return "transitionend";
        case 165:
         return "unload";
        case 166:
         return "updateready";
        case 167:
         return "upgradeneeded";
        case 168:
         return "userproximity";
        case 169:
         return "versionchange";
        case 170:
         return "visibilitychange";
        case 171:
         return "voiceschanged";
        case 172:
         return "volumechange";
        case 173:
         return "waiting";
        default: return "wheel";
      }
     switch(_ae_){
       case 88:
        return "message";
       case 89:
        return "messageerror";
       case 90:
        return "mousedown";
       case 91:
        return "mouseenter";
       case 92:
        return "mouseleave";
       case 93:
        return "mousemove";
       case 94:
        return "mouseout";
       case 95:
        return "mouseover";
       case 96:
        return "mouseup";
       case 97:
        return "nomatch";
       case 98:
        return "notificationclick";
       case 99:
        return "noupdate";
       case 100:
        return "obsolete";
       case 101:
        return "offline";
       case 102:
        return "online";
       case 103:
        return cst_open;
       case 104:
        return "orientationchange";
       case 105:
        return "pagehide";
       case 106:
        return "pageshow";
       case 107:
        return "paste";
       case 108:
        return "pause";
       case 109:
        return "play";
       case 110:
        return "playing";
       case 111:
        return "pointercancel";
       case 112:
        return "pointerdown";
       case 113:
        return "pointerenter";
       case 114:
        return "pointerleave";
       case 115:
        return "pointerlockchange";
       case 116:
        return "pointerlockerror";
       case 117:
        return "pointermove";
       case 118:
        return "pointerout";
       case 119:
        return "pointerover";
       case 120:
        return "pointerup";
       case 121:
        return "popstate";
       case 122:
        return "progress";
       case 123:
        return cst_push;
       case 124:
        return "pushsubscriptionchange";
       case 125:
        return "ratechange";
       case 126:
        return "readystatechange";
       case 127:
        return "repeatEvent";
       case 128:
        return "reset";
       case 129:
        return "resize";
       case 130:
        return "resourcetimingbufferfull";
       default: return cst_result;
     }
    }
    if(44 <= _ae_)
     switch(_ae_){
       case 44:
        return "DOMFocusIn";
       case 45:
        return "DOMFocusOut";
       case 46:
        return "DOMNodeInserted";
       case 47:
        return "DOMNodeInsertedIntoDocument";
       case 48:
        return "DOMNodeRemoved";
       case 49:
        return "DOMNodeRemovedFromDocument";
       case 50:
        return "DOMSubtreeModified";
       case 51:
        return "downloading";
       case 52:
        return "drag";
       case 53:
        return "dragend";
       case 54:
        return "dragenter";
       case 55:
        return "dragleave";
       case 56:
        return "dragover";
       case 57:
        return "dragstart";
       case 58:
        return "drop";
       case 59:
        return "durationchange";
       case 60:
        return "emptied";
       case 61:
        return "end";
       case 62:
        return "ended";
       case 63:
        return "endEvent";
       case 64:
        return "error";
       case 65:
        return cst_focus;
       case 66:
        return "focusin";
       case 67:
        return "focusout";
       case 68:
        return "fullscreenchange";
       case 69:
        return "fullscreenerror";
       case 70:
        return "gamepadconnected";
       case 71:
        return "gamepaddisconnected";
       case 72:
        return "gotpointercapture";
       case 73:
        return "hashchange";
       case 74:
        return "input";
       case 75:
        return "invalid";
       case 76:
        return "keydown";
       case 77:
        return "keypress";
       case 78:
        return "keyup";
       case 79:
        return "languagechange";
       case 80:
        return "levelchange";
       case 81:
        return "load";
       case 82:
        return "loadeddata";
       case 83:
        return "loadedmetadata";
       case 84:
        return "loadend";
       case 85:
        return "loadstart";
       case 86:
        return "lostpointercapture";
       default: return "mark";
     }
    switch(_ae_){
      case 0:
       return "abort";
      case 1:
       return "afterprint";
      case 2:
       return "animationend";
      case 3:
       return "animationiteration";
      case 4:
       return "animationstart";
      case 5:
       return "appinstalled";
      case 6:
       return "audioend";
      case 7:
       return "audioprocess";
      case 8:
       return "audiostart";
      case 9:
       return "beforeprint";
      case 10:
       return "beforeunload";
      case 11:
       return "beginEvent";
      case 12:
       return "blocked";
      case 13:
       return cst_blur;
      case 14:
       return "boundary";
      case 15:
       return "cached";
      case 16:
       return "canplay";
      case 17:
       return "canplaythrough";
      case 18:
       return "change";
      case 19:
       return "chargingchange";
      case 20:
       return "chargingtimechange";
      case 21:
       return "checking";
      case 22:
       return cst_click;
      case 23:
       return cst_close;
      case 24:
       return "complete";
      case 25:
       return "compositionend";
      case 26:
       return "compositionstart";
      case 27:
       return "compositionupdate";
      case 28:
       return "contextmenu";
      case 29:
       return "copy";
      case 30:
       return "cut";
      case 31:
       return "dblclick";
      case 32:
       return "devicechange";
      case 33:
       return "devicelight";
      case 34:
       return "devicemotion";
      case 35:
       return "deviceorientation";
      case 36:
       return "deviceproximity";
      case 37:
       return "dischargingtimechange";
      case 38:
       return "DOMActivate";
      case 39:
       return "DOMAttributeNameChanged";
      case 40:
       return "DOMAttrModified";
      case 41:
       return "DOMCharacterDataModified";
      case 42:
       return "DOMContentLoaded";
      default: return "DOMElementNameChanged";
    }
   }
   function target(x161){return x161["target"];}
   function related_target(x162){
    var _ad_ = x162["relatedTarget"];
    return caml_call2(Ojs[7], function(x163){return x163;}, _ad_);
   }
   function prevent_default(x164){x164.preventDefault(); return 0;}
   function stop_propagation(x165){x165.stopPropagation(); return 0;}
   function type$0(x166){return caml_js_to_string(x166[cst_type]);}
   function init_event(x170, x167, x168, x169){
    x170.initEvent(kind_to_js(x167), ! ! x168, ! ! x169);
    return 0;
   }
   function client_x(x171){return x171["clientX"];}
   function client_y(x172){return x172["clientY"];}
   function page_x(x173){return x173["pageX"];}
   function page_y(x174){return x174["pageY"];}
   function screen_x(x175){return x175["screenX"];}
   function screen_y(x176){return x176["screenY"];}
   function movement_x(x177){return x177["movementX"];}
   function movement_y(x178){return x178["movementY"];}
   function buttons(x179){return x179["buttons"];}
   function alt_key(x180){return x180["altKey"] | 0;}
   function ctrl_key(x181){return x181["ctrlKey"] | 0;}
   function shift_key(x182){return x182["shiftKey"] | 0;}
   function which(x183){return x183["which"];}
   function code(x184){return caml_js_to_string(x184[cst_code]);}
   function key$0(x185){return caml_js_to_string(x185[cst_key]);}
   function delta_y(x186){return x186["deltaY"];}
   function delta_x(x187){return x187["deltaX"];}
   function data_transfer(x188){
    var _ac_ = x188["dataTransfer"];
    return caml_call1(DataTransfer[1], _ac_);
   }
   function clipboard_data(x189){
    var _ab_ = x189["clipboardData"];
    return caml_call1(DataTransfer[1], _ab_);
   }
   function data(x190){return x190["data"];}
   function origin(x191){return caml_js_to_string(x191[cst_origin]);}
   function state(x192){return x192["state"];}
   function t_of_js$8(x194){return x194;}
   function t_to_js$8(x193){return x193;}
   function height(x195){return x195[cst_height];}
   function width(x196){return x196[cst_width];}
   function left(x197){return x197[cst_left];}
   function right(x198){return x198[cst_right];}
   function top(x199){return x199[cst_top];}
   function bottom(x200){return x200[cst_bottom];}
   var
    Rect = [0, t_of_js$8, t_to_js$8, height, width, left, right, top, bottom];
   function t_of_js$9(x202){return x202;}
   function t_to_js$9(x201){return x201;}
   function x(x203){return x203["x"];}
   function y(x204){return x204["y"];}
   function height$0(x205){return x205[cst_height];}
   function width$0(x206){return x206[cst_width];}
   var SVGRect = [0, t_of_js$9, t_to_js$9, x, y, height$0, width$0];
   function t_of_js$10(x208){return x208;}
   function t_to_js$10(x207){return x207;}
   function set(style, prop, value){
    return style[prop] = caml_js_from_string(value);
   }
   function set_color(x209, x210){
    return x209["color"] = caml_js_from_string(x210);
   }
   function set_border(x211, x212){
    return x211["border"] = caml_js_from_string(x212);
   }
   function set_background(x213, x214){
    return x213["background"] = caml_js_from_string(x214);
   }
   function set_background_color(x215, x216){
    return x215["backgroundColor"] = caml_js_from_string(x216);
   }
   function set_height(x217, x218){
    return x217[cst_height] = caml_js_from_string(x218);
   }
   function set_width(x219, x220){
    return x219[cst_width] = caml_js_from_string(x220);
   }
   function set_bottom(x221, x222){
    return x221[cst_bottom] = caml_js_from_string(x222);
   }
   function set_left(x223, x224){
    return x223[cst_left] = caml_js_from_string(x224);
   }
   function set_top(x225, x226){
    return x225[cst_top] = caml_js_from_string(x226);
   }
   function set_right(x227, x228){
    return x227[cst_right] = caml_js_from_string(x228);
   }
   function set_position(x229, x230){
    return x229["position"] = caml_js_from_string(x230);
   }
   function set_cursor(x231, x232){
    return x231["cursor"] = caml_js_from_string(x232);
   }
   function set_display(x233, x234){
    return x233["display"] = caml_js_from_string(x234);
   }
   function set_visibility(x235, x236){
    return x235["visibility"] = caml_js_from_string(x236);
   }
   function get(style, prop){return caml_js_to_string(style[prop]);}
   function unset(style, prop){return style[prop] = Ojs[20];}
   var
    Style =
      [0,
       t_of_js$10,
       t_to_js$10,
       set,
       set_color,
       set_border,
       set_background,
       set_background_color,
       set_height,
       set_width,
       set_bottom,
       set_left,
       set_top,
       set_right,
       set_position,
       set_cursor,
       set_display,
       set_visibility,
       get,
       unset];
   function t_of_js$11(x238){return x238;}
   function t_to_js$11(x237){return x237;}
   function add(x240, x239){x240.add(caml_js_from_string(x239)); return 0;}
   function remove(x242, x241){
    x242.remove(caml_js_from_string(x241));
    return 0;
   }
   function contains(x244, x243){
    return x244.contains(caml_js_from_string(x243)) | 0;
   }
   function replace(x247, x245, x246){
    x247.replace(caml_js_from_string(x245), caml_js_from_string(x246));
    return 0;
   }
   function toggle(x250, x248, x249){
    return x250.toggle(caml_js_from_string(x248), ! ! x249) | 0;
   }
   var
    ClassList =
      [0, t_of_js$11, t_to_js$11, add, remove, contains, replace, toggle];
   function t_of_js$12(x252){return x252;}
   function t_to_js$12(x251){return x251;}
   var null$0 = Ojs[20], _a_ = [0, cst_lib_js_browser_ml, 1231, 15];
   function id(x253){return caml_js_to_string(x253[cst_id]);}
   function set_id(x254, x255){
    return x254[cst_id] = caml_js_from_string(x255);
   }
   function node_type(x259){
    var x257 = x259["nodeType"], switcher = x257 - 1 | 0;
    if(10 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return 0;
       case 2:
        return 1;
       case 6:
        return 2;
       case 7:
        return 3;
       case 8:
        return 4;
       case 9:
        return 5;
       case 10:
        return 6;
     }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function clone_node(x261, x260){
    var x252 = x261.cloneNode(! ! x260);
    return x252;
   }
   function contains$0(x263, x262){return x263.contains(x262) | 0;}
   function append_child(x265, x264){x265.appendChild(x264); return 0;}
   function insert_before(x268, x266, x267){
    x268.insertBefore(x266, x267);
    return 0;
   }
   function replace_child(x271, x269, x270){
    x271.replaceChild(x269, x270);
    return 0;
   }
   function remove_child(x273, x272){x273.removeChild(x272); return 0;}
   function first_child(x274){var x252 = x274[cst_firstChild]; return x252;}
   function last_child(x275){var x252 = x275["lastChild"]; return x252;}
   function next_sibling(x276){var x252 = x276["nextSibling"]; return x252;}
   function remove_all_children(x274){
    var child$1 = x274[cst_firstChild], child = child$1;
    for(;;){
     if(runtime.caml_equal(child, null$0)) return 0;
     remove_child(x274, child);
     var child$0 = x274[cst_firstChild];
     child = child$0;
    }
   }
   function has_child_nodes(x277){return x277.hasChildNodes() | 0;}
   function add_event_listener(x282, x278, x279, x281){
    x282.addEventListener
     (kind_to_js(x278),
      caml_js_wrap_callback_strict
       (1, function(x280){return caml_call1(x279, x280);}),
      ! ! x281);
    return 0;
   }
   function add_cancellable_event_listener(x286, x283, f, x285){
    var
     x284 =
       caml_js_wrap_callback_strict
        (1, function(x155){return caml_call1(f, x155);});
    x286.addEventListener(kind_to_js(x283), x284, ! ! x285);
    return function(param){
     x286.removeEventListener(kind_to_js(x283), x284, ! ! x285);
     return 0;};
   }
   function inner_text(x291){return caml_js_to_string(x291["innerText"]);}
   function get_elements_by_tag_name(x293, x292){
    var _aa_ = x293.getElementsByTagName(caml_js_from_string(x292));
    return caml_call2(Ojs[1], t_of_js$12, _aa_);
   }
   function get_elements_by_class_name(x296, x295){
    var _$_ = x296.getElementsByClassName(caml_js_from_string(x295));
    return caml_call2(Ojs[1], t_of_js$12, _$_);
   }
   function has_attribute(x299, x298){
    return x299.hasAttribute(caml_js_from_string(x298)) | 0;
   }
   function get_attribute(x301, x300){
    return caml_js_to_string(x301.getAttribute(caml_js_from_string(x300)));
   }
   function remove_attribute(x303, x302){
    x303.removeAttribute(caml_js_from_string(x302));
    return 0;
   }
   function set_attribute(x306, x304, x305){
    x306.setAttribute(caml_js_from_string(x304), caml_js_from_string(x305));
    return 0;
   }
   function get_bounding_client_rect(x307){
    var ___ = x307.getBoundingClientRect();
    return caml_call1(Rect[1], ___);
   }
   function get_bounding_box(x308){
    var _Z_ = x308.getBBox();
    return caml_call1(SVGRect[1], _Z_);
   }
   function attach_shadow(mode, element){
    var
     _Y_ = mode ? "closed" : cst_open,
     x252 = element.attachShadow({mode: _Y_});
    return x252;
   }
   function normalize(x316){x316.normalize(); return 0;}
   function value(x317){return caml_js_to_string(x317[cst_value]);}
   function set_value(x318, x319){
    return x318[cst_value] = caml_js_from_string(x319);
   }
   function select(x320){x320.select(); return 0;}
   function files$0(x321){
    var _X_ = x321[cst_files];
    return caml_call2(Ojs[3], t_of_js$5, _X_);
   }
   function submit(x323){x323.submit(); return 0;}
   function show_picker(x324){x324.showPicker(); return 0;}
   function selected_index(x325){return x325["selectedIndex"];}
   function checked(x326){return x326[cst_checked] | 0;}
   function set_checked(x327, x328){return x327[cst_checked] = ! ! x328;}
   function node_value(x329){return caml_js_to_string(x329[cst_nodeValue]);}
   function set_node_value(x330, x331){
    return x330[cst_nodeValue] = caml_js_from_string(x331);
   }
   function parent_node(x332){var x252 = x332["parentNode"]; return x252;}
   function node_name(x333){return caml_js_to_string(x333["nodeName"]);}
   function dispatch_event(x335, x334){return x335.dispatchEvent(x334) | 0;}
   function style(x336){
    var _W_ = x336["style"];
    return caml_call1(Style[1], _W_);
   }
   function inner_HTML(x337){return caml_js_to_string(x337[cst_innerHTML]);}
   function outer_HTML(x338){return caml_js_to_string(x338["outerHTML"]);}
   function set_inner_HTML(x339, x340){
    return x339[cst_innerHTML] = caml_js_from_string(x340);
   }
   function set_text_content(x341, x342){
    return x341["textContent"] = caml_js_from_string(x342);
   }
   function set_class_name(x343, x344){
    return x343[cst_className] = caml_js_from_string(x344);
   }
   function class_name(x345){return caml_js_to_string(x345[cst_className]);}
   function client_width(x346){return x346["clientWidth"];}
   function client_height(x347){return x347["clientHeight"];}
   function scroll_width(x348){return x348["scrollWidth"];}
   function scroll_height(x349){return x349["scrollHeight"];}
   function width$1(x350){return x350[cst_width];}
   function height$1(x351){return x351[cst_height];}
   function offset_parent(x352){
    var _V_ = x352["offsetParent"];
    return caml_call2(Ojs[7], t_of_js$12, _V_);
   }
   function offset_top(x354){return x354["offsetTop"];}
   function offset_left(x355){return x355["offsetLeft"];}
   function offset_width(x356){return x356["offsetWidth"];}
   function offset_height(x357){return x357["offsetHeight"];}
   function scroll_top(x358){return x358[cst_scrollTop];}
   function set_scroll_top(x359, x360){return x359[cst_scrollTop] = x360;}
   function scroll_into_view(x362, x361){
    x362.scrollIntoView(! ! x361);
    return 0;
   }
   function focus(x363){x363.focus(); return 0;}
   function blur(x364){x364.blur(); return 0;}
   function behavior_to_js(x369){
    switch(x369){
      case 0:
       return "auto";
      case 1:
       return "instant";
      default: return "smooth";
    }
   }
   function scroll_into_view_options(x373, x372){
    x373.scrollIntoView
     ({behavior: caml_call2(Ojs[8], behavior_to_js, x372[1])});
    return 0;
   }
   function scroll_by(x379, x378){
    var _U_ = caml_call2(Ojs[8], behavior_to_js, x378[3]);
    x379.scrollBy({top: x378[1], left: x378[2], behavior: _U_});
    return 0;
   }
   function selection_start(x380){return x380[cst_selectionStart];}
   function selection_end(x381){return x381[cst_selectionEnd];}
   function set_selection_start(x382, x383){return x382[cst_selectionStart] = x383;
   }
   function set_selection_end(x384, x385){return x384[cst_selectionEnd] = x385;
   }
   function remove$0(x386){x386.remove(); return 0;}
   function click(x387){x387.click(); return 0;}
   function query_selector(x389, x388){
    var x252 = x389.querySelector(caml_js_from_string(x388));
    return x252;
   }
   function query_selector_all(x391, x390){
    var _T_ = x391.querySelectorAll(caml_js_from_string(x390));
    return caml_call2(Ojs[3], t_of_js$12, _T_);
   }
   function class_list(x393){
    var _S_ = x393["classList"];
    return caml_call1(ClassList[1], _S_);
   }
   function t_of_js$13(x395){return x395;}
   function t_to_js$13(x394){return x394;}
   function create_element(x397, x396){
    var x252 = x397.createElement(caml_js_from_string(x396));
    return x252;
   }
   function create_element_ns(x400, x398, x399){
    var
     x252 =
       x400.createElementNS
        (caml_js_from_string(x398), caml_js_from_string(x399));
    return x252;
   }
   function create_text_node(x402, x401){
    var x252 = x402.createTextNode(caml_js_from_string(x401));
    return x252;
   }
   function create_event(x404, x403){
    var x155 = x404.createEvent(caml_js_from_string(x403));
    return x155;
   }
   function get_element_by_id(x406, x405){
    var _R_ = x406.getElementById(caml_js_from_string(x405));
    return caml_call2(Ojs[7], t_of_js$12, _R_);
   }
   function get_elements_by_class_name$0(x409, x408){
    var _Q_ = x409.getElementsByClassName(caml_js_from_string(x408));
    return caml_call2(Ojs[1], t_of_js$12, _Q_);
   }
   function body(x411){var x252 = x411["body"]; return x252;}
   function document_element(x412){
    var x252 = x412["documentElement"];
    return x252;
   }
   function active_element(x413){
    var x252 = x413["activeElement"];
    return x252;
   }
   function cookie(x414){return caml_js_to_string(x414[cst_cookie]);}
   function set_cookie(x415, x416){
    return x415[cst_cookie] = caml_js_from_string(x416);
   }
   function set_title(x417, x418){
    return x417["title"] = caml_js_from_string(x418);
   }
   function open(x424, x419, x420, param){
    var x421 = new Ojs[19][cst_Array];
    if(x419){var x423 = x419[1]; x421.push(caml_js_from_string(x423));}
    if(x420){var x422 = x420[1]; x421.push(caml_js_from_string(x422));}
    x424[cst_open].apply(x424, x421);
    return 0;
   }
   function write(x427, x426){
    x427.write(caml_js_from_string(x426));
    return 0;
   }
   function writeln(x429, x428){
    x429.writeln(caml_js_from_string(x428));
    return 0;
   }
   function close(x430){x430.close(); return 0;}
   function exec_command(x432, x431){
    return x432.execCommand(caml_js_from_string(x431)) | 0;
   }
   function query_selector$0(x434, x433){
    var x252 = x434.querySelector(caml_js_from_string(x433));
    return x252;
   }
   function query_selector_all$0(x436, x435){
    var _P_ = x436.querySelectorAll(caml_js_from_string(x435));
    return caml_call2(Ojs[3], t_of_js$12, _P_);
   }
   function remove_all_selection_ranges(x438){
    runtime.caml_js_meth_call(x438, "getSelection().removeAllRanges", [0]);
    return 0;
   }
   var
    Document =
      [0,
       t_of_js$13,
       t_to_js$13,
       create_element,
       create_element_ns,
       create_text_node,
       create_event,
       get_element_by_id,
       get_elements_by_class_name$0,
       body,
       document_element,
       active_element,
       cookie,
       set_cookie,
       set_title,
       open,
       write,
       writeln,
       close,
       exec_command,
       query_selector$0,
       query_selector_all$0,
       remove_all_selection_ranges];
   function t_of_js$14(x440){return x440;}
   function t_to_js$14(x439){return x439;}
   function length$1(x441){return x441[cst_length];}
   function back(x442){x442.back(); return 0;}
   function forward(x443){x443.forward(); return 0;}
   function go(x447, x444){
    if(349440947 <= x444[1])
     var x445 = x444[2], x445$0 = x445;
    else
     var x446 = x444[2], x445$0 = caml_js_from_string(x446);
    x447.go(x445$0);
    return 0;
   }
   function replace_state(x451, x448, x449, x450){
    x451.replaceState
     (x448, caml_js_from_string(x449), caml_js_from_string(x450));
    return 0;
   }
   function push_state(x455, x452, x453, x454){
    x455.pushState(x452, caml_js_from_string(x453), caml_js_from_string(x454));
    return 0;
   }
   var
    History =
      [0,
       t_of_js$14,
       t_to_js$14,
       length$1,
       back,
       forward,
       go,
       replace_state,
       push_state];
   function t_of_js$15(x457){return x457;}
   function t_to_js$15(x456){return x456;}
   function get_hash(param){
    return caml_js_to_string(Ojs[19][cst_location][cst_hash]);
   }
   function set_hash(x458){
    var _O_ = caml_js_from_string(x458);
    return Ojs[19][cst_location][cst_hash] = _O_;
   }
   function host(x459){return caml_js_to_string(x459[cst_host]);}
   function set_host(x460, x461){
    return x460[cst_host] = caml_js_from_string(x461);
   }
   function hostname(x462){return caml_js_to_string(x462[cst_hostname]);}
   function set_hostname(x463, x464){
    return x463[cst_hostname] = caml_js_from_string(x464);
   }
   function href(param){
    return caml_js_to_string(Ojs[19][cst_location][cst_href]);
   }
   function set_href(x465){
    var _N_ = caml_js_from_string(x465);
    return Ojs[19][cst_location][cst_href] = _N_;
   }
   function pathname(x466){return caml_js_to_string(x466[cst_pathname]);}
   function set_pathname(x467, x468){
    return x467[cst_pathname] = caml_js_from_string(x468);
   }
   function port(x469){return caml_js_to_string(x469[cst_port]);}
   function set_port(x470, x471){
    return x470[cst_port] = caml_js_from_string(x471);
   }
   function protocol(x472){return caml_js_to_string(x472[cst_protocol]);}
   function set_protocol(x473, x474){
    return x473[cst_protocol] = caml_js_from_string(x474);
   }
   function search$0(x475){return caml_js_to_string(x475[cst_search]);}
   function set_search(x476, x477){
    return x476[cst_search] = caml_js_from_string(x477);
   }
   function origin$0(x478){return caml_js_to_string(x478[cst_origin]);}
   function assign(x480, x479){
    x480.assign(caml_js_from_string(x479));
    return 0;
   }
   function reload(x484, x481, param){
    var x482 = new Ojs[19][cst_Array];
    if(x481){var x483 = x481[1]; x482.push(! ! x483);}
    x484["reload"].apply(x484, x482);
    return 0;
   }
   function replace$0(x487, x486){
    x487.replace(caml_js_from_string(x486));
    return 0;
   }
   var
    Location =
      [0,
       t_of_js$15,
       t_to_js$15,
       get_hash,
       set_hash,
       host,
       set_host,
       hostname,
       set_hostname,
       href,
       set_href,
       pathname,
       set_pathname,
       port,
       set_port,
       protocol,
       set_protocol,
       search$0,
       set_search,
       origin$0,
       assign,
       reload,
       replace$0];
   function t_of_js$16(x489){return x489;}
   function t_to_js$16(x488){return x488;}
   function add_event_listener$0(x498, x494, x495, x497){
    x498.addEventListener
     (kind_to_js(x494),
      caml_js_wrap_callback_strict
       (1, function(x496){return caml_call1(x495, x496);}),
      ! ! x497);
    return 0;
   }
   function add_cancellable_event_listener$0(x502, x499, f, x501){
    var
     x500 =
       caml_js_wrap_callback_strict
        (1, function(x155){return caml_call1(f, x155);});
    x502.addEventListener(kind_to_js(x499), x500, ! ! x501);
    return function(param){
     x502.removeEventListener(kind_to_js(x499), x500, ! ! x501);
     return 0;};
   }
   function document(x507){
    var _M_ = x507[cst_document];
    return caml_call1(Document[1], _M_);
   }
   function set_onload(x508, x509){
    return x508[cst_onload] =
            caml_js_wrap_callback_strict
             (1, function(param){return caml_call1(x509, 0);});
   }
   function set_interval(x512, x510, x511){
    var
     x493 =
       x512.setInterval
        (caml_js_wrap_callback_strict
          (1, function(param){return caml_call1(x510, 0);}),
         x511);
    return x493;
   }
   function set_timeout(x515, x513, x514){
    var
     x491 =
       x515.setTimeout
        (caml_js_wrap_callback_strict
          (1, function(param){return caml_call1(x513, 0);}),
         x514);
    return x491;
   }
   function clear_timeout(x517, x516){x517.clearTimeout(x516); return 0;}
   function clear_interval(x519, x518){x519.clearInterval(x518); return 0;}
   function request_animation_frame(x522, x520){
    x522.requestAnimationFrame
     (caml_js_wrap_callback_strict
       (1, function(x521){return caml_call1(x520, x521);}));
    return 0;
   }
   function open$0(x532, x523, x524, x525, x526, param){
    var x527 = new Ojs[19][cst_Array];
    if(x523){var x531 = x523[1]; x527.push(caml_js_from_string(x531));}
    if(x524){var x530 = x524[1]; x527.push(caml_js_from_string(x530));}
    if(x525){var x529 = x525[1]; x527.push(caml_js_from_string(x529));}
    if(x526){var x528 = x526[1]; x527.push(! ! x528);}
    var x489 = x532[cst_open].apply(x532, x527);
    return x489;
   }
   function alert(x535, x534){
    x535.alert(caml_js_from_string(x534));
    return 0;
   }
   function session_storage(x536){
    var _L_ = x536["sessionStorage"];
    return caml_call2(Ojs[7], Storage[1], _L_);
   }
   function local_storage(x538){
    var _K_ = x538["localStorage"];
    return caml_call2(Ojs[7], Storage[1], _K_);
   }
   function inner_width(x540){return x540["innerWidth"];}
   function inner_height(x541){return x541["innerHeight"];}
   function page_x_offset(x542){return x542["pageXOffset"];}
   function page_y_offset(x543){return x543["pageYOffset"];}
   function scroll_by$0(x546, x544, x545){x546.scrollBy(x544, x545); return 0;
   }
   function scroll_to(x549, x547, x548){x549.scrollTo(x547, x548); return 0;}
   function scroll_to_options(x555, x554){
    var _J_ = caml_call2(Ojs[8], behavior_to_js, x554[3]);
    x555.scrollTo({top: x554[1], left: x554[2], behavior: _J_});
    return 0;
   }
   function history(x556){
    var _I_ = x556["history"];
    return caml_call1(History[1], _I_);
   }
   function location(x557){
    var _H_ = x557[cst_location];
    return caml_call1(Location[1], _H_);
   }
   function frame_element(x558){var x252 = x558["frameElement"]; return x252;}
   function get_computed_style(x560, x559){
    var _G_ = x560.getComputedStyle(x559);
    return caml_call1(Style[1], _G_);
   }
   function decode_URI_component(x562, x561){
    return caml_js_to_string
            (x562.decodeURIComponent(caml_js_from_string(x561)));
   }
   function event_source(x563){var x489 = x563["source"]; return x489;}
   function post_message(x566, x564, x565){
    x566.postMessage(x564, caml_js_from_string(x565));
    return 0;
   }
   function content_window(x567){
    var _F_ = x567["contentWindow"];
    return caml_call2(Ojs[7], t_of_js$16, _F_);
   }
   function content_document(x569){
    var _E_ = x569["contentDocument"];
    return caml_call2(Ojs[7], Document[1], _E_);
   }
   var IFrame = [0, content_window, content_document];
   function parse$0(x571){
    var _D_ = caml_js_from_string(x571);
    return Ojs[19][cst_JSON].parse(_D_);
   }
   function stringify(x572){
    return caml_js_to_string(Ojs[19][cst_JSON].stringify(x572));
   }
   var
    JSON = [0, parse$0, stringify],
    _b_ = [0, cst_lib_js_browser_ml, 2161, 15],
    _c_ = [0, cst_lib_js_browser_ml, 2326, 15];
   function t_of_js$17(x577){return x577;}
   function t_to_js$17(x576){return x576;}
   function create$2(param){
    var x577 = new Ojs[19]["FileReader"];
    return x577;
   }
   function ready_state(x578){
    var x574 = x578[cst_readyState];
    if(2 < x574 >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    switch(x574){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function result(x579){return caml_js_to_string(x579[cst_result]);}
   function set_onload$0(x580, x581){
    return x580[cst_onload] =
            caml_js_wrap_callback_strict
             (1, function(param){return caml_call1(x581, 0);});
   }
   function read_as_binary_string(x583, x582){x583.readAsBinaryString(x582); return 0;
   }
   function read_as_text(x585, x584){x585.readAsText(x584); return 0;}
   function read_as_data_url(x587, x586){x587.readAsDataURL(x586); return 0;}
   function t_of_js$18(x589){return x589;}
   function t_to_js$18(x588){return x588;}
   function create$3(param){
    var x589 = new Ojs[19]["XMLHttpRequest"];
    return x589;
   }
   function open$1(x592, x590, x591){
    x592.open(caml_js_from_string(x590), caml_js_from_string(x591));
    return 0;
   }
   function send(x594, x593){x594.send(x593); return 0;}
   function set_request_header(x597, x595, x596){
    x597.setRequestHeader
     (caml_js_from_string(x595), caml_js_from_string(x596));
    return 0;
   }
   function get_response_header(x599, x598){
    var _C_ = x599.getResponseHeader(caml_js_from_string(x598));
    return caml_call2(Ojs[7], caml_js_to_string, _C_);
   }
   function get_all_response_headers(x601){
    return caml_js_to_string(x601.getAllResponseHeaders());
   }
   function set_response_type(x602, x603){
    return x602[cst_responseType] = caml_js_from_string(x603);
   }
   function override_mime_type(x605, x604){
    x605.overrideMimeType(caml_js_from_string(x604));
    return 0;
   }
   function set_with_credentials(x606, x607){
    return x606["withCredentials"] = ! ! x607;
   }
   function status(x613){return x613["status"];}
   function status_text(x614){return caml_js_to_string(x614["statusText"]);}
   function ready_state$0(x615){
    var x610 = x615[cst_readyState];
    if(4 < x610 >>> 0) return [0, x610];
    switch(x610){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      case 3:
       return 3;
      default: return 4;
    }
   }
   function response_type(x616){
    return caml_js_to_string(x616[cst_responseType]);
   }
   function response_text(x617){
    return caml_js_to_string(x617["responseText"]);
   }
   function response(x618){return x618[cst_response];}
   function response_URL(x619){return caml_js_to_string(x619["responseURL"]);}
   function set_onreadystatechange(x620, x621){
    return x620["onreadystatechange"] =
            caml_js_wrap_callback_strict
             (1, function(param){return caml_call1(x621, 0);});
   }
   function t_of_js$19(x623){return x623;}
   function t_to_js$19(x622){return x622;}
   function create$4(x627, x628, param){
    var x629 = new Ojs[19][cst_Array];
    x629.push(caml_js_from_string(x627));
    if(x628){
     var x630 = x628[1];
     x629.push(caml_call2(Ojs[4], caml_js_from_string, x630));
    }
    var x623 = caml_ojs_new_arr(Ojs[19]["WebSocket"], x629);
    return x623;
   }
   function send$0(x633, x632){
    x633.send(caml_js_from_string(x632));
    return 0;
   }
   function close$0(x639, x634, x635, param){
    var x636 = new Ojs[19][cst_Array];
    if(x634){var x638 = x634[1]; x636.push(x638);}
    if(x635){var x637 = x635[1]; x636.push(caml_js_from_string(x637));}
    x639[cst_close].apply(x639, x636);
    return 0;
   }
   function binary_type(x641){return caml_js_to_string(x641[cst_binaryType]);}
   function set_binary_type(x642, x643){
    return x642[cst_binaryType] = caml_js_from_string(x643);
   }
   function ready_state$1(x644){
    var x625 = x644[cst_readyState];
    if(3 < x625 >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    switch(x625){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      default: return 3;
    }
   }
   function add_event_listener$1(x649, x645, x646, x648){
    x649.addEventListener
     (kind_to_js(x645),
      caml_js_wrap_callback_strict
       (1, function(x647){return caml_call1(x646, x647);}),
      ! ! x648);
    return 0;
   }
   function code$0(x652){return x652[cst_code];}
   var
    window = Ojs[19][cst_window],
    _d_ = Ojs[19][cst_document],
    document$0 = caml_call1(Document[1], _d_);
   function context_of_js(x654){return x654;}
   function context_to_js(x653){return x653;}
   function gradient_of_js(x656){return x656;}
   function gradient_to_js(x655){return x655;}
   function get_context(opt, canvas){
    if(opt) var sth = opt[1], alpha = sth; else var alpha = 1;
    var _B_ = canvas.getContext("2d", {alpha: ! ! alpha});
    return caml_call2(Ojs[7], context_of_js, _B_);
   }
   function to_data_URL(x665){return caml_js_to_string(x665.toDataURL());}
   function set_fill_style(x666, x667){
    if(66123280 <= x667[1])
     var x669 = x667[2], _A_ = x669;
    else
     var x668 = x667[2], _A_ = caml_js_from_string(x668);
    return x666["fillStyle"] = _A_;
   }
   function set_stroke_style(x670, x671){
    if(66123280 <= x671[1])
     var x673 = x671[2], _z_ = x673;
    else
     var x672 = x671[2], _z_ = caml_js_from_string(x672);
    return x670["strokeStyle"] = _z_;
   }
   function set_line_width(x674, x675){return x674["lineWidth"] = x675;}
   function create_linear_gradient(x680, x676, x677, x678, x679){
    var x656 = x680.createLinearGradient(x676, x677, x678, x679);
    return x656;
   }
   function add_color_stop(x683, x681, x682){
    x683.addColorStop(x681, caml_js_from_string(x682));
    return 0;
   }
   function begin_path(x684){x684.beginPath(); return 0;}
   function close_path(x685){x685.closePath(); return 0;}
   function arc(x691, x686, x687, x688, x689, x690){
    x691.arc(x686, x687, x688, x689, x690);
    return 0;
   }
   function move_to(x694, x692, x693){x694.moveTo(x692, x693); return 0;}
   function line_to(x697, x695, x696){x697.lineTo(x695, x696); return 0;}
   function fill(x698){x698.fill(); return 0;}
   function stroke(x699){x699.stroke(); return 0;}
   function stroke_rect(x704, x700, x701, x702, x703){
    x704.strokeRect(x700, x701, x702, x703);
    return 0;
   }
   function fill_rect(x709, x705, x706, x707, x708){
    x709.fillRect(x705, x706, x707, x708);
    return 0;
   }
   function set_font(x710, x711){
    return x710["font"] = caml_js_from_string(x711);
   }
   function fill_text(x715, x712, x713, x714){
    x715.fillText(caml_js_from_string(x712), x713, x714);
    return 0;
   }
   function stroke_text(x719, x716, x717, x718){
    x719.strokeText(caml_js_from_string(x716), x717, x718);
    return 0;
   }
   function t_of_js$20(x721){return x721;}
   function t_to_js$20(x720){return x720;}
   function width$2(x722){return x722[cst_width];}
   var TextMetrics = [0, t_of_js$20, t_to_js$20, width$2];
   function measure_text(x724, x723){
    var _y_ = x724.measureText(caml_js_from_string(x723));
    return caml_call1(TextMetrics[1], _y_);
   }
   function rotate(x726, x725){x726.rotate(x725); return 0;}
   function translate(x729, x727, x728){x729.translate(x727, x728); return 0;}
   function scale(x732, x730, x731){x732.scale(x730, x731); return 0;}
   function clear_rect(x737, x733, x734, x735, x736){
    x737.clearRect(x733, x734, x735, x736);
    return 0;
   }
   function now$0(param){return Ojs[19]["performance"].now();}
   var Performance = [0, now$0];
   function log(x741, x740){x741.log(x740); return 0;}
   function time(x743, x742){x743.time(caml_js_from_string(x742)); return 0;}
   function time_end(x745, x744){
    x745.timeEnd(caml_js_from_string(x744));
    return 0;
   }
   var console = Ojs[19]["console"];
   function t_of_js$21(x747){return caml_call1(ArrayBuffer[1], x747);}
   function t_to_js$21(x746){return caml_call1(ArrayBuffer[2], x746);}
   function from_buffer(x748){
    var _x_ = caml_call1(ArrayBuffer[2], x748);
    return t_of_js$21(new Ojs[19][cst_Uint8Array](_x_));
   }
   function create$5(x749){
    return t_of_js$21(new Ojs[19][cst_Uint8Array](x749));
   }
   function set$0(x753, x750, x752){
    var _v_ = caml_call2(Ojs[2], function(_w_){return _w_;}, x750);
    t_to_js$21(x753).set(_v_, x752);
    return 0;
   }
   function length$2(x754){return t_to_js$21(x754)[cst_length];}
   function random(x755){
    var _u_ = t_to_js$21(x755);
    Ojs[19][cst_window]["crypto"].getRandomValues(_u_);
    return 0;
   }
   function to_array(x756){
    var _s_ = t_to_js$21(x756);
    return caml_call2(Ojs[1], function(_t_){return _t_;}, _s_);
   }
   function get$0(a, i){
    var _r_ = t_to_js$21(a);
    return caml_call2(Ojs[17], _r_, i);
   }
   function from(x758, x759){
    return t_of_js$21
            (Ojs[19][cst_Uint8Array].from
              (x758,
               caml_js_wrap_callback_strict
                (1, function(x760){return caml_call1(x759, x760);})));
   }
   var
    Uint8Array =
      [0,
       t_of_js$21,
       t_to_js$21,
       from_buffer,
       create$5,
       set$0,
       length$2,
       random,
       to_array,
       get$0,
       from];
   function of_blob(x761){
    return caml_js_to_string(Ojs[19][cst_URL].createObjectURL(x761));
   }
   function of_file(x762){
    return caml_js_to_string(Ojs[19][cst_URL].createObjectURL(x762));
   }
   function revoke(x763){
    var _q_ = caml_js_from_string(x763);
    Ojs[19][cst_URL].revokeObjectURL(_q_);
    return 0;
   }
   var ObjectURL = [0, of_blob, of_file, revoke];
   function t_of_js$22(x765){return x765;}
   function t_to_js$22(x764){return x764;}
   function unit_type(x766){return x766["unitType"];}
   function value$0(x767){return x767[cst_value];}
   function value_as_string(x768){
    return caml_js_to_string(x768["valueAsString"]);
   }
   function value_in_specified_units(x769){return x769["valueInSpecifiedUnits"];
   }
   var
    Length =
      [0,
       t_of_js$22,
       t_to_js$22,
       unit_type,
       value$0,
       value_as_string,
       value_in_specified_units];
   function t_of_js$23(x771){return x771;}
   function t_to_js$23(x770){return x770;}
   function anim_val(x772){
    var _p_ = x772["animVal"];
    return caml_call1(Length[1], _p_);
   }
   function base_val(x773){
    var _o_ = x773["baseVal"];
    return caml_call1(Length[1], _o_);
   }
   var
    AnimatedLength = [0, t_of_js$23, t_to_js$23, anim_val, base_val],
    Svg = [0, Length, AnimatedLength];
   function encode(x774){
    var _n_ = caml_call1(JsString[2], x774);
    return caml_js_to_string(Ojs[19][cst_window].btoa(_n_));
   }
   function decode(x775){
    var _l_ = caml_js_from_string(x775), _m_ = Ojs[19][cst_window].atob(_l_);
    return caml_call1(JsString[1], _m_);
   }
   var Base64 = [0, encode, decode];
   function t_of_js$24(x777){return x777;}
   function t_to_js$24(x776){return x776;}
   function blob(x778){
    var x = x778.blob();
    function f(x779){return x779;}
    return [0, f, x];
   }
   var FetchResponse = [0, t_of_js$24, t_to_js$24, blob];
   function fetch(x780){
    var x = Ojs[19].fetch(caml_js_from_string(x780)), f = FetchResponse[1];
    return [0, f, x];
   }
   function t_of_js$25(x783){return x783;}
   function t_to_js$25(x782){return x782;}
   function create$6(x784, param){
    var x785 = new Ojs[19][cst_Array];
    if(x784){var x786 = x784[1]; x785.push(caml_js_from_string(x786));}
    var x783 = caml_ojs_new_arr(Ojs[19]["TextDecoder"], x785);
    return x783;
   }
   function decode$0(x788, x787){
    return caml_js_to_string(x788.decode(caml_call1(ArrayBuffer[2], x787)));
   }
   var TextDecoder = [0, t_of_js$25, t_to_js$25, create$6, decode$0];
   function t_of_js$26(x790){return x790;}
   function t_to_js$26(x789){return x789;}
   function client_data_json(x791){
    var _k_ = x791[cst_clientDataJSON];
    return caml_call1(ArrayBuffer[1], _k_);
   }
   function attestation_object(x792){
    var _j_ = x792["attestationObject"];
    return caml_call1(ArrayBuffer[1], _j_);
   }
   var
    AuthenticatorAttestationRespon =
      [0, t_of_js$26, t_to_js$26, client_data_json, attestation_object];
   function t_of_js$27(x794){return x794;}
   function t_to_js$27(x793){return x793;}
   function client_data_json$0(x795){
    var _i_ = x795[cst_clientDataJSON];
    return caml_call1(ArrayBuffer[1], _i_);
   }
   function authenticator_data(x796){
    var _h_ = x796["authenticatorData"];
    return caml_call1(ArrayBuffer[1], _h_);
   }
   function signature(x797){
    var _g_ = x797["signature"];
    return caml_call1(ArrayBuffer[1], _g_);
   }
   function user_handle(x798){
    var _f_ = x798["userHandle"];
    return caml_call1(ArrayBuffer[1], _f_);
   }
   var
    AuthenticatorAssertionResponse =
      [0,
       t_of_js$27,
       t_to_js$27,
       client_data_json$0,
       authenticator_data,
       signature,
       user_handle];
   function t_of_js$28(x800){return x800;}
   function t_to_js$28(x799){return x799;}
   function type$1(x801){return caml_js_to_string(x801[cst_type]);}
   function id$0(x802){return caml_js_to_string(x802[cst_id]);}
   function raw_id(x803){
    var _e_ = x803["rawId"];
    return caml_call1(ArrayBuffer[1], _e_);
   }
   function response$0(x804){return x804[cst_response];}
   var
    PublicKeyCredential =
      [0, t_of_js$28, t_to_js$28, type$1, id$0, raw_id, response$0];
   function t_of_js$29(x806){return x806;}
   function t_to_js$29(x805){return x805;}
   function rp_options(x809, x810, param){
    var x811 = caml_call1(Ojs[11], 0);
    if(x809){var x813 = x809[1]; x811[cst_id] = caml_js_from_string(x813);}
    if(x810){var x812 = x810[1]; x811[cst_name] = caml_js_from_string(x812);}
    return x811;
   }
   function user_options(x816, x817, x818, param){
    var x819 = caml_call1(Ojs[11], 0);
    if(x816){
     var x822 = x816[1];
     x819[cst_id] = caml_call1(ArrayBuffer[2], x822);
    }
    if(x817){var x821 = x817[1]; x819[cst_name] = caml_js_from_string(x821);}
    if(x818){
     var x820 = x818[1];
     x819["displayName"] = caml_js_from_string(x820);
    }
    return x819;
   }
   function key_param_to_js(x823){return x823;}
   function key_param(x825, x826, param){
    var x827 = caml_call1(Ojs[11], 0);
    if(x825){var x829 = x825[1]; x827[cst_type] = caml_js_from_string(x829);}
    if(x826){var x828 = x826[1]; x827["alg"] = x828;}
    return x827;
   }
   function authenticator_options(x832, x833, x834, x835, param){
    var x836 = caml_call1(Ojs[11], 0);
    if(x832){
     var x840 = x832[1];
     x836["authenticatorAttachment"] = caml_js_from_string(x840);
    }
    if(x833){
     var x839 = x833[1];
     x836["residentKey"] = caml_js_from_string(x839);
    }
    if(x834){var x838 = x834[1]; x836["requireResidentKey"] = ! ! x838;}
    if(x835){
     var x837 = x835[1];
     x836[cst_userVerification] = caml_js_from_string(x837);
    }
    return x836;
   }
   function public_key_options
   (x843, x844, x845, x846, x847, x848, x849, x850, param){
    var x851 = caml_call1(Ojs[11], 0);
    if(x843){var x861 = x843[1]; x851["rp"] = x861;}
    if(x844){var x860 = x844[1]; x851["user"] = x860;}
    if(x845){
     var x859 = x845[1];
     x851[cst_challenge] = caml_call1(ArrayBuffer[2], x859);
    }
    if(x846){
     var x857 = x846[1];
     x851["pubKeyCredParams"] = caml_call2(Ojs[4], key_param_to_js, x857);
    }
    if(x847){var x856 = x847[1]; x851[cst_timeout] = x856;}
    if(x848){
     var x854 = x848[1];
     x851["excludeCredentials"] =
      caml_call2(Ojs[4], function(x855){return x855;}, x854);
    }
    if(x849){var x853 = x849[1]; x851["authenticatorSelection"] = x853;}
    if(x850){
     var x852 = x850[1];
     x851["attestation"] = caml_js_from_string(x852);
    }
    return x851;
   }
   function create_options(x864, param){
    var x865 = caml_call1(Ojs[11], 0);
    if(x864){var x866 = x864[1]; x865[cst_publicKey] = x866;}
    return x865;
   }
   function create$7(x867){
    var x = Ojs[19][cst_navigator][cst_credentials].create(x867);
    function f(x868){return x868;}
    return [0, f, x];
   }
   function credential_descriptor_to_js(x869){return x869;}
   function credential_descriptor(x871, x872, x873, param){
    var x874 = caml_call1(Ojs[11], 0);
    if(x871){var x877 = x871[1]; x874[cst_type] = caml_js_from_string(x877);}
    if(x872){
     var x876 = x872[1];
     x874[cst_id] = caml_call1(ArrayBuffer[2], x876);
    }
    if(x873){var x875 = x873[1]; x874["transports"] = x875;}
    return x874;
   }
   function get_public_key_options(x880, x881, x882, x883, x884, x885, param){
    var x886 = caml_call1(Ojs[11], 0);
    if(x880){
     var x893 = x880[1];
     x886[cst_challenge] = caml_call1(ArrayBuffer[2], x893);
    }
    if(x881){var x892 = x881[1]; x886[cst_timeout] = x892;}
    if(x882){var x891 = x882[1]; x886["rpId"] = caml_js_from_string(x891);}
    if(x883){
     var x889 = x883[1];
     x886["allowCredentials"] =
      caml_call2(Ojs[4], credential_descriptor_to_js, x889);
    }
    if(x884){
     var x888 = x884[1];
     x886[cst_userVerification] = caml_js_from_string(x888);
    }
    if(x885){var x887 = x885[1]; x886["extensions"] = x887;}
    return x886;
   }
   function get_options_to_js(x894){return x894;}
   function get_options(x896, param){
    var x897 = caml_call1(Ojs[11], 0);
    if(x896){var x898 = x896[1]; x897[cst_publicKey] = x898;}
    return x897;
   }
   function get$1(x899){
    var x = Ojs[19][cst_navigator][cst_credentials].get(x899);
    function f(x900){return x900;}
    return [0, f, x];
   }
   var
    Js_browser =
      [0,
       [0, then],
       Storage,
       RegExp,
       JsString,
       Date,
       ArrayBuffer,
       [0, options, t_of_js$4, t_to_js$4, create$0, size, type, text],
       [0, t_of_js$5, t_to_js$5, options$0, create$1, name],
       DataTransfer,
       [0,
        t_of_js$7,
        t_to_js$7,
        target,
        related_target,
        prevent_default,
        stop_propagation,
        type$0,
        init_event,
        client_x,
        client_y,
        page_x,
        page_y,
        screen_x,
        screen_y,
        movement_x,
        movement_y,
        buttons,
        alt_key,
        ctrl_key,
        shift_key,
        which,
        code,
        key$0,
        delta_y,
        delta_x,
        data_transfer,
        clipboard_data,
        data,
        origin,
        state],
       Rect,
       SVGRect,
       Style,
       ClassList,
       [0,
        t_of_js$12,
        t_to_js$12,
        null$0,
        id,
        set_id,
        node_type,
        clone_node,
        contains$0,
        append_child,
        insert_before,
        replace_child,
        remove_child,
        first_child,
        last_child,
        next_sibling,
        remove_all_children,
        has_child_nodes,
        add_event_listener,
        add_cancellable_event_listener,
        inner_text,
        get_elements_by_tag_name,
        get_elements_by_class_name,
        has_attribute,
        get_attribute,
        remove_attribute,
        set_attribute,
        get_bounding_client_rect,
        get_bounding_box,
        attach_shadow,
        normalize,
        value,
        set_value,
        select,
        files$0,
        submit,
        show_picker,
        selected_index,
        checked,
        set_checked,
        node_value,
        set_node_value,
        parent_node,
        node_name,
        dispatch_event,
        style,
        inner_HTML,
        outer_HTML,
        set_inner_HTML,
        set_text_content,
        set_class_name,
        class_name,
        client_width,
        client_height,
        scroll_width,
        scroll_height,
        width$1,
        height$1,
        offset_parent,
        offset_top,
        offset_left,
        offset_width,
        offset_height,
        scroll_top,
        set_scroll_top,
        scroll_into_view,
        focus,
        blur,
        scroll_into_view_options,
        scroll_by,
        selection_start,
        selection_end,
        set_selection_start,
        set_selection_end,
        remove$0,
        click,
        query_selector,
        query_selector_all,
        class_list],
       Document,
       History,
       Location,
       [0,
        t_of_js$16,
        t_to_js$16,
        add_event_listener$0,
        add_cancellable_event_listener$0,
        document,
        set_onload,
        set_interval,
        set_timeout,
        clear_timeout,
        clear_interval,
        request_animation_frame,
        open$0,
        alert,
        session_storage,
        local_storage,
        inner_width,
        inner_height,
        page_x_offset,
        page_y_offset,
        scroll_by$0,
        scroll_to,
        scroll_to_options,
        history,
        location,
        frame_element,
        get_computed_style,
        decode_URI_component,
        event_source,
        post_message],
       IFrame,
       JSON,
       [0,
        t_of_js$17,
        t_to_js$17,
        create$2,
        ready_state,
        result,
        set_onload$0,
        read_as_binary_string,
        read_as_text,
        read_as_data_url],
       [0,
        t_of_js$18,
        t_to_js$18,
        create$3,
        open$1,
        send,
        set_request_header,
        get_response_header,
        get_all_response_headers,
        set_response_type,
        override_mime_type,
        set_with_credentials,
        status,
        status_text,
        ready_state$0,
        response_type,
        response_text,
        response,
        response_URL,
        set_onreadystatechange],
       [0,
        t_of_js$19,
        t_to_js$19,
        create$4,
        send$0,
        close$0,
        binary_type,
        set_binary_type,
        ready_state$1,
        add_event_listener$1,
        [0, code$0]],
       window,
       document$0,
       [0,
        context_of_js,
        context_to_js,
        gradient_of_js,
        gradient_to_js,
        get_context,
        to_data_URL,
        set_fill_style,
        set_stroke_style,
        set_line_width,
        create_linear_gradient,
        add_color_stop,
        begin_path,
        close_path,
        arc,
        move_to,
        line_to,
        fill,
        stroke,
        stroke_rect,
        fill_rect,
        set_font,
        fill_text,
        stroke_text,
        TextMetrics,
        measure_text,
        rotate,
        translate,
        scale,
        clear_rect],
       Performance,
       [0, log, time, time_end],
       console,
       Uint8Array,
       ObjectURL,
       Svg,
       Base64,
       FetchResponse,
       fetch,
       TextDecoder,
       [0,
        AuthenticatorAttestationRespon,
        AuthenticatorAssertionResponse,
        PublicKeyCredential,
        [0,
         t_of_js$29,
         t_to_js$29,
         rp_options,
         user_options,
         key_param,
         authenticator_options,
         public_key_options,
         create_options,
         create$7,
         credential_descriptor,
         get_public_key_options,
         get_options,
         get_options_to_js,
         get$1]]];
   runtime.caml_register_global(853, Js_browser, "Js_browser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_blit
//# unitInfo: Requires: Assert_failure, CamlinternalLazy, Js_browser, Ojs, Ojs_exn, Stdlib, Stdlib__Array, Stdlib__Hashtbl, Stdlib__List, Stdlib__Obj, Stdlib__Option, Stdlib__Printexc, Stdlib__Printf, Stdlib__Result, Stdlib__String, Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst_baseVal = "baseVal",
    cst_blur = "blur",
    cst_boolean$0 = "boolean",
    cst_change$1 = "change",
    cst_checked$0 = "checked",
    cst_className = "className",
    cst_http_www_w3_org_2000_svg = "http://www.w3.org/2000/svg",
    cst_input$0 = "input",
    cst_lib_vdom_blit_ml = "lib/vdom_blit.ml",
    cst_number = "number",
    cst_string$0 = "string",
    cst_style = "style",
    cst_target$3 = "target",
    cst_value$1 = "value",
    caml_check_bound = runtime.caml_check_bound,
    caml_js_from_string = runtime.caml_js_from_string,
    caml_js_to_string = runtime.caml_js_to_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_lessthan = runtime.caml_string_lessthan,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$3,
    cst$2 = cst$3,
    cst$0 = "]: ",
    cst = ".",
    blur_event = [1, cst_blur, [5, 0]],
    empty = [0, 0, 0],
    Js_browser = global_data.Js_browser,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Ojs$0 = global_data.Ojs,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Vdom = global_data.Vdom,
    Stdlib_Result = global_data.Stdlib__Result,
    Ojs_exn = global_data.Ojs_exn,
    Ojs = [248, "Vdom_blit.Ojs", runtime.caml_fresh_oo_id(0)],
    cst_list = "list",
    cst_string = cst_string$0,
    cst_boolean = cst_boolean$0,
    cst_int = "int",
    cst_float = "float",
    _a_ = [0, [11, "unbound field: ", [3, 0, 0]], "unbound field: %S"],
    _b_ =
      [0,
       [11, "unbound method (or wrong number of arguments): ", [3, 0, 0]],
       "unbound method (or wrong number of arguments): %S"],
    _c_ =
      [0,
       [11, "cannot convert ", [2, 0, [11, " to ", [2, 0, 0]]]],
       "cannot convert %s to %s"],
    cst_At_path = "At path [",
    _d_ = [0, 0],
    cst_Encoded_function_received_ =
      "Encoded function received an argument with unsupported type: ",
    _e_ =
      [0,
       [11, "No command handler found! (", [2, 0, [12, 41, 0]]],
       "No command handler found! (%s)"],
    cst_value = cst_value$1,
    cst_target = cst_target$3,
    cst_input = cst_input$0,
    cst_checked = cst_checked$0,
    cst_target$0 = cst_target$3,
    cst_click = "click",
    cst_value$0 = cst_value$1,
    cst_target$1 = cst_target$3,
    cst_change = cst_change$1,
    cst_selectedIndex = "selectedIndex",
    cst_target$2 = cst_target$3,
    cst_change$0 = cst_change$1,
    _f_ = [0, [11, "scroll: ", [2, 0, [12, 10, [10, 0]]]], "scroll: %s\n%!"];
   function string_of_step(param){
    if(0 === param[0]){var n = param[1]; return caml_call1(Stdlib[33], n);}
    var s = param[1];
    return s;
   }
   function string_of_error_kind(param){
    switch(param[0]){
      case 0:
       var s = param[1]; return caml_call2(Stdlib_Printf[4], _a_, s);
      case 1:
       var s$0 = param[1]; return caml_call2(Stdlib_Printf[4], _b_, s$0);
      case 2:
       var s$1 = param[1]; return s$1;
      default:
       var got = param[2], expected = param[1];
       switch(expected){
         case 0:
          var _bx_ = cst_list; break;
         case 1:
          var _bx_ = cst_string; break;
         case 2:
          var _bx_ = cst_boolean; break;
         case 3:
          var _bx_ = cst_int; break;
         default: var _bx_ = cst_float;
       }
       return caml_call3(Stdlib_Printf[4], _c_, got, _bx_);
    }
   }
   function string_of_error(param){
    var path = param[1];
    if(path){
     var
      errk = param[2],
      _bu_ = string_of_error_kind(errk),
      _bv_ = caml_call2(Stdlib[28], cst$0, _bu_),
      _bs_ = caml_call2(Stdlib_List[21], string_of_step, path),
      _bt_ = caml_call2(Stdlib_String[6], cst, _bs_),
      _bw_ = caml_call2(Stdlib[28], _bt_, _bv_);
     return caml_call2(Stdlib[28], cst_At_path, _bw_);
    }
    var errk$0 = param[2];
    return string_of_error_kind(errk$0);
   }
   function typerr(ty, path, got){return [1, [0, path, [3, ty, got]]];}
   function string(param){
    var obj = param[2], path = param[1], ty = caml_call1(Ojs$0[21], obj);
    return ty !== cst_string$0
            ? typerr(1, path, ty)
            : [0, caml_js_to_string(obj)];
   }
   function int$0(param){
    var obj = param[2], path = param[1], ty = caml_call1(Ojs$0[21], obj);
    return ty !== cst_number ? typerr(3, path, ty) : [0, obj];
   }
   function float$0(param){
    var obj = param[2], path = param[1], ty = caml_call1(Ojs$0[21], obj);
    return ty !== cst_number ? typerr(4, path, ty) : [0, obj];
   }
   function bool(param){
    var obj = param[2], path = param[1], ty = caml_call1(Ojs$0[21], obj);
    return ty !== cst_boolean$0 ? typerr(2, path, ty) : [0, obj | 0];
   }
   function object(param){var obj = param[2]; return [0, [0, Ojs, obj]];}
   function eval$0(opt, param){
    if(opt) var sth = opt[1], extra_fields = sth; else var extra_fields = 0;
    if(typeof param === "number")
     switch(param){
       case 0:
        return string;
       case 1:
        return int$0;
       case 2:
        return float$0;
       case 3:
        return bool;
       default: return object;
     }
    switch(param[0]){
      case 0:
       var
        d = param[2],
        key = param[1],
        match = caml_call2(Stdlib_List[47], key, extra_fields);
       if(match){
        var obj = match[1];
        return function(o){
         var _br_ = [0, [0, [1, key], o[1]], obj];
         return eval$0(0, d)(_br_);};
       }
       var d$0 = eval$0(0, d);
       return function(o$1){
        var
         keys$0 = caml_call2(Stdlib_String[16], 46, key),
         o = o$1,
         param = keys$0;
        for(;;){
         if(param){
          var keys = param[2], key$0 = param[1], obj = o[2][key$0];
          if(! runtime.caml_equal(obj, caml_call1(Ojs$0[10], 0))){
           var o$0 = [0, [0, [1, key$0], o[1]], obj];
           o = o$0;
           param = keys;
           continue;
          }
          var _bq_ = [1, [0, o[1], [0, key$0]]];
         }
         else
          var _bq_ = [0, o];
         return caml_call2(Stdlib_Result[6], _bq_, d$0);
        }};
      case 1:
       var
        d$1 = param[3],
        arg = param[2],
        name = param[1],
        d$2 = eval$0(0, d$1);
       return function(o){
        var
         arg$0 =
           caml_call2
            (Stdlib_List[19],
             function(param){
              switch(param[0]){
                case 0:
                 var s = param[1]; return caml_js_from_string(s);
                case 1:
                 var b = param[1]; return ! ! b;
                case 2:
                 var f = param[1]; return f;
                default: var i = param[1]; return i;
              }
             },
             arg),
         arg$1 = caml_call1(Stdlib_Array[12], arg$0);
        try{
         var
          obj = runtime.caml_js_meth_call(o[2], name, arg$1),
          _bo_ = d$2([0, [0, [1, name], o[1]], obj]);
         return _bo_;
        }
        catch(_bp_){
         var _bn_ = caml_wrap_exception(_bp_);
         if(_bn_[1] === Ojs_exn[5]) return [1, [0, o[1], [1, name]]];
         throw caml_maybe_attach_backtrace(_bn_, 0);
        }};
      case 2:
       var d$3 = param[2], f = param[1], d$4 = eval$0([0, extra_fields], d$3);
       return function(o){
        var match = d$4(o);
        if(0 === match[0]){
         var x = match[1];
         return eval$0([0, extra_fields], caml_call1(f, x))(o);
        }
        var err = match[1];
        return [1, err];};
      case 3:
       var msg = param[1]; return function(_bm_){return [0, msg];};
      case 4:
       var f$0 = param[1];
       return function(o){
        return [0,
                function(x){
                 var _bl_ = eval$0([0, extra_fields], caml_call1(f$0, x))(o);
                 return caml_call2(Stdlib_Result[9], string_of_error, _bl_);
                }];};
      case 5:
       var d$5 = param[1], d$6 = eval$0(0, d$5);
       return function(o){
        var ty = caml_call1(Ojs$0[21], o[2]);
        if(ty !== "object") return typerr(0, o[1], ty);
        var l = caml_call2(Ojs$0[3], function(_bk_){return _bk_;}, o[2]);
        function loop(i, acc, param){
         if(! param) return [0, caml_call1(Stdlib_List[9], acc)];
         var
          xs = param[2],
          obj = param[1],
          _bj_ = d$6([0, [0, [0, i], o[1]], obj]);
         return caml_call2
                 (Stdlib_Result[6],
                  _bj_,
                  function(x){return loop(i + 1 | 0, [0, x, acc], xs);});
        }
        return loop(0, 0, l);};
      case 6:
       var msg$0 = param[1];
       return function(param){
        var path = param[1];
        return [1, [0, path, [2, msg$0]]];};
      default:
       var d$7 = param[1], d$8 = eval$0([0, extra_fields], d$7);
       return function(o){
        var match = d$8(o);
        if(0 !== match[0]) return _d_;
        var x = match[1];
        return [0, [0, x]];};
    }
   }
   function decode(opt, d){
    if(opt) var sth = opt[1], extra_fields = sth; else var extra_fields = 0;
    var d$0 = eval$0([0, extra_fields], d);
    return function(obj){
     var match = d$0([0, 0, obj]);
     if(0 === match[0]){var x = match[1]; return [0, x];}
     var err = match[1];
     return [1, string_of_error(err)];};
   }
   function decode_fail(opt, d, o){
    if(opt) var sth = opt[1], extra_fields = sth; else var extra_fields = 0;
    var match = decode([0, extra_fields], d)(o);
    if(0 === match[0]){var res = match[1]; return res;}
    var err = match[1];
    return caml_call1(Stdlib[2], err);
   }
   function convert_arg(o){
    var ty = caml_call1(Ojs$0[21], o);
    if(ty === cst_boolean$0) return [1, o | 0];
    if(ty === cst_number) return [2, o];
    if(ty === cst_string$0) return [0, caml_js_to_string(o)];
    var _bi_ = caml_call2(Stdlib[28], cst_Encoded_function_received_, ty);
    return caml_call1(Stdlib[2], _bi_);
   }
   function encode(param){
    if(typeof param === "number") return caml_call1(Ojs$0[10], 0);
    switch(param[0]){
      case 0:
       var s = param[1]; return caml_js_from_string(s);
      case 1:
       var i = param[1]; return i;
      case 2:
       var f = param[1]; return f;
      case 3:
       var b = param[1]; return ! ! b;
      case 4:
       var l = param[1]; return caml_call2(Ojs$0[4], encode, l);
      case 5:
       var
        l$0 = param[1],
        _bh_ =
          caml_call2
           (Stdlib_List[19],
            function(param){
             var e = param[2], s = param[1];
             return [0, s, encode(e)];
            },
            l$0);
       return runtime.caml_js_object(caml_call1(Stdlib_Array[12], _bh_));
      default:
       var f$0 = param[1];
       return runtime.caml_ojs_wrap_fun_arguments
               (function(o){
                 return encode
                         (caml_call1(f$0, caml_call2(Ojs$0[3], convert_arg, o)));
                });
    }
   }
   function container(ctx){return ctx[1];}
   function send_msg(ctx){return ctx[2];}
   function after_redraw(ctx){return ctx[3];}
   function run(after, h, p, elt, x){
    var p$0 = p, x$0 = x;
    for(;;){
     if(x$0[1] === Vdom[1][1]){var msg = x$0[2]; return caml_call1(p$0, msg);}
     if(x$0[1] === Vdom[1][2]){
      var l = x$0[2];
      return caml_call2
              (Stdlib_List[17],
               function(_bg_){return run(after, h, p$0, elt, _bg_);},
               l);
     }
     if(x$0[1] === Vdom[1][4]){
      var cmd = x$0[3], f = x$0[2];
      let p = p$0, f$0 = f;
      var p$1 = function(x){return caml_call1(p, caml_call1(f$0, x));};
      p$0 = p$1;
      x$0 = cmd;
     }
     else if(x$0[1] === Vdom[1][3]){
      var f$0 = x$0[3], cmd$0 = x$0[2];
      let p = p$0, f = f$0;
      var p$2 = function(x){return run(after, h, p, elt, caml_call1(f, x));};
      p$0 = p$2;
      x$0 = cmd$0;
     }
     else{
      var ctx = [0, elt, p$0, after], param = h;
      for(;;){
       if(! param){
        var
         _be_ = caml_call1(Stdlib_Obj[22][1], x$0),
         _bf_ = caml_call1(Stdlib_Obj[22][2], _be_);
        return caml_call3(Stdlib_Printf[10], Stdlib[2], _e_, _bf_);
       }
       var tl = param[2], hd = param[1];
       if(caml_call2(hd[1], ctx, x$0)) return 0;
       param = tl;
      }
     }
    }
   }
   function input_event(s){
    return [1,
            cst_input,
            [5, [0, [0, cst_target, [5, [0, [0, cst_value, [0, s]], 0]]], 0]]];
   }
   function checked_event(b){
    return [1,
            cst_click,
            [5,
             [0, [0, cst_target$0, [5, [0, [0, cst_checked, [3, b]], 0]]], 0]]];
   }
   function change_event(s){
    return [1,
            cst_change,
            [5,
             [0, [0, cst_target$1, [5, [0, [0, cst_value$0, [0, s]], 0]]], 0]]];
   }
   function change_index_event(i){
    return [1,
            cst_change$0,
            [5,
             [0,
              [0, cst_target$2, [5, [0, [0, cst_selectedIndex, [1, i]], 0]]],
              0]]];
   }
   function custom_event(e){return [0, e];}
   function make(opt, sync, dom){
    if(opt)
     var sth = opt[1], dispose = sth;
    else
     var dispose = function(_bd_){return 0;};
    return [0, dom, sync, dispose];
   }
   function parent(ctx){return ctx[1];}
   function send_event(ctx){return ctx[2];}
   function after_redraw$0(ctx){return ctx[3];}
   function get_doms(param){
    switch(param[0]){
      case 0:
       return [0, param[2], 0];
      case 1:
       return param[2];
      case 2:
       return [0, param[2], 0];
      case 3:
       return param[2];
      case 4:
       return param[2];
      default: return [0, param[2][1], 0];
    }
   }
   function get_vdom(param){
    switch(param[0]){
      case 0:
       return param[1];
      case 1:
       return param[1];
      case 2:
       return param[1];
      case 3:
       return param[1];
      case 4:
       return param[1];
      default: return param[1];
    }
   }
   function eval_prop(param){
    switch(param[0]){
      case 0:
       var x = param[1]; return caml_js_from_string(x);
      case 1:
       var x$0 = param[1]; return x$0;
      case 2:
       var x$1 = param[1]; return x$1;
      default: var x$2 = param[1]; return ! ! x$2;
    }
   }
   function string_of_prop(param){
    switch(param[0]){
      case 0:
       var s = param[1]; return s;
      case 1:
       var x = param[1]; return caml_call1(Stdlib[33], x);
      case 2:
       var x$0 = param[1]; return caml_call1(Stdlib[35], x$0);
      default: var x$1 = param[1]; return caml_call1(Stdlib[30], x$1);
    }
   }
   function same_prop(v1, v2){
    var _bb_ = v1 === v2 ? 1 : 0;
    if(_bb_)
     var _bc_ = _bb_;
    else{
     switch(v1[0]){
       case 0:
        if(0 === v2[0]){var x2 = v2[1], x1 = v1[1]; return x1 == x2 ? 1 : 0;}
        break;
       case 1:
        if(1 === v2[0]){
         var x2$0 = v2[1], x1$0 = v1[1];
         return x1$0 === x2$0 ? 1 : 0;
        }
        break;
       case 2:
        if(2 === v2[0]){
         var x2$1 = v2[1], x1$1 = v1[1];
         return x1$1 == x2$1 ? 1 : 0;
        }
        break;
       default:
        if(3 === v2[0]){
         var x2$2 = v2[1], x1$2 = v1[1];
         return x1$2 === x2$2 ? 1 : 0;
        }
     }
     var _bc_ = 0;
    }
    return _bc_;
   }
   function bmemo(vdom, child){return [4, vdom, get_doms(child), child];}
   function is_visible(dom){
    var
     bounding = caml_call1(Js_browser[15][27], dom),
     top = caml_call1(Js_browser[11][7], bounding),
     bottom = caml_call1(Js_browser[11][8], bounding),
     _a$_ = 0. <= top ? 1 : 0,
     _ba_ =
       _a$_
        ? bottom <= caml_call1(Js_browser[19][17], Js_browser[25]) ? 1 : 0
        : _a$_;
    return _ba_;
   }
   function custom_attribute(prop){
    return prop !== "autofocus"
            ? prop
              !== "autosubmit"
              ? prop
                !== "scroll-to-show"
                ? prop
                  !== "select"
                  ? 0
                  : [0,
                    function(dom, param){
                     return caml_call1(Js_browser[15][33], dom);
                    }]
                : [0,
                  function(dom, v){
                   try{
                    a:
                    {
                     if(3 === v[0] && ! v[1]){var align_top = 0; break a;}
                     var align_top = 1;
                    }
                    var
                     _a9_ = 1 - is_visible(dom),
                     _a__ =
                       _a9_ ? caml_call2(Js_browser[15][65], dom, align_top) : _a9_;
                    return _a__;
                   }
                   catch(exn$0){
                    var
                     exn = caml_wrap_exception(exn$0),
                     _a8_ = caml_call1(Stdlib_Printexc[1], exn);
                    return caml_call2(Stdlib_Printf[2], _f_, _a8_);
                   }
                  }]
              : [0,
                function(dom, param){
                 return caml_call1(Js_browser[15][35], dom);
                }]
            : [0,
              function(dom, v){
               a:
               {
                if(0 === v[0] && v[1] === "if-visible"){
                 var do_focus = is_visible(dom);
                 break a;
                }
                var do_focus = 1;
               }
               return do_focus
                       ? caml_call1(Js_browser[15][66], dom)
                       : do_focus;
              }];
   }
   function apply_effect_prop(dom, prop, value){
    var match = custom_attribute(prop);
    if(! match) return 0;
    var f = match[1];
    function f$0(param){return f(dom, value);}
    caml_call3(Js_browser[19][8], Js_browser[25], f$0, 0);
    return 1;
   }
   function set_style(dom, k, v){
    if
     (0 < runtime.caml_ml_string_length(k)
      && 45 === runtime.caml_string_get(k, 0)){
     var _a7_ = caml_js_from_string(k);
     caml_call1(Js_browser[15][2], dom)[cst_style].setProperty(_a7_, v);
     return 0;
    }
    return caml_call1(Js_browser[15][2], dom)[cst_style][k] = v;
   }
   function apply_special_prop(ns, dom, k, v){
    if
     (ns === cst_http_www_w3_org_2000_svg && k === cst_className && 0 === v[0]){
     var
      s = v[1],
      class_obj = caml_call1(Js_browser[15][2], dom)[cst_className];
     class_obj[cst_baseVal] = caml_js_from_string(s);
     return 1;
    }
    return 0;
   }
   var js_empty_string = cst$3;
   function cmd(h){return [0, [0, h, 0], empty[2]];}
   function custom(h){return [0, empty[1], [0, h, 0]];}
   function merge(envs){
    var
     _a4_ = caml_call2(Stdlib_List[19], function(e){return e[2];}, envs),
     _a5_ = caml_call1(Stdlib_List[13], _a4_),
     _a6_ = caml_call2(Stdlib_List[19], function(e){return e[1];}, envs);
    return [0, caml_call1(Stdlib_List[13], _a6_), _a5_];
   }
   var
    global = [0, empty],
    cst_Vdom_blit_no_custom_elemen =
      "Vdom_blit: no custom element handler found",
    _h_ =
      [0,
       [11,
        "Error during vdom Custom ",
        [2, 0, [11, " lookup: ", [2, 0, [12, 10, [10, 0]]]]]],
       "Error during vdom Custom %s lookup: %s\n%!"],
    _i_ =
      [0,
       [11, "Error during vdom blit: ", [2, 0, [12, 10, [10, 0]]]],
       "Error during vdom blit: %s\n%!"];
   function register(e){
    global[1] = merge([0, e, [0, global[1], 0]]);
    return 0;
   }
   function apply_attributes(ctx, ns, dom, attributes){
    return caml_call2
            (Stdlib_List[17],
             function(param){
              switch(param[0]){
                case 0:
                 var
                  v = param[2],
                  k = param[1],
                  _a0_ = 1 - apply_special_prop(ns, dom, k, v);
                 if(_a0_){
                  var _a1_ = 1 - apply_effect_prop(dom, k, v);
                  if(_a1_)
                   var
                    _a2_ = eval_prop(v),
                    _a3_ = caml_call1(Js_browser[15][2], dom)[k] = _a2_;
                  else
                   var _a3_ = _a1_;
                 }
                 else
                  var _a3_ = _a0_;
                 return _a3_;
                case 1:
                 var v$0 = param[2], k$0 = param[1];
                 return set_style(dom, k$0, caml_js_from_string(v$0));
                case 2:
                 var match = param[1];
                 if(0 !== match[0]) return 0;
                 var event_type = match[1];
                 return caml_call1(ctx[4], event_type);
                default:
                 var v$1 = param[2], k$1 = param[1];
                 return caml_call3(Js_browser[15][26], dom, k$1, v$1);
              }
             },
             attributes);
   }
   function _g_(parent, ctx, vdom){
    switch(vdom[0]){
      case 0:
       var txt = vdom[2];
       return [0, vdom, caml_call2(Js_browser[16][5], Js_browser[26], txt)];
      case 1:
       var
        children = vdom[2],
        children$0 =
          caml_call2
           (Stdlib_List[19],
            function(_aZ_){return _g_(parent, ctx, _aZ_);},
            children),
        doms = caml_call2(Stdlib_List[23], get_doms, children$0);
       return [1, vdom, doms, children$0];
      case 2:
       var
        children$1 = vdom[5],
        attributes = vdom[4],
        tag = vdom[3],
        ns = vdom[2],
        dom$0 =
          ns == cst$3
           ? caml_call2(Js_browser[16][3], Js_browser[26], tag)
           : caml_call3(Js_browser[16][4], Js_browser[26], ns, tag),
        children$2 =
          caml_call2
           (Stdlib_List[19],
            function(_aY_){return _g_(dom$0, ctx, _aY_);},
            children$1);
       caml_call2
        (Stdlib_List[17],
         function(c){
          var _aW_ = get_doms(c), _aX_ = caml_call1(Js_browser[15][9], dom$0);
          return caml_call2(Stdlib_List[17], _aX_, _aW_);
         },
         children$2);
       apply_attributes(ctx, ns, dom$0, attributes);
       return [2, vdom, dom$0, children$2];
      case 3:
       var child = vdom[3], f = vdom[2], child$0 = _g_(parent, ctx, child);
       return [3, vdom, get_doms(child$0), f, child$0];
      case 4:
       var arg = vdom[3], f$0 = vdom[2];
       return bmemo(vdom, _g_(parent, ctx, caml_call1(f$0, arg)));
      default:
       var propagate_events = vdom[4], attributes$0 = vdom[3], elt = vdom[2];
       try{
        var
         handlers = caml_call2(Stdlib[37], ctx[2], global[1][2]),
         after_redraw = ctx[3],
         process_custom = ctx[1],
         dom = [],
         send_event = function _aV_(_aU_){return _aV_.fun(_aU_);},
         el = [];
        caml_update_dummy
         (dom,
          [246,
           function(_aR_){
            var
             _aS_ = caml_obj_tag(el),
             _aT_ =
               250 === _aS_
                ? el[1]
                : 246 === _aS_ ? caml_call1(CamlinternalLazy[2], el) : el;
            return _aT_[1];
           }]);
        caml_update_dummy
         (send_event,
          function(e){
           var
            _aP_ = caml_obj_tag(dom),
            _aQ_ =
              250 === _aP_
               ? dom[1]
               : 246 === _aP_ ? caml_call1(CamlinternalLazy[2], dom) : dom;
           return caml_call2(process_custom, _aQ_, e);
          });
        caml_update_dummy
         (el,
          [246,
           function(_aO_){
            var ctx = [0, parent, send_event, after_redraw], param = handlers;
            for(;;){
             if(! param)
              return caml_call1(Stdlib[2], cst_Vdom_blit_no_custom_elemen);
             var
              tl = param[2],
              hd = param[1],
              match = caml_call2(hd, ctx, elt);
             if(match){var f = match[1]; return f;}
             param = tl;
            }
           }]);
        var
         _aI_ = caml_obj_tag(el),
         elt$0 =
           250 === _aI_
            ? el[1]
            : 246 === _aI_ ? caml_call1(CamlinternalLazy[2], el) : el;
       }
       catch(exn$0){
        var
         exn = caml_wrap_exception(exn$0),
         _aJ_ = caml_call1(Stdlib_Printexc[1], exn),
         _aK_ = caml_call1(Stdlib_Obj[22][1], elt),
         _aL_ = caml_call1(Stdlib_Obj[22][2], _aK_);
        caml_call3(Stdlib_Printf[2], _h_, _aL_, _aJ_);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       var
        _aM_ = caml_call1(Js_browser[15][2], elt$0[1])["namespaceURI"],
        _aN_ = caml_call2(Ojs$0[7], caml_js_to_string, _aM_),
        ns$0 = caml_call2(Stdlib_Option[3], _aN_, cst$1);
       apply_attributes(ctx, ns$0, elt$0[1], attributes$0);
       return [5, vdom, elt$0, ns$0, propagate_events];
    }
   }
   function blit(parent, ctx, vdom){
    try{var _aH_ = _g_(parent, ctx, vdom); return _aH_;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _aG_ = caml_call1(Stdlib_Printexc[1], exn);
     caml_call2(Stdlib_Printf[2], _i_, _aG_);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function sync_props(to_string, same, set, clear, l1, l2){
    var
     sort =
       caml_call1
        (Stdlib_List[56],
         function(param, _aF_){
          var k2 = _aF_[1], k1 = param[1];
          return caml_call2(Stdlib_String[9], k1, k2);
         }),
     l1$0 = caml_call1(sort, l1),
     l2$0 = caml_call1(sort, l2),
     l1$1 = l1$0,
     l2$1 = l2$0;
    for(;;)
     if(l1$1){
      var tl1 = l1$1[2], _aE_ = l1$1[1], v1 = _aE_[2], k1 = _aE_[1];
      if(l2$1){
       var match = l2$1[1], k2 = match[1], v2 = match[2];
       if(caml_string_lessthan(k1, k2)){
        caml_call2(clear, k1, v1);
        l1$1 = tl1;
       }
       else{
        var tl2 = l2$1[2];
        if(caml_string_lessthan(k2, k1)){
         caml_call2(set, k2, v2);
         l2$1 = tl2;
        }
        else{
         var tl2$0 = l2$1[2], v2$0 = match[2];
         if(1 - caml_call2(same, v1, v2$0)) caml_call2(set, k2, v2$0);
         l1$1 = tl1;
         l2$1 = tl2$0;
        }
       }
      }
      else{caml_call2(clear, k1, v1); l1$1 = tl1; l2$1 = 0;}
     }
     else{
      if(! l2$1) return;
      var
       tl2$1 = l2$1[2],
       match$0 = l2$1[1],
       v2$1 = match$0[2],
       k2$0 = match$0[1];
      caml_call2(set, k2$0, v2$1);
      l1$1 = 0;
      l2$1 = tl2$1;
     }
   }
   function choose(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var tl = param$0[2], hd = param$0[1], match = caml_call1(f, hd);
     if(match){var x = match[1]; return [0, x, choose(f, tl)];}
     param$0 = tl;
    }
   }
   var
    js_false = ! ! 0,
    js_zero = 0,
    _k_ = [0, cst_lib_vdom_blit_ml, 861, 33],
    _l_ = [0, cst_lib_vdom_blit_ml, 890, 13],
    _m_ = [0, cst_lib_vdom_blit_ml, 923, 43],
    _n_ = [0, cst_lib_vdom_blit_ml, 924, 34],
    _o_ =
      [0,
       [11, "Error during vdom view: ", [2, 0, [12, 10, [10, 0]]]],
       "Error during vdom view: %s\n%!"],
    _p_ =
      [0,
       [11,
        "Error in event handler ",
        [3, 0, [11, ": ", [2, 0, [12, 10, [10, 0]]]]]],
       "Error in event handler %S: %s\n%!"],
    cst_currentTarget = "currentTarget",
    _q_ =
      [0,
       [11, "Error during vdom process: ", [2, 0, [12, 10, [10, 0]]]],
       "Error during vdom process: %s\n%!"],
    cst_div = "div";
   function sync_attributes(ctx, ns, dom, a1, a2){
    function props(param){
     if(0 !== param[0]) return 0;
     var v = param[2], k = param[1];
     return [0, [0, k, v]];
    }
    function set(k, v){
     if(k === cst_value$1 && 0 === v[0]){
      var s = v[1];
      if(s == caml_call1(Js_browser[15][31], dom)) return 0;
     }
     var _aA_ = 1 - apply_special_prop(ns, dom, k, v);
     if(_aA_){
      var _aB_ = 1 - apply_effect_prop(dom, k, v);
      if(_aB_)
       var
        _aC_ = eval_prop(v),
        _aD_ = caml_call1(Js_browser[15][2], dom)[k] = _aC_;
      else
       var _aD_ = _aB_;
     }
     else
      var _aD_ = _aA_;
     return _aD_;
    }
    function clear(k, v){
     var _aw_ = 0 === custom_attribute(k) ? 1 : 0;
     if(_aw_){
      var o = caml_call1(Js_browser[15][2], dom);
      if(o.hasOwnProperty(caml_js_from_string(k)) | 0)
       return delete caml_call1(Js_browser[15][2], dom)[k];
      a:
      {
       if(ns === cst_http_www_w3_org_2000_svg && k === cst_className){
        var class_obj = caml_call1(Js_browser[15][2], dom)[cst_className];
        class_obj[cst_baseVal] = cst$3;
        var _ax_ = 1;
        break a;
       }
       var _ax_ = 0;
      }
      var _ay_ = 1 - _ax_;
      if(_ay_){
       switch(v[0]){
         case 0:
          var js_empty_string$0 = js_empty_string; break;
         case 3:
          var js_empty_string$0 = js_false; break;
         default: var js_empty_string$0 = js_zero;
       }
       var _az_ = caml_call1(Js_browser[15][2], dom)[k] = js_empty_string$0;
      }
      else
       var _az_ = _ay_;
     }
     else
      var _az_ = _aw_;
     return _az_;
    }
    var _as_ = choose(props, a2);
    sync_props(string_of_prop, same_prop, set, clear, choose(props, a1), _as_);
    function styles(param){
     if(1 !== param[0]) return 0;
     var v = param[2], k = param[1];
     return [0, [0, k, [0, v]]];
    }
    function set$0(k, v){return set_style(dom, k, eval_prop(v));}
    function clear$0(k, param){return set_style(dom, k, js_empty_string);}
    var _at_ = choose(styles, a2);
    sync_props
     (string_of_prop, same_prop, set$0, clear$0, choose(styles, a1), _at_);
    function attrs(param){
     if(3 !== param[0]) return 0;
     var v = param[2], k = param[1];
     return [0, [0, k, v]];
    }
    function set$1(k, v){return caml_call3(Js_browser[15][26], dom, k, v);}
    function clear$1(k, param){return caml_call2(Js_browser[15][25], dom, k);}
    var _au_ = choose(attrs, a2);
    sync_props
     (function(_av_){return _av_;},
      caml_string_equal,
      set$1,
      clear$1,
      choose(attrs, a1),
      _au_);
    return caml_call2
            (Stdlib_List[17],
             function(param){
              if(2 === param[0]){
               var match = param[1];
               if(0 === match[0]){
                var event_type = match[1];
                return caml_call1(ctx[4], event_type);
               }
              }
              return 0;
             },
             a2);
   }
   function dispose(ctrl){
    var ctrl$0 = ctrl;
    for(;;)
     switch(ctrl$0[0]){
       case 0:
        return 0;
       case 3:
        var child = ctrl$0[4]; ctrl$0 = child; break;
       case 4:
        var child$0 = ctrl$0[3]; ctrl$0 = child$0; break;
       case 5:
        var elt = ctrl$0[2]; return caml_call1(elt[3], 0);
       default:
        var children = ctrl$0[3];
        return caml_call2(Stdlib_List[17], dispose, children);
     }
   }
   function remove_child(parent, child){
    return caml_call2(Js_browser[15][12], parent, child);
   }
   function insert_before(parent, o, n){
    return caml_call3(Js_browser[15][10], parent, o, n);
   }
   function _j_(ctx, parent, prev_move, next, old, vdom){
    if(vdom === get_vdom(old)) return old;
    switch(old[0]){
      case 0:
       var match = old[1];
       if(0 === match[0] && 0 === vdom[0]){
        var s2 = vdom[2], dom = old[2], s1 = match[2];
        if(s1 !== s2) caml_call2(Js_browser[15][41], dom, s2);
        return [0, vdom, dom];
       }
       break;
      case 1:
       var match$0 = old[1];
       if(1 === match$0[0] && 1 === vdom[0]){
        var children = old[3];
        if(match$0[1] == vdom[1]){
         var
          children$0 =
            sync_children(ctx, parent, prev_move, next, children, vdom[2]),
          doms = caml_call2(Stdlib_List[23], get_doms, children$0);
         return [1, vdom, doms, children$0];
        }
       }
       break;
      case 2:
       var e1 = old[1];
       if(2 === e1[0] && 2 === vdom[0]){
        var children$1 = old[3], dom$0 = old[2];
        if(e1[3] == vdom[3] && e1[2] == vdom[2] && e1[1] == vdom[1]){
         var
          children$2 =
            sync_children
             (ctx, dom$0, 0, Js_browser[15][3], children$1, vdom[5]);
         sync_attributes(ctx, e1[2], dom$0, e1[4], vdom[4]);
         return [2, vdom, dom$0, children$2];
        }
       }
       break;
      case 3:
       if(3 === vdom[0]){
        var
         c2 = vdom[3],
         f = vdom[2],
         c1 = old[4],
         child = _j_(ctx, parent, prev_move, next, c1, c2);
        return [3, vdom, get_doms(child), f, child];
       }
       break;
      case 4:
       var match$1 = old[1];
       if(4 === match$1[0] && 4 === vdom[0]){
        var
         a2 = vdom[3],
         f2 = vdom[2],
         c1$0 = old[3],
         a1 = match$1[3],
         f1 = match$1[2];
        if(f1 === f2 && a1 === a2) return bmemo(vdom, c1$0);
        return bmemo
                (vdom,
                 _j_(ctx, parent, prev_move, next, c1$0, caml_call1(f2, a2)));
       }
       break;
      default:
       var match$2 = old[1];
       if(5 === match$2[0] && 5 === vdom[0]){
        var
         propagate_events = vdom[4],
         a2$0 = vdom[3],
         arg2 = vdom[2],
         key2 = vdom[1],
         ns = old[3],
         elt = old[2],
         a1$0 = match$2[3],
         arg1 = match$2[2],
         key1 = match$2[1];
        a:
        if(key1 == key2){
         if(arg1 !== arg2 && ! caml_call1(elt[2], arg2)) break a;
         sync_attributes(ctx, ns, elt[1], a1$0, a2$0);
         return [5, vdom, elt, ns, propagate_events];
        }
       }
    }
    var x = blit(parent, ctx, vdom), l2$0 = get_doms(old), l1$0 = get_doms(x);
    a:
    {
     b:
     {
      var l1 = l1$0, l2 = l2$0;
      for(;;){
       if(! l1) break;
       if(! l2) break b;
       var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
       caml_call3(Js_browser[15][11], parent, h1, h2);
       l1 = t1;
       l2 = t2;
      }
      caml_call2
       (Stdlib_List[17],
        function(_ar_){return remove_child(parent, _ar_);},
        l2);
      break a;
     }
     caml_call2
      (Stdlib_List[17],
       function(c){return insert_before(parent, c, next);},
       l1);
    }
    dispose(old);
    return x;
   }
   function sync_children
   (ctx, dom, prev_move, next, old_children, new_children){
    var
     old_children$0 = caml_call1(Stdlib_Array[12], old_children),
     new_children$0 = caml_call1(Stdlib_Array[12], new_children),
     by_key = caml_call2(Stdlib_Hashtbl[1], 0, 8),
     _$_ = old_children$0.length - 2 | 0;
    if(_$_ >= 0){
     var i$1 = _$_;
     for(;;){
      var key = get_vdom(caml_check_bound(old_children$0, i$1)[1 + i$1])[1];
      caml_call3(Stdlib_Hashtbl[5], by_key, key, i$1);
      var _an_ = i$1 - 1 | 0;
      if(0 === i$1) break;
      i$1 = _an_;
     }
    }
    var
     indices = runtime.caml_make_vect(new_children$0.length - 1, -1),
     _ab_ = indices.length - 2 | 0,
     _aa_ = 0;
    if(_ab_ >= 0){
     var i$0 = _aa_;
     for(;;){
      var key$0 = caml_check_bound(new_children$0, i$0)[1 + i$0][1];
      a:
      {
       try{var idx$0 = caml_call2(Stdlib_Hashtbl[6], by_key, key$0);}
       catch(_aq_){
        var _al_ = caml_wrap_exception(_aq_);
        if(_al_ === Stdlib[8]) break a;
        throw caml_maybe_attach_backtrace(_al_, 0);
       }
       caml_check_bound(indices, i$0)[1 + i$0] = idx$0;
       caml_call2(Stdlib_Hashtbl[10], by_key, key$0);
      }
      var _am_ = i$0 + 1 | 0;
      if(_ab_ === i$0) break;
      i$0 = _am_;
     }
    }
    caml_call2
     (Stdlib_Hashtbl[12],
      function(param, i){
       var
        to_remove = caml_check_bound(old_children$0, i)[1 + i],
        _ao_ = get_doms(to_remove);
       caml_call2
        (Stdlib_List[17],
         function(_ap_){return remove_child(dom, _ap_);},
         _ao_);
       return dispose(to_remove);
      },
      by_key);
    var
     ctrls = [0, 0],
     prev_move$0 = [0, prev_move],
     next$0 = [0, next],
     _ac_ = new_children$0.length - 2 | 0;
    if(_ac_ >= 0){
     var i = _ac_;
     for(;;){
      var idx = caml_check_bound(indices, i)[1 + i];
      if(0 <= idx)
       var
        _ad_ = caml_check_bound(new_children$0, i)[1 + i],
        _ae_ = caml_check_bound(old_children$0, idx)[1 + idx],
        c = _j_(ctx, dom, prev_move$0[1], next$0[1], _ae_, _ad_);
      else
       var c = blit(dom, ctx, caml_check_bound(new_children$0, i)[1 + i]);
      var doms = get_doms(c);
      a:
      {
       b:
       {
        var param = doms;
        for(;;){
         if(! param) break;
         var c_dom = param[1];
         if(! param[2]) break b;
         var tl = param[2];
         param = tl;
        }
        var match = 0;
        break a;
       }
       var match = [0, c_dom];
      }
      if(match){
       var right_most = match[1], _af_ = idx < 0 ? 1 : 0;
       if(_af_)
        var move = _af_;
       else{
        if(i === (new_children$0.length - 2 | 0))
         var _ah_ = idx !== (old_children$0.length - 2 | 0) ? 1 : 0;
        else{
         var _aj_ = prev_move$0[1];
         if(_aj_)
          var _ah_ = _aj_;
         else
          var
           _ak_ = i + 1 | 0,
           _ah_ =
             caml_check_bound(indices, _ak_)[1 + _ak_] !== (idx + 1 | 0)
              ? 1
              : 0;
        }
        if(_ah_)
         var
          _ai_ = next$0[1],
          move = caml_call1(Js_browser[15][15], right_most) !== _ai_ ? 1 : 0;
        else
         var move = _ah_;
       }
       if(move)
        caml_call2
         (Stdlib_List[17],
          function(c_dom){return insert_before(dom, c_dom, next$0[1]);},
          doms);
       prev_move$0[1] = move;
       next$0[1] = caml_call1(Stdlib_List[5], doms);
       ctrls[1] = [0, c, ctrls[1]];
      }
      var _ag_ = i - 1 | 0;
      if(0 === i) break;
      i = _ag_;
     }
    }
    return ctrls[1];
   }
   function found(mapper, parent, dom, inner){
    var mapper$0 = mapper, inner$0 = inner;
    for(;;)
     switch(inner$0[0]){
       case 1:
        var children = inner$0[3];
        try{
         var
          inner$1 =
            caml_call2
             (Stdlib_List[38],
              function(c){
               var ___ = get_doms(c);
               return caml_call2(Stdlib_List[37], dom, ___);
              },
              children);
        }
        catch(_Z_){
         var _Y_ = caml_wrap_exception(_Z_);
         if(_Y_ === Stdlib[8])
          throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
         throw caml_maybe_attach_backtrace(_Y_, 0);
        }
        inner$0 = inner$1;
        break;
       case 3:
        var child = inner$0[4], f = inner$0[3];
        let mapper = mapper$0, f$0 = f;
        var
         mapper$1 =
           function(x){return caml_call1(mapper, caml_call1(f$0, x));};
        mapper$0 = mapper$1;
        inner$0 = child;
        break;
       case 4:
        var child$0 = inner$0[3]; inner$0 = child$0; break;
       default: return [0, mapper$0, inner$0, parent];
     }
   }
   function vdom_of_dom(root, dom){
    var
     _S_ = caml_call1(Js_browser[15][2], dom),
     match = caml_call2(Ojs$0[7], Js_browser[15][1], _S_);
    if(! match) return 0;
    var dom$0 = match[1], _T_ = get_doms(root);
    if(caml_call2(Stdlib_List[37], dom$0, _T_))
     return found(function(_X_){return _X_;}, 0, dom$0, root);
    var parent = vdom_of_dom(root, caml_call1(Js_browser[15][42], dom$0));
    if(! parent) return 0;
    var inner = parent[2], mapper = parent[1];
    switch(inner[0]){
      case 2:
       var children = inner[3];
       try{
        var
         c =
           caml_call2
            (Stdlib_List[38],
             function(c){
              var _W_ = get_doms(c);
              return caml_call2(Stdlib_List[37], dom$0, _W_);
             },
             children);
       }
       catch(_V_){
        var _U_ = caml_wrap_exception(_V_);
        if(_U_ === Stdlib[8]) return 0;
        throw caml_maybe_attach_backtrace(_U_, 0);
       }
       return found(mapper, parent, dom$0, c);
      case 5:
       var parent$0 = parent[3], propagate_events = inner[4];
       return propagate_events ? found(mapper, parent$0, dom$0, inner) : 0;
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
    }
   }
   function dom(x){return x[1];}
   function process(x){return x[2];}
   function get(x){return caml_call1(x[3], 0);}
   function after_redraw$1(x){return x[4];}
   function run$0(opt, container, param){
    if(opt) var sth = opt[1], env = sth; else var env = empty;
    var
     view = param[3],
     update = param[2],
     match = param[1],
     cmd0 = match[2],
     model0 = match[1],
     env$0 = merge([0, env, [0, global[1], 0]]);
    if(container)
     var
      container$0 = container[1],
      container$1 = container$0,
      container_created = 0;
    else
     var
      container$2 = caml_call2(Js_browser[16][3], Js_browser[26], cst_div),
      container$1 = container$2,
      container_created = 1;
    var post_redraw = [0, 0];
    function after_redraw(f){
     post_redraw[1] = [0, f, post_redraw[1]];
     return 0;
    }
    function flush(param){
     var l = caml_call1(Stdlib_List[9], post_redraw[1]);
     post_redraw[1] = 0;
     return caml_call2
             (Stdlib_List[17], function(f){return caml_call1(f, 0);}, l);
    }
    var
     process_custom_fwd =
       [0,
        function(param, _R_){
         throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
        }],
     process_fwd =
       [0,
        function(param){
         throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
        }],
     listeners = caml_call2(Stdlib_Hashtbl[1], 0, 8),
     model = [0, model0],
     current = [0, 0],
     pending_redraw = [0, 0];
    function view$0(model){
     try{var _Q_ = caml_call1(view, model); return _Q_;}
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       _P_ = caml_call1(Stdlib_Printexc[1], exn);
      caml_call2(Stdlib_Printf[2], _o_, _P_);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    function on_event(evt){
     var ty = caml_call1(Js_browser[10][7], evt);
     try{
      var
       _B_ = caml_call1(Js_browser[10][3], evt),
       tgt = caml_call1(Js_browser[15][1], _B_);
      caml_call2
       (Stdlib_Option[9],
        function(root){
         var param = vdom_of_dom(root, tgt);
         for(;;){
          a:
          if(param){
           var _I_ = param[2], mapper = param[1];
           switch(_I_[0]){
             case 2:
              var _J_ = _I_[1];
              if(2 !== _J_[0]) break a;
              var dom = _I_[2], attributes = _J_[4];
              break;
             case 5:
              var _M_ = _I_[1];
              if(5 !== _M_[0]) break a;
              var dom = _I_[2][1], attributes = _M_[3];
              break;
             default: break a;
           }
           var parent = param[3];
           let dom$0 = dom, mapper$0 = mapper;
           var
            _K_ =
              caml_call1
               (caml_call1
                 (Stdlib_List[22],
                  function(attribute){
                   if(2 === attribute[0]){
                    var match = attribute[1];
                    if(0 === match[0]){
                     var
                      map = match[3],
                      decoder = match[2],
                      event_type = match[1];
                     if(ty == event_type){
                      var
                       _O_ = caml_call1(Js_browser[10][2], evt),
                       match$0 =
                         decode_fail
                          ([0,
                            [0,
                             [0, cst_currentTarget, caml_call1(Js_browser[15][2], dom$0)],
                             0]],
                           decoder,
                           _O_),
                       prevent_default = match$0[3],
                       stop_propagation = match$0[2],
                       msg = match$0[1];
                      if(prevent_default) caml_call1(Js_browser[10][5], evt);
                      if(stop_propagation) caml_call1(Js_browser[10][6], evt);
                      var match$1 = caml_call1(map, msg);
                      if(! match$1) return 0;
                      var msg$0 = match$1[1];
                      return [0, [0, msg$0, stop_propagation]];
                     }
                    }
                   }
                   return 0;
                  }),
                attributes),
            stop_propagation =
              caml_call3
               (Stdlib_List[25],
                function(stopped_propagation, param){
                 var
                  stop_propagation = param[2],
                  msg = param[1],
                  _N_ = caml_call1(mapper$0, msg);
                 caml_call1(process_fwd[1], _N_);
                 var
                  stopped_propagation$0 =
                    stopped_propagation || stop_propagation;
                 return stopped_propagation$0;
                },
                0,
                _K_),
            _L_ = 1 - stop_propagation;
           if(! _L_) return _L_;
           param = parent;
           continue;
          }
          return 0;
         }
        },
        current[1]);
      var
       _C_ = ty == cst_input$0 ? 1 : 0,
       _D_ = _C_ || (ty == cst_blur ? 1 : 0);
      if(_D_)
       var
        f =
          function(param){
           return caml_call2
                   (Stdlib_Option[9],
                    function(root){
                     var match = vdom_of_dom(root, tgt);
                     if(match){
                      var _G_ = match[2];
                      if(2 === _G_[0]){
                       var match$0 = _G_[1];
                       if(2 === match$0[0]){
                        var attributes = match$0[4];
                        return caml_call2
                                (Stdlib_List[17],
                                 function(param){
                                  if(0 === param[0]){
                                   var _H_ = param[1];
                                   if(_H_ !== cst_checked$0){
                                    if(_H_ === cst_value$1){
                                     var match = param[2];
                                     if(0 === match[0]){
                                      var s2 = match[1];
                                      if(s2 !== caml_call1(Js_browser[15][31], tgt))
                                       return caml_call2(Js_browser[15][32], tgt, s2);
                                     }
                                    }
                                   }
                                   else{
                                    var match$0 = param[2];
                                    if(3 === match$0[0]){
                                     var s2$0 = match$0[1];
                                     return caml_call2(Js_browser[15][39], tgt, s2$0);
                                    }
                                   }
                                  }
                                  return 0;
                                 },
                                 attributes);
                       }
                      }
                     }
                     return 0;
                    },
                    current[1]);
          },
        _E_ = pending_redraw[1] ? after_redraw(f) : f(0),
        _F_ = _E_;
      else
       var _F_ = _D_;
      return _F_;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       _A_ = caml_call1(Stdlib_Printexc[1], exn);
      return caml_call3(Stdlib_Printf[2], _p_, ty, _A_);
     }
    }
    function add_listener(event_type){
     var _z_ = 1 - caml_call2(Stdlib_Hashtbl[9], listeners, event_type);
     if(! _z_) return _z_;
     var
      remove_listener =
        caml_call4
         (Js_browser[15][19], container$1, [0, event_type], on_event, 1);
     return caml_call3
             (Stdlib_Hashtbl[5], listeners, event_type, remove_listener);
    }
    var
     ctx =
       [0,
        function(elt, evt){
         return caml_call2(process_custom_fwd[1], elt, evt);
        },
        env$0[2],
        after_redraw,
        add_listener],
     x = blit(container$1, ctx, view$0(model0));
    caml_call2(Js_browser[19][11], Js_browser[25], flush);
    current[1] = [0, x];
    function redraw(param){
     var match = current[1];
     if(! match) return 0;
     var root = match[1];
     pending_redraw[1] = 0;
     var
      _y_ = view$0(model[1]),
      vdom = Js_browser[15][3],
      x = _j_(ctx, container$1, 0, vdom, root, _y_);
     current[1] = [0, x];
     return flush(0);
    }
    function process(msg){
     try{
      var
       match = caml_call2(update, model[1], msg),
       cmd = match[2],
       new_model = match[1];
      model[1] = new_model;
      run_cmd(container$1, cmd);
      var
       _w_ = 1 - pending_redraw[1],
       _x_ =
         _w_
          ? (pending_redraw
             [1]
            = 1,
            caml_call2(Js_browser[19][11], Js_browser[25], redraw))
          : _w_;
      return _x_;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       _v_ = caml_call1(Stdlib_Printexc[1], exn);
      caml_call2(Stdlib_Printf[2], _q_, _v_);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    function run_cmd(parent, cmd){
     return run
             (after_redraw,
              caml_call2(Stdlib[37], env$0[1], global[1][1]),
              process,
              parent,
              cmd);
    }
    process_fwd[1] = process;
    var _r_ = get_doms(x), _s_ = caml_call1(Js_browser[15][9], container$1);
    caml_call2(Stdlib_List[17], _s_, _r_);
    function process_custom(tgt, event){
     return caml_call2
             (Stdlib_Option[9],
              function(root){
               function process$0(mapper, attributes){
                function select_handler(attr){
                 if(2 === attr[0]){
                  var _u_ = attr[1];
                  if(0 === _u_[0]){
                   var map = _u_[3], decoder = _u_[2], et1 = _u_[1];
                   if(0 !== event[0]){
                    var encoder = event[2], et2 = event[1];
                    if(et1 == et2){
                     var msg = decode_fail(0, decoder, encode(encoder))[1];
                     return caml_call1(map, msg);
                    }
                   }
                  }
                  else{
                   var f = _u_[1];
                   if(0 === event[0]){
                    var e = event[1];
                    return caml_call1(f, e);
                   }
                  }
                 }
                 return 0;
                }
                var
                 msgs =
                   caml_call2(Stdlib_List[22], select_handler, attributes);
                return caml_call2
                        (Stdlib_List[17],
                         function(msg){return process(caml_call1(mapper, msg));},
                         msgs);
               }
               var match = vdom_of_dom(root, tgt);
               if(match){
                var _t_ = match[2], mapper = match[1];
                switch(_t_[0]){
                  case 2:
                   var match$0 = _t_[1];
                   if(2 === match$0[0]){
                    var attributes = match$0[4];
                    return process$0(mapper, attributes);
                   }
                   break;
                  case 5:
                   var match$1 = _t_[1];
                   if(5 === match$1[0]){
                    var attributes$0 = match$1[3];
                    return process$0(mapper, attributes$0);
                   }
                   break;
                }
               }
               return 0;
              },
              current[1]);
    }
    process_custom_fwd[1] = process_custom;
    run_cmd(container$1, cmd0);
    function dispose$0(param){
     return caml_call2
             (Stdlib_Option[9],
              function(root){
               current[1] = 0;
               dispose(root);
               caml_call2
                (Stdlib_Hashtbl[12],
                 function(param, f){return caml_call1(f, 0);},
                 listeners);
               return container_created
                       ? caml_call1(Js_browser[15][74], container$1)
                       : caml_call2(Js_browser[15][48], container$1, cst$2);
              },
              current[1]);
    }
    return [0,
            container$1,
            process,
            function(param){return model[1];},
            after_redraw,
            dispose$0];
   }
   function dispose$0(param){
    var dispose = param[5];
    return caml_call1(dispose, 0);
   }
   var
    Vdom_blit =
      [0,
       Ojs,
       [0, decode],
       [0, encode],
       [0, container, send_msg, after_redraw],
       [0,
        blur_event,
        input_event,
        checked_event,
        change_event,
        change_index_event,
        custom_event,
        make,
        parent,
        send_event,
        after_redraw$0],
       cmd,
       custom,
       merge,
       empty,
       register,
       run$0,
       dispose$0,
       dom,
       process,
       get,
       after_redraw$1];
   runtime.caml_register_global(112, Vdom_blit, "Vdom_blit");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ2ZG9tX2pzLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJ0aGVuIiwiZXJyb3IiLCJzdWNjZXNzIiwib2pzIiwiYWxwaGFfb2ZfanMiLCJ4MSIsIngiLCJ4NCIsInRfb2ZfanMiLCJ4OCIsInRfdG9fanMiLCJ4NyIsImxlbmd0aCIsIng5Iiwia2V5IiwieDExIiwieDEwIiwiZ2V0X2l0ZW0iLCJ4MTQiLCJ4MTMiLCJzZXRfaXRlbSIsIngxOCIsIngxNiIsIngxNyIsInJlbW92ZV9pdGVtIiwieDIwIiwieDE5IiwiY2xlYXIiLCJ4MjEiLCJ0X29mX2pzJDAiLCJ4MjMiLCJ0X3RvX2pzJDAiLCJ4MjIiLCJuZXdfcmVnX2V4cCIsIngyNCIsIngyNSIsIngyNiIsIngyNyIsInRfb2ZfanMkMSIsIngyOSIsInRfdG9fanMkMSIsIngyOCIsIm9mX3N0cmluZyIsInRvX3N0cmluZyIsImxlbmd0aCQwIiwieDMwIiwiY2hhcl9jb2RlX2F0IiwieDMyIiwieDMxIiwidG9fbG93ZXJfY2FzZSIsIngzMyIsInRvX3VwcGVyX2Nhc2UiLCJ4MzQiLCJjb25jYXQiLCJ4MzgiLCJ4MzUiLCJ4MzYiLCJ4MzciLCJpbmNsdWRlcyIsIng0MSIsIng0MCIsImVuZHNfd2l0aCIsIng0MyIsIng0MiIsImluZGV4X29mIiwieDQ1IiwieDQ0IiwicmVwZWF0IiwieDQ3IiwieDQ2Iiwic2VhcmNoIiwieDQ5IiwieDQ4IiwidHJpbSIsIng1MCIsInRfb2ZfanMkMiIsIng1MiIsInRfdG9fanMkMiIsIng1MSIsIm5ld19kYXRlIiwieDUzIiwibm93IiwicGFyc2UiLCJ4NTQiLCJnZXRfZGF0ZSIsIng1NSIsImdldF9kYXkiLCJ4NTYiLCJnZXRfZnVsbF95ZWFyIiwieDU3IiwiZ2V0X2hvdXJzIiwieDU4IiwiZ2V0X21pbGxpc2Vjb25kcyIsIng1OSIsImdldF9taW51dGVzIiwieDYwIiwiZ2V0X21vbnRoIiwieDYxIiwiZ2V0X3NlY29uZHMiLCJ4NjIiLCJnZXRfdGltZSIsIng2MyIsImdldF90aW1lem9uZV9vZmZzZXQiLCJ4NjQiLCJnZXRfVVRDX2RhdGUiLCJ4NjUiLCJnZXRfVVRDX2RheSIsIng2NiIsImdldF9VVENfZnVsbF95ZWFyIiwieDY3IiwiZ2V0X1VUQ19ob3VycyIsIng2OCIsImdldF9VVENfbWlsbGlzZWNvbmRzIiwieDY5IiwiZ2V0X1VUQ19taW51dGVzIiwieDcwIiwiZ2V0X1VUQ19tb250aCIsIng3MSIsImdldF9VVENfc2Vjb25kcyIsIng3MiIsImdldF95ZWFyIiwieDczIiwic2V0X2RhdGUiLCJ4NzUiLCJ4NzQiLCJzZXRfZnVsbF95ZWFyIiwieDc3IiwieDc2Iiwic2V0X2hvdXJzIiwieDc5IiwieDc4Iiwic2V0X21pbGxpc2Vjb25kcyIsIng4MSIsIng4MCIsInNldF9taW51dGVzIiwieDgzIiwieDgyIiwic2V0X21vbnRoIiwieDg1IiwieDg0Iiwic2V0X3NlY29uZHMiLCJ4ODciLCJ4ODYiLCJzZXRfdGltZSIsIng4OSIsIng4OCIsInNldF9VVENfZGF0ZSIsIng5MSIsIng5MCIsInNldF9VVENfZnVsbF95ZWFyIiwieDkzIiwieDkyIiwic2V0X1VUQ19ob3VycyIsIng5NSIsIng5NCIsInNldF9VVENfbWlsbGlzZWNvbmRzIiwieDk3IiwieDk2Iiwic2V0X1VUQ19taW51dGVzIiwieDk5IiwieDk4Iiwic2V0X1VUQ19tb250aCIsIngxMDEiLCJ4MTAwIiwic2V0X1VUQ19zZWNvbmRzIiwieDEwMyIsIngxMDIiLCJzZXRfeWVhciIsIngxMDUiLCJ4MTA0IiwidG9fZGF0ZV9zdHJpbmciLCJ4MTA2IiwidG9fR01UX3N0cmluZyIsIngxMDciLCJ0b19JU09fc3RyaW5nIiwieDEwOCIsInRvX2xvY2FsZV9zdHJpbmciLCJ4MTA5IiwidG9fc3RyaW5nJDAiLCJ4MTEwIiwidG9fdGltZV9zdHJpbmciLCJ4MTExIiwidG9fVVRDX3N0cmluZyIsIngxMTIiLCJ0X29mX2pzJDMiLCJ4MTE0IiwidF90b19qcyQzIiwieDExMyIsImNyZWF0ZSIsIngxMTUiLCJvcHRpb25zIiwieDExOCIsIngxMTkiLCJ4MTIwIiwieDEyMiIsIngxMjEiLCJ0X29mX2pzJDQiLCJ4MTI0IiwidF90b19qcyQ0IiwieDEyMyIsImNyZWF0ZSQwIiwieDEyNSIsIngxMjYiLCJ4MTI3IiwieDEyOSIsIngxMjgiLCJzaXplIiwieDEzMCIsInR5cGUiLCJ4MTMxIiwidGV4dCIsIngxMzIiLCJmIiwidF9vZl9qcyQ1IiwieDEzNSIsInRfdG9fanMkNSIsIngxMzQiLCJvcHRpb25zJDAiLCJ4MTM4IiwieDEzOSIsIngxNDAiLCJ4MTQyIiwieDE0MSIsImNyZWF0ZSQxIiwieDE0MyIsIngxNDUiLCJ4MTQ2IiwibmFtZSIsIngxNDciLCJ0X29mX2pzJDYiLCJ4MTQ5IiwidF90b19qcyQ2IiwieDE0OCIsImZpbGVzIiwieDE1MCIsImdldF9kYXRhIiwieDE1MyIsIngxNTIiLCJ0X29mX2pzJDciLCJ4MTU1IiwidF90b19qcyQ3IiwieDE1NCIsImtpbmRfdG9fanMiLCJ4MTU2IiwieDE1NyIsInRhcmdldCIsIngxNjEiLCJyZWxhdGVkX3RhcmdldCIsIngxNjIiLCJ4MTYzIiwicHJldmVudF9kZWZhdWx0IiwieDE2NCIsInN0b3BfcHJvcGFnYXRpb24iLCJ4MTY1IiwidHlwZSQwIiwieDE2NiIsImluaXRfZXZlbnQiLCJ4MTcwIiwieDE2NyIsIngxNjgiLCJ4MTY5IiwiY2xpZW50X3giLCJ4MTcxIiwiY2xpZW50X3kiLCJ4MTcyIiwicGFnZV94IiwieDE3MyIsInBhZ2VfeSIsIngxNzQiLCJzY3JlZW5feCIsIngxNzUiLCJzY3JlZW5feSIsIngxNzYiLCJtb3ZlbWVudF94IiwieDE3NyIsIm1vdmVtZW50X3kiLCJ4MTc4IiwiYnV0dG9ucyIsIngxNzkiLCJhbHRfa2V5IiwieDE4MCIsImN0cmxfa2V5IiwieDE4MSIsInNoaWZ0X2tleSIsIngxODIiLCJ3aGljaCIsIngxODMiLCJjb2RlIiwieDE4NCIsImtleSQwIiwieDE4NSIsImRlbHRhX3kiLCJ4MTg2IiwiZGVsdGFfeCIsIngxODciLCJkYXRhX3RyYW5zZmVyIiwieDE4OCIsImNsaXBib2FyZF9kYXRhIiwieDE4OSIsImRhdGEiLCJ4MTkwIiwib3JpZ2luIiwieDE5MSIsInN0YXRlIiwieDE5MiIsInRfb2ZfanMkOCIsIngxOTQiLCJ0X3RvX2pzJDgiLCJ4MTkzIiwiaGVpZ2h0IiwieDE5NSIsIndpZHRoIiwieDE5NiIsImxlZnQiLCJ4MTk3IiwicmlnaHQiLCJ4MTk4IiwidG9wIiwieDE5OSIsImJvdHRvbSIsIngyMDAiLCJ0X29mX2pzJDkiLCJ4MjAyIiwidF90b19qcyQ5IiwieDIwMSIsIngyMDMiLCJ5IiwieDIwNCIsImhlaWdodCQwIiwieDIwNSIsIndpZHRoJDAiLCJ4MjA2IiwidF9vZl9qcyQxMCIsIngyMDgiLCJ0X3RvX2pzJDEwIiwieDIwNyIsInNldCIsInN0eWxlIiwicHJvcCIsInZhbHVlIiwic2V0X2NvbG9yIiwieDIwOSIsIngyMTAiLCJzZXRfYm9yZGVyIiwieDIxMSIsIngyMTIiLCJzZXRfYmFja2dyb3VuZCIsIngyMTMiLCJ4MjE0Iiwic2V0X2JhY2tncm91bmRfY29sb3IiLCJ4MjE1IiwieDIxNiIsInNldF9oZWlnaHQiLCJ4MjE3IiwieDIxOCIsInNldF93aWR0aCIsIngyMTkiLCJ4MjIwIiwic2V0X2JvdHRvbSIsIngyMjEiLCJ4MjIyIiwic2V0X2xlZnQiLCJ4MjIzIiwieDIyNCIsInNldF90b3AiLCJ4MjI1IiwieDIyNiIsInNldF9yaWdodCIsIngyMjciLCJ4MjI4Iiwic2V0X3Bvc2l0aW9uIiwieDIyOSIsIngyMzAiLCJzZXRfY3Vyc29yIiwieDIzMSIsIngyMzIiLCJzZXRfZGlzcGxheSIsIngyMzMiLCJ4MjM0Iiwic2V0X3Zpc2liaWxpdHkiLCJ4MjM1IiwieDIzNiIsImdldCIsInVuc2V0IiwidF9vZl9qcyQxMSIsIngyMzgiLCJ0X3RvX2pzJDExIiwieDIzNyIsImFkZCIsIngyNDAiLCJ4MjM5IiwicmVtb3ZlIiwieDI0MiIsIngyNDEiLCJjb250YWlucyIsIngyNDQiLCJ4MjQzIiwicmVwbGFjZSIsIngyNDciLCJ4MjQ1IiwieDI0NiIsInRvZ2dsZSIsIngyNTAiLCJ4MjQ4IiwieDI0OSIsInRfb2ZfanMkMTIiLCJ4MjUyIiwidF90b19qcyQxMiIsIngyNTEiLCJudWxsJDAiLCJpZCIsIngyNTMiLCJzZXRfaWQiLCJ4MjU0IiwieDI1NSIsIm5vZGVfdHlwZSIsIngyNTkiLCJ4MjU3IiwiY2xvbmVfbm9kZSIsIngyNjEiLCJ4MjYwIiwiY29udGFpbnMkMCIsIngyNjMiLCJ4MjYyIiwiYXBwZW5kX2NoaWxkIiwieDI2NSIsIngyNjQiLCJpbnNlcnRfYmVmb3JlIiwieDI2OCIsIngyNjYiLCJ4MjY3IiwicmVwbGFjZV9jaGlsZCIsIngyNzEiLCJ4MjY5IiwieDI3MCIsInJlbW92ZV9jaGlsZCIsIngyNzMiLCJ4MjcyIiwiZmlyc3RfY2hpbGQiLCJ4Mjc0IiwibGFzdF9jaGlsZCIsIngyNzUiLCJuZXh0X3NpYmxpbmciLCJ4Mjc2IiwicmVtb3ZlX2FsbF9jaGlsZHJlbiIsImNoaWxkJDEiLCJjaGlsZCIsImNoaWxkJDAiLCJoYXNfY2hpbGRfbm9kZXMiLCJ4Mjc3IiwiYWRkX2V2ZW50X2xpc3RlbmVyIiwieDI4MiIsIngyNzgiLCJ4Mjc5IiwieDI4MSIsIngyODAiLCJhZGRfY2FuY2VsbGFibGVfZXZlbnRfbGlzdGVuZXIiLCJ4Mjg2IiwieDI4MyIsIngyODUiLCJ4Mjg0IiwiaW5uZXJfdGV4dCIsIngyOTEiLCJnZXRfZWxlbWVudHNfYnlfdGFnX25hbWUiLCJ4MjkzIiwieDI5MiIsImdldF9lbGVtZW50c19ieV9jbGFzc19uYW1lIiwieDI5NiIsIngyOTUiLCJoYXNfYXR0cmlidXRlIiwieDI5OSIsIngyOTgiLCJnZXRfYXR0cmlidXRlIiwieDMwMSIsIngzMDAiLCJyZW1vdmVfYXR0cmlidXRlIiwieDMwMyIsIngzMDIiLCJzZXRfYXR0cmlidXRlIiwieDMwNiIsIngzMDQiLCJ4MzA1IiwiZ2V0X2JvdW5kaW5nX2NsaWVudF9yZWN0IiwieDMwNyIsImdldF9ib3VuZGluZ19ib3giLCJ4MzA4IiwiYXR0YWNoX3NoYWRvdyIsIm1vZGUiLCJlbGVtZW50Iiwibm9ybWFsaXplIiwieDMxNiIsIngzMTciLCJzZXRfdmFsdWUiLCJ4MzE4IiwieDMxOSIsInNlbGVjdCIsIngzMjAiLCJmaWxlcyQwIiwieDMyMSIsInN1Ym1pdCIsIngzMjMiLCJzaG93X3BpY2tlciIsIngzMjQiLCJzZWxlY3RlZF9pbmRleCIsIngzMjUiLCJjaGVja2VkIiwieDMyNiIsInNldF9jaGVja2VkIiwieDMyNyIsIngzMjgiLCJub2RlX3ZhbHVlIiwieDMyOSIsInNldF9ub2RlX3ZhbHVlIiwieDMzMCIsIngzMzEiLCJwYXJlbnRfbm9kZSIsIngzMzIiLCJub2RlX25hbWUiLCJ4MzMzIiwiZGlzcGF0Y2hfZXZlbnQiLCJ4MzM1IiwieDMzNCIsIngzMzYiLCJpbm5lcl9IVE1MIiwieDMzNyIsIm91dGVyX0hUTUwiLCJ4MzM4Iiwic2V0X2lubmVyX0hUTUwiLCJ4MzM5IiwieDM0MCIsInNldF90ZXh0X2NvbnRlbnQiLCJ4MzQxIiwieDM0MiIsInNldF9jbGFzc19uYW1lIiwieDM0MyIsIngzNDQiLCJjbGFzc19uYW1lIiwieDM0NSIsImNsaWVudF93aWR0aCIsIngzNDYiLCJjbGllbnRfaGVpZ2h0IiwieDM0NyIsInNjcm9sbF93aWR0aCIsIngzNDgiLCJzY3JvbGxfaGVpZ2h0IiwieDM0OSIsIndpZHRoJDEiLCJ4MzUwIiwiaGVpZ2h0JDEiLCJ4MzUxIiwib2Zmc2V0X3BhcmVudCIsIngzNTIiLCJvZmZzZXRfdG9wIiwieDM1NCIsIm9mZnNldF9sZWZ0IiwieDM1NSIsIm9mZnNldF93aWR0aCIsIngzNTYiLCJvZmZzZXRfaGVpZ2h0IiwieDM1NyIsInNjcm9sbF90b3AiLCJ4MzU4Iiwic2V0X3Njcm9sbF90b3AiLCJ4MzU5IiwieDM2MCIsInNjcm9sbF9pbnRvX3ZpZXciLCJ4MzYyIiwieDM2MSIsImZvY3VzIiwieDM2MyIsImJsdXIiLCJ4MzY0IiwiYmVoYXZpb3JfdG9fanMiLCJ4MzY5Iiwic2Nyb2xsX2ludG9fdmlld19vcHRpb25zIiwieDM3MyIsIngzNzIiLCJzY3JvbGxfYnkiLCJ4Mzc5IiwieDM3OCIsInNlbGVjdGlvbl9zdGFydCIsIngzODAiLCJzZWxlY3Rpb25fZW5kIiwieDM4MSIsInNldF9zZWxlY3Rpb25fc3RhcnQiLCJ4MzgyIiwieDM4MyIsInNldF9zZWxlY3Rpb25fZW5kIiwieDM4NCIsIngzODUiLCJyZW1vdmUkMCIsIngzODYiLCJjbGljayIsIngzODciLCJxdWVyeV9zZWxlY3RvciIsIngzODkiLCJ4Mzg4IiwicXVlcnlfc2VsZWN0b3JfYWxsIiwieDM5MSIsIngzOTAiLCJjbGFzc19saXN0IiwieDM5MyIsInRfb2ZfanMkMTMiLCJ4Mzk1IiwidF90b19qcyQxMyIsIngzOTQiLCJjcmVhdGVfZWxlbWVudCIsIngzOTciLCJ4Mzk2IiwiY3JlYXRlX2VsZW1lbnRfbnMiLCJ4NDAwIiwieDM5OCIsIngzOTkiLCJjcmVhdGVfdGV4dF9ub2RlIiwieDQwMiIsIng0MDEiLCJjcmVhdGVfZXZlbnQiLCJ4NDA0IiwieDQwMyIsImdldF9lbGVtZW50X2J5X2lkIiwieDQwNiIsIng0MDUiLCJnZXRfZWxlbWVudHNfYnlfY2xhc3NfbmFtZSQwIiwieDQwOSIsIng0MDgiLCJib2R5IiwieDQxMSIsImRvY3VtZW50X2VsZW1lbnQiLCJ4NDEyIiwiYWN0aXZlX2VsZW1lbnQiLCJ4NDEzIiwiY29va2llIiwieDQxNCIsInNldF9jb29raWUiLCJ4NDE1IiwieDQxNiIsInNldF90aXRsZSIsIng0MTciLCJ4NDE4Iiwib3BlbiIsIng0MjQiLCJ4NDE5IiwieDQyMCIsIng0MjEiLCJ4NDIzIiwieDQyMiIsIndyaXRlIiwieDQyNyIsIng0MjYiLCJ3cml0ZWxuIiwieDQyOSIsIng0MjgiLCJjbG9zZSIsIng0MzAiLCJleGVjX2NvbW1hbmQiLCJ4NDMyIiwieDQzMSIsInF1ZXJ5X3NlbGVjdG9yJDAiLCJ4NDM0IiwieDQzMyIsInF1ZXJ5X3NlbGVjdG9yX2FsbCQwIiwieDQzNiIsIng0MzUiLCJyZW1vdmVfYWxsX3NlbGVjdGlvbl9yYW5nZXMiLCJ4NDM4IiwidF9vZl9qcyQxNCIsIng0NDAiLCJ0X3RvX2pzJDE0IiwieDQzOSIsImxlbmd0aCQxIiwieDQ0MSIsImJhY2siLCJ4NDQyIiwiZm9yd2FyZCIsIng0NDMiLCJnbyIsIng0NDciLCJ4NDQ0IiwieDQ0NSIsIng0NDUkMCIsIng0NDYiLCJyZXBsYWNlX3N0YXRlIiwieDQ1MSIsIng0NDgiLCJ4NDQ5IiwieDQ1MCIsInB1c2hfc3RhdGUiLCJ4NDU1IiwieDQ1MiIsIng0NTMiLCJ4NDU0IiwidF9vZl9qcyQxNSIsIng0NTciLCJ0X3RvX2pzJDE1IiwieDQ1NiIsImdldF9oYXNoIiwic2V0X2hhc2giLCJ4NDU4IiwiaG9zdCIsIng0NTkiLCJzZXRfaG9zdCIsIng0NjAiLCJ4NDYxIiwiaG9zdG5hbWUiLCJ4NDYyIiwic2V0X2hvc3RuYW1lIiwieDQ2MyIsIng0NjQiLCJocmVmIiwic2V0X2hyZWYiLCJ4NDY1IiwicGF0aG5hbWUiLCJ4NDY2Iiwic2V0X3BhdGhuYW1lIiwieDQ2NyIsIng0NjgiLCJwb3J0IiwieDQ2OSIsInNldF9wb3J0IiwieDQ3MCIsIng0NzEiLCJwcm90b2NvbCIsIng0NzIiLCJzZXRfcHJvdG9jb2wiLCJ4NDczIiwieDQ3NCIsInNlYXJjaCQwIiwieDQ3NSIsInNldF9zZWFyY2giLCJ4NDc2IiwieDQ3NyIsIm9yaWdpbiQwIiwieDQ3OCIsImFzc2lnbiIsIng0ODAiLCJ4NDc5IiwicmVsb2FkIiwieDQ4NCIsIng0ODEiLCJ4NDgyIiwieDQ4MyIsInJlcGxhY2UkMCIsIng0ODciLCJ4NDg2IiwidF9vZl9qcyQxNiIsIng0ODkiLCJ0X3RvX2pzJDE2IiwieDQ4OCIsImFkZF9ldmVudF9saXN0ZW5lciQwIiwieDQ5OCIsIng0OTQiLCJ4NDk1IiwieDQ5NyIsIng0OTYiLCJhZGRfY2FuY2VsbGFibGVfZXZlbnRfbGlzdGVuZXIkMCIsIng1MDIiLCJ4NDk5IiwieDUwMSIsIng1MDAiLCJkb2N1bWVudCIsIng1MDciLCJzZXRfb25sb2FkIiwieDUwOCIsIng1MDkiLCJzZXRfaW50ZXJ2YWwiLCJ4NTEyIiwieDUxMCIsIng1MTEiLCJ4NDkzIiwic2V0X3RpbWVvdXQiLCJ4NTE1IiwieDUxMyIsIng1MTQiLCJ4NDkxIiwiY2xlYXJfdGltZW91dCIsIng1MTciLCJ4NTE2IiwiY2xlYXJfaW50ZXJ2YWwiLCJ4NTE5IiwieDUxOCIsInJlcXVlc3RfYW5pbWF0aW9uX2ZyYW1lIiwieDUyMiIsIng1MjAiLCJ4NTIxIiwib3BlbiQwIiwieDUzMiIsIng1MjMiLCJ4NTI0IiwieDUyNSIsIng1MjYiLCJ4NTI3IiwieDUzMSIsIng1MzAiLCJ4NTI5IiwieDUyOCIsImFsZXJ0IiwieDUzNSIsIng1MzQiLCJzZXNzaW9uX3N0b3JhZ2UiLCJ4NTM2IiwibG9jYWxfc3RvcmFnZSIsIng1MzgiLCJpbm5lcl93aWR0aCIsIng1NDAiLCJpbm5lcl9oZWlnaHQiLCJ4NTQxIiwicGFnZV94X29mZnNldCIsIng1NDIiLCJwYWdlX3lfb2Zmc2V0IiwieDU0MyIsInNjcm9sbF9ieSQwIiwieDU0NiIsIng1NDQiLCJ4NTQ1Iiwic2Nyb2xsX3RvIiwieDU0OSIsIng1NDciLCJ4NTQ4Iiwic2Nyb2xsX3RvX29wdGlvbnMiLCJ4NTU1IiwieDU1NCIsImhpc3RvcnkiLCJ4NTU2IiwibG9jYXRpb24iLCJ4NTU3IiwiZnJhbWVfZWxlbWVudCIsIng1NTgiLCJnZXRfY29tcHV0ZWRfc3R5bGUiLCJ4NTYwIiwieDU1OSIsImRlY29kZV9VUklfY29tcG9uZW50IiwieDU2MiIsIng1NjEiLCJldmVudF9zb3VyY2UiLCJ4NTYzIiwicG9zdF9tZXNzYWdlIiwieDU2NiIsIng1NjQiLCJ4NTY1IiwiY29udGVudF93aW5kb3ciLCJ4NTY3IiwiY29udGVudF9kb2N1bWVudCIsIng1NjkiLCJwYXJzZSQwIiwieDU3MSIsInN0cmluZ2lmeSIsIng1NzIiLCJ0X29mX2pzJDE3IiwieDU3NyIsInRfdG9fanMkMTciLCJ4NTc2IiwiY3JlYXRlJDIiLCJyZWFkeV9zdGF0ZSIsIng1NzgiLCJ4NTc0IiwicmVzdWx0IiwieDU3OSIsInNldF9vbmxvYWQkMCIsIng1ODAiLCJ4NTgxIiwicmVhZF9hc19iaW5hcnlfc3RyaW5nIiwieDU4MyIsIng1ODIiLCJyZWFkX2FzX3RleHQiLCJ4NTg1IiwieDU4NCIsInJlYWRfYXNfZGF0YV91cmwiLCJ4NTg3IiwieDU4NiIsInRfb2ZfanMkMTgiLCJ4NTg5IiwidF90b19qcyQxOCIsIng1ODgiLCJjcmVhdGUkMyIsIm9wZW4kMSIsIng1OTIiLCJ4NTkwIiwieDU5MSIsInNlbmQiLCJ4NTk0IiwieDU5MyIsInNldF9yZXF1ZXN0X2hlYWRlciIsIng1OTciLCJ4NTk1IiwieDU5NiIsImdldF9yZXNwb25zZV9oZWFkZXIiLCJ4NTk5IiwieDU5OCIsImdldF9hbGxfcmVzcG9uc2VfaGVhZGVycyIsIng2MDEiLCJzZXRfcmVzcG9uc2VfdHlwZSIsIng2MDIiLCJ4NjAzIiwib3ZlcnJpZGVfbWltZV90eXBlIiwieDYwNSIsIng2MDQiLCJzZXRfd2l0aF9jcmVkZW50aWFscyIsIng2MDYiLCJ4NjA3Iiwic3RhdHVzIiwieDYxMyIsInN0YXR1c190ZXh0IiwieDYxNCIsInJlYWR5X3N0YXRlJDAiLCJ4NjE1IiwieDYxMCIsInJlc3BvbnNlX3R5cGUiLCJ4NjE2IiwicmVzcG9uc2VfdGV4dCIsIng2MTciLCJyZXNwb25zZSIsIng2MTgiLCJyZXNwb25zZV9VUkwiLCJ4NjE5Iiwic2V0X29ucmVhZHlzdGF0ZWNoYW5nZSIsIng2MjAiLCJ4NjIxIiwidF9vZl9qcyQxOSIsIng2MjMiLCJ0X3RvX2pzJDE5IiwieDYyMiIsImNyZWF0ZSQ0IiwieDYyNyIsIng2MjgiLCJ4NjI5IiwieDYzMCIsInNlbmQkMCIsIng2MzMiLCJ4NjMyIiwiY2xvc2UkMCIsIng2MzkiLCJ4NjM0IiwieDYzNSIsIng2MzYiLCJ4NjM4IiwieDYzNyIsImJpbmFyeV90eXBlIiwieDY0MSIsInNldF9iaW5hcnlfdHlwZSIsIng2NDIiLCJ4NjQzIiwicmVhZHlfc3RhdGUkMSIsIng2NDQiLCJ4NjI1IiwiYWRkX2V2ZW50X2xpc3RlbmVyJDEiLCJ4NjQ5IiwieDY0NSIsIng2NDYiLCJ4NjQ4IiwieDY0NyIsImNvZGUkMCIsIng2NTIiLCJ3aW5kb3ciLCJkb2N1bWVudCQwIiwiY29udGV4dF9vZl9qcyIsIng2NTQiLCJjb250ZXh0X3RvX2pzIiwieDY1MyIsImdyYWRpZW50X29mX2pzIiwieDY1NiIsImdyYWRpZW50X3RvX2pzIiwieDY1NSIsImdldF9jb250ZXh0Iiwib3B0IiwiY2FudmFzIiwic3RoIiwiYWxwaGEiLCJ0b19kYXRhX1VSTCIsIng2NjUiLCJzZXRfZmlsbF9zdHlsZSIsIng2NjYiLCJ4NjY3IiwieDY2OSIsIng2NjgiLCJzZXRfc3Ryb2tlX3N0eWxlIiwieDY3MCIsIng2NzEiLCJ4NjczIiwieDY3MiIsInNldF9saW5lX3dpZHRoIiwieDY3NCIsIng2NzUiLCJjcmVhdGVfbGluZWFyX2dyYWRpZW50IiwieDY4MCIsIng2NzYiLCJ4Njc3IiwieDY3OCIsIng2NzkiLCJhZGRfY29sb3Jfc3RvcCIsIng2ODMiLCJ4NjgxIiwieDY4MiIsImJlZ2luX3BhdGgiLCJ4Njg0IiwiY2xvc2VfcGF0aCIsIng2ODUiLCJhcmMiLCJ4NjkxIiwieDY4NiIsIng2ODciLCJ4Njg4IiwieDY4OSIsIng2OTAiLCJtb3ZlX3RvIiwieDY5NCIsIng2OTIiLCJ4NjkzIiwibGluZV90byIsIng2OTciLCJ4Njk1IiwieDY5NiIsImZpbGwiLCJ4Njk4Iiwic3Ryb2tlIiwieDY5OSIsInN0cm9rZV9yZWN0IiwieDcwNCIsIng3MDAiLCJ4NzAxIiwieDcwMiIsIng3MDMiLCJmaWxsX3JlY3QiLCJ4NzA5IiwieDcwNSIsIng3MDYiLCJ4NzA3IiwieDcwOCIsInNldF9mb250IiwieDcxMCIsIng3MTEiLCJmaWxsX3RleHQiLCJ4NzE1IiwieDcxMiIsIng3MTMiLCJ4NzE0Iiwic3Ryb2tlX3RleHQiLCJ4NzE5IiwieDcxNiIsIng3MTciLCJ4NzE4IiwidF9vZl9qcyQyMCIsIng3MjEiLCJ0X3RvX2pzJDIwIiwieDcyMCIsIndpZHRoJDIiLCJ4NzIyIiwibWVhc3VyZV90ZXh0IiwieDcyNCIsIng3MjMiLCJyb3RhdGUiLCJ4NzI2IiwieDcyNSIsInRyYW5zbGF0ZSIsIng3MjkiLCJ4NzI3IiwieDcyOCIsInNjYWxlIiwieDczMiIsIng3MzAiLCJ4NzMxIiwiY2xlYXJfcmVjdCIsIng3MzciLCJ4NzMzIiwieDczNCIsIng3MzUiLCJ4NzM2Iiwibm93JDAiLCJsb2ciLCJ4NzQxIiwieDc0MCIsInRpbWUiLCJ4NzQzIiwieDc0MiIsInRpbWVfZW5kIiwieDc0NSIsIng3NDQiLCJjb25zb2xlIiwidF9vZl9qcyQyMSIsIng3NDciLCJ0X3RvX2pzJDIxIiwieDc0NiIsImZyb21fYnVmZmVyIiwieDc0OCIsImNyZWF0ZSQ1IiwieDc0OSIsInNldCQwIiwieDc1MyIsIng3NTAiLCJ4NzUyIiwibGVuZ3RoJDIiLCJ4NzU0IiwicmFuZG9tIiwieDc1NSIsInRvX2FycmF5IiwieDc1NiIsImdldCQwIiwiYSIsImkiLCJmcm9tIiwieDc1OCIsIng3NTkiLCJ4NzYwIiwib2ZfYmxvYiIsIng3NjEiLCJvZl9maWxlIiwieDc2MiIsInJldm9rZSIsIng3NjMiLCJ0X29mX2pzJDIyIiwieDc2NSIsInRfdG9fanMkMjIiLCJ4NzY0IiwidW5pdF90eXBlIiwieDc2NiIsInZhbHVlJDAiLCJ4NzY3IiwidmFsdWVfYXNfc3RyaW5nIiwieDc2OCIsInZhbHVlX2luX3NwZWNpZmllZF91bml0cyIsIng3NjkiLCJ0X29mX2pzJDIzIiwieDc3MSIsInRfdG9fanMkMjMiLCJ4NzcwIiwiYW5pbV92YWwiLCJ4NzcyIiwiYmFzZV92YWwiLCJ4NzczIiwiZW5jb2RlIiwieDc3NCIsImRlY29kZSIsIng3NzUiLCJ0X29mX2pzJDI0IiwieDc3NyIsInRfdG9fanMkMjQiLCJ4Nzc2IiwiYmxvYiIsIng3NzgiLCJ4Nzc5IiwiZmV0Y2giLCJ4NzgwIiwidF9vZl9qcyQyNSIsIng3ODMiLCJ0X3RvX2pzJDI1IiwieDc4MiIsImNyZWF0ZSQ2IiwieDc4NCIsIng3ODUiLCJ4Nzg2IiwiZGVjb2RlJDAiLCJ4Nzg4IiwieDc4NyIsInRfb2ZfanMkMjYiLCJ4NzkwIiwidF90b19qcyQyNiIsIng3ODkiLCJjbGllbnRfZGF0YV9qc29uIiwieDc5MSIsImF0dGVzdGF0aW9uX29iamVjdCIsIng3OTIiLCJ0X29mX2pzJDI3IiwieDc5NCIsInRfdG9fanMkMjciLCJ4NzkzIiwiY2xpZW50X2RhdGFfanNvbiQwIiwieDc5NSIsImF1dGhlbnRpY2F0b3JfZGF0YSIsIng3OTYiLCJzaWduYXR1cmUiLCJ4Nzk3IiwidXNlcl9oYW5kbGUiLCJ4Nzk4IiwidF9vZl9qcyQyOCIsIng4MDAiLCJ0X3RvX2pzJDI4IiwieDc5OSIsInR5cGUkMSIsIng4MDEiLCJpZCQwIiwieDgwMiIsInJhd19pZCIsIng4MDMiLCJyZXNwb25zZSQwIiwieDgwNCIsInRfb2ZfanMkMjkiLCJ4ODA2IiwidF90b19qcyQyOSIsIng4MDUiLCJycF9vcHRpb25zIiwieDgwOSIsIng4MTAiLCJ4ODExIiwieDgxMyIsIng4MTIiLCJ1c2VyX29wdGlvbnMiLCJ4ODE2IiwieDgxNyIsIng4MTgiLCJ4ODE5IiwieDgyMiIsIng4MjEiLCJ4ODIwIiwia2V5X3BhcmFtX3RvX2pzIiwieDgyMyIsImtleV9wYXJhbSIsIng4MjUiLCJ4ODI2IiwieDgyNyIsIng4MjkiLCJ4ODI4IiwiYXV0aGVudGljYXRvcl9vcHRpb25zIiwieDgzMiIsIng4MzMiLCJ4ODM0IiwieDgzNSIsIng4MzYiLCJ4ODQwIiwieDgzOSIsIng4MzgiLCJ4ODM3IiwicHVibGljX2tleV9vcHRpb25zIiwieDg0MyIsIng4NDQiLCJ4ODQ1IiwieDg0NiIsIng4NDciLCJ4ODQ4IiwieDg0OSIsIng4NTAiLCJ4ODUxIiwieDg2MSIsIng4NjAiLCJ4ODU5IiwieDg1NyIsIng4NTYiLCJ4ODU0IiwieDg1NSIsIng4NTMiLCJ4ODUyIiwiY3JlYXRlX29wdGlvbnMiLCJ4ODY0IiwieDg2NSIsIng4NjYiLCJjcmVhdGUkNyIsIng4NjciLCJ4ODY4IiwiY3JlZGVudGlhbF9kZXNjcmlwdG9yX3RvX2pzIiwieDg2OSIsImNyZWRlbnRpYWxfZGVzY3JpcHRvciIsIng4NzEiLCJ4ODcyIiwieDg3MyIsIng4NzQiLCJ4ODc3IiwieDg3NiIsIng4NzUiLCJnZXRfcHVibGljX2tleV9vcHRpb25zIiwieDg4MCIsIng4ODEiLCJ4ODgyIiwieDg4MyIsIng4ODQiLCJ4ODg1IiwieDg4NiIsIng4OTMiLCJ4ODkyIiwieDg5MSIsIng4ODkiLCJ4ODg4IiwieDg4NyIsImdldF9vcHRpb25zX3RvX2pzIiwieDg5NCIsImdldF9vcHRpb25zIiwieDg5NiIsIng4OTciLCJ4ODk4IiwiZ2V0JDEiLCJ4ODk5IiwieDkwMCIsImJsdXJfZXZlbnQiLCJlbXB0eSIsInN0cmluZ19vZl9zdGVwIiwibiIsInMiLCJzdHJpbmdfb2ZfZXJyb3Jfa2luZCIsInMkMCIsInMkMSIsImdvdCIsImV4cGVjdGVkIiwic3RyaW5nX29mX2Vycm9yIiwicGF0aCIsImVycmsiLCJlcnJrJDAiLCJ0eXBlcnIiLCJ0eSIsInN0cmluZyIsIm9iaiIsImludCQwIiwiZmxvYXQkMCIsImJvb2wiLCJvYmplY3QiLCJldmFsJDAiLCJleHRyYV9maWVsZHMiLCJkIiwibyIsImQkMCIsIm8kMSIsImtleXMkMCIsImtleXMiLCJkJDEiLCJhcmciLCJkJDIiLCJhcmckMCIsImIiLCJhcmckMSIsImQkMyIsImQkNCIsImVyciIsIm1zZyIsImYkMCIsImQkNSIsImQkNiIsImwiLCJsb29wIiwiYWNjIiwieHMiLCJtc2ckMCIsImQkNyIsImQkOCIsImRlY29kZV9mYWlsIiwicmVzIiwiY29udmVydF9hcmciLCJsJDAiLCJlIiwiY29udGFpbmVyIiwiY3R4Iiwic2VuZF9tc2ciLCJhZnRlcl9yZWRyYXciLCJydW4iLCJhZnRlciIsImgiLCJlbHQiLCJwJDAiLCJ4JDAiLCJjbWQiLCJwIiwiY21kJDAiLCJ0bCIsImhkIiwiaW5wdXRfZXZlbnQiLCJjaGVja2VkX2V2ZW50IiwiY2hhbmdlX2V2ZW50IiwiY2hhbmdlX2luZGV4X2V2ZW50IiwiY3VzdG9tX2V2ZW50IiwibWFrZSIsInN5bmMiLCJkb20iLCJkaXNwb3NlIiwicGFyZW50Iiwic2VuZF9ldmVudCIsImFmdGVyX3JlZHJhdyQwIiwiZ2V0X2RvbXMiLCJwYXJhbSIsImdldF92ZG9tIiwiZXZhbF9wcm9wIiwieCQxIiwieCQyIiwic3RyaW5nX29mX3Byb3AiLCJzYW1lX3Byb3AiLCJ2MSIsInYyIiwieDIiLCJ4MiQwIiwieDEkMCIsIngyJDEiLCJ4MSQxIiwieDIkMiIsIngxJDIiLCJibWVtbyIsInZkb20iLCJpc192aXNpYmxlIiwiYm91bmRpbmciLCJjdXN0b21fYXR0cmlidXRlIiwidiIsImFsaWduX3RvcCIsImV4biQwIiwiZXhuIiwiZG9fZm9jdXMiLCJhcHBseV9lZmZlY3RfcHJvcCIsInNldF9zdHlsZSIsImsiLCJhcHBseV9zcGVjaWFsX3Byb3AiLCJucyIsImNsYXNzX29iaiIsImpzX2VtcHR5X3N0cmluZyIsImN1c3RvbSIsIm1lcmdlIiwiZW52cyIsImdsb2JhbCIsInJlZ2lzdGVyIiwiYXBwbHlfYXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJ2JDAiLCJrJDAiLCJldmVudF90eXBlIiwidiQxIiwiayQxIiwidHh0IiwiY2hpbGRyZW4iLCJjaGlsZHJlbiQwIiwiZG9tcyIsImNoaWxkcmVuJDEiLCJ0YWciLCJkb20kMCIsImNoaWxkcmVuJDIiLCJjIiwicHJvcGFnYXRlX2V2ZW50cyIsImF0dHJpYnV0ZXMkMCIsImhhbmRsZXJzIiwicHJvY2Vzc19jdXN0b20iLCJlbCIsImVsdCQwIiwibnMkMCIsImJsaXQiLCJzeW5jX3Byb3BzIiwic2FtZSIsImwxIiwibDIiLCJzb3J0IiwiazIiLCJrMSIsImwxJDAiLCJsMiQwIiwibDEkMSIsImwyJDEiLCJ0bDEiLCJ0bDIiLCJ0bDIkMCIsInYyJDAiLCJ0bDIkMSIsInYyJDEiLCJrMiQwIiwiY2hvb3NlIiwianNfZmFsc2UiLCJqc196ZXJvIiwic3luY19hdHRyaWJ1dGVzIiwiYTEiLCJhMiIsInByb3BzIiwianNfZW1wdHlfc3RyaW5nJDAiLCJzdHlsZXMiLCJjbGVhciQwIiwiYXR0cnMiLCJzZXQkMSIsImNsZWFyJDEiLCJjdHJsIiwiY3RybCQwIiwicHJldl9tb3ZlIiwibmV4dCIsIm9sZCIsInMyIiwiczEiLCJtYXRjaCQwIiwic3luY19jaGlsZHJlbiIsImUxIiwiYzIiLCJjMSIsImYyIiwiYzEkMCIsImYxIiwiYTIkMCIsImFyZzIiLCJrZXkyIiwiYTEkMCIsImFyZzEiLCJrZXkxIiwidDIiLCJoMiIsInQxIiwiaDEiLCJvbGRfY2hpbGRyZW4iLCJuZXdfY2hpbGRyZW4iLCJvbGRfY2hpbGRyZW4kMCIsIm5ld19jaGlsZHJlbiQwIiwiYnlfa2V5IiwiaSQxIiwiaW5kaWNlcyIsImkkMCIsImlkeCQwIiwidG9fcmVtb3ZlIiwiY3RybHMiLCJwcmV2X21vdmUkMCIsIm5leHQkMCIsImlkeCIsImNfZG9tIiwicmlnaHRfbW9zdCIsIm1vdmUiLCJmb3VuZCIsIm1hcHBlciQwIiwiaW5uZXIkMCIsImlubmVyJDEiLCJtYXBwZXIiLCJ2ZG9tX29mX2RvbSIsInJvb3QiLCJpbm5lciIsInBhcmVudCQwIiwicHJvY2VzcyIsImFmdGVyX3JlZHJhdyQxIiwicnVuJDAiLCJlbnYiLCJ2aWV3IiwidXBkYXRlIiwiY21kMCIsIm1vZGVsMCIsImVudiQwIiwiY29udGFpbmVyJDAiLCJjb250YWluZXIkMSIsImNvbnRhaW5lcl9jcmVhdGVkIiwiY29udGFpbmVyJDIiLCJwb3N0X3JlZHJhdyIsImZsdXNoIiwicHJvY2Vzc19jdXN0b21fZndkIiwicHJvY2Vzc19md2QiLCJsaXN0ZW5lcnMiLCJtb2RlbCIsImN1cnJlbnQiLCJwZW5kaW5nX3JlZHJhdyIsInZpZXckMCIsIm9uX2V2ZW50IiwiZXZ0IiwidGd0IiwiYXR0cmlidXRlIiwibWFwIiwiZGVjb2RlciIsInN0b3BwZWRfcHJvcGFnYXRpb24iLCJzdG9wcGVkX3Byb3BhZ2F0aW9uJDAiLCJzMiQwIiwiYWRkX2xpc3RlbmVyIiwicmVtb3ZlX2xpc3RlbmVyIiwicmVkcmF3IiwibmV3X21vZGVsIiwicnVuX2NtZCIsImV2ZW50IiwicHJvY2VzcyQwIiwic2VsZWN0X2hhbmRsZXIiLCJhdHRyIiwiZXQxIiwiZW5jb2RlciIsImV0MiIsIm1zZ3MiLCJkaXNwb3NlJDAiXSwic291cmNlcyI6WyIvaG9tZS91c2VyLy5vcGFtLzQuMTQuMC9saWIvdmRvbS9qc19icm93c2VyLm1sIiwiL2hvbWUvdXNlci8ub3BhbS80LjE0LjAvbGliL3Zkb20vdmRvbV9ibGl0Lm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7O1lBa0JRQSxLQUFPQyxPQUFRQztRQVJaQyxnQkFRc0JDO2FBUFhDLEdBUVFDLEdBQUssT0FBUSxXQURwQkosU0FDb0IsV0FEVkUsYUFDSEUsSUFBNEI7SUFUL0NIO01BS1EsZ0NBSkdFO01BSWtCOztpQkFDU0UsSUFDSCxPQUFBLGdDQURHQSxJQUNlO1FBQ2pETjtJQUpEOztZQVVGTyxRQUE0QkMsSUFBZSxPQUFmQSxHQUFpQjtZQUNqREMsUUFBNEJDLElBQWUsT0FBZkEsR0FBaUI7WUFDNUNDLE9BRDJCQyxJQUc1QixPQUg0QkEsZUFHNEI7WUFDdkRDLElBSjJCQyxLQU12QkM7SUFFRCxXQVJ3QkQsUUFNdkJDO0lBRUQsT0FBQTtHQUFzRDtZQUN6REMsU0FUMkJDLEtBV3ZCQztJQUVELFdBYndCRCxZQWFZLG9CQUZuQ0M7SUFFRCxPQUFBO0dBQTZEO1lBQ2hFQyxTQWQyQkMsS0FnQnZCQyxLQUNFQztJQWpCcUJGLFlBb0JqQixvQkFKTkMsTUFJNkIsb0JBSDNCQztJQUVEO0dBQ3FEO1lBQzFEQyxZQXJCMkJDLEtBdUJ2QkM7SUF2QnVCRCxlQXlCZSxvQkFGdENDO0lBRUQ7R0FBZ0U7WUFDbkVDLE1BMUIyQkMsS0FBQUEsYUEyQk4sU0FBcUM7R0E5QmpFOzs7T0FFVXBCO09BQ0pFO09BQ0NFO09BR0FFO09BS0FHO09BS0FHO09BT0FJO09BS0FHO1lBTUdFLFVBQTRCQyxLQUFnQixPQUFo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ZW4gZ2VuZXJhdGVkIGJ5IGdlbl9qc19hcGkgISFcIl1cbltAQEBvY2FtbC53YXJuaW5nIFwiLTctMzItMzlcIl1cbm1vZHVsZSBQcm9taXNlID1cbiAgc3RydWN0XG4gICAgdHlwZSAnYSB0ID0gKChPanMudCAtPiAnYSkgKiBPanMudClcbiAgICBsZXQgdF9vZl9qcyBmIHggPSAoZiwgeClcbiAgICBsZXQgKHRoZW5fIDpcbiAgICAgIE9qcy50IC0+XG4gICAgICAgIHN1Y2Nlc3M6KE9qcy50IC0+IHVuaXQpIC0+IGVycm9yOihPanMudCAtPiB1bml0KSBvcHRpb24gLT4gdW5pdClcbiAgICAgID1cbiAgICAgIGZ1biAoeDYgOiBPanMudCkgLT5cbiAgICAgICAgZnVuIH5zdWNjZXNzOih4MSA6IE9qcy50IC0+IHVuaXQpIC0+XG4gICAgICAgICAgZnVuIH5lcnJvcjooeDMgOiAoT2pzLnQgLT4gdW5pdCkgb3B0aW9uKSAtPlxuICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgIChPanMuY2FsbCB4NiBcInRoZW5cIlxuICAgICAgICAgICAgICAgICBbfChPanMuZnVuX3RvX2pzIDEgeDEpOyhPanMub3B0aW9uX3RvX2pzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1biAoeDQgOiBPanMudCAtPiB1bml0KSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5mdW5fdG9fanMgMSB4NCkgeDMpfF0pXG4gICAgbGV0IHRoZW5fID9lcnJvciAgfnN1Y2Nlc3MgIChhbHBoYV9vZl9qcywgb2pzKSA9XG4gICAgICB0aGVuXyBvanMgfnN1Y2Nlc3M6KGZ1biB4IC0+IHN1Y2Nlc3MgKGFscGhhX29mX2pzIHgpKSB+ZXJyb3JcbiAgZW5kXG5tb2R1bGUgU3RvcmFnZSA9XG4gIHN0cnVjdFxuICAgIHR5cGUgdCA9IE9qcy50XG4gICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDggOiBPanMudCkgLT4geDhcbiAgICBhbmQgdF90b19qcyA6IHQgLT4gT2pzLnQgPSBmdW4gKHg3IDogT2pzLnQpIC0+IHg3XG4gICAgbGV0IChsZW5ndGggOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4OSA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4OSkgXCJsZW5ndGhcIilcbiAgICBsZXQgKGtleSA6IHQgLT4gaW50IC0+IHN0cmluZyBvcHRpb24pID1cbiAgICAgIGZ1biAoeDExIDogdCkgLT5cbiAgICAgICAgZnVuICh4MTAgOiBpbnQpIC0+XG4gICAgICAgICAgT2pzLm9wdGlvbl9vZl9qcyBPanMuc3RyaW5nX29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDExKSBcImtleVwiIFt8KE9qcy5pbnRfdG9fanMgeDEwKXxdKVxuICAgIGxldCAoZ2V0X2l0ZW0gOiB0IC0+IHN0cmluZyAtPiBzdHJpbmcgb3B0aW9uKSA9XG4gICAgICBmdW4gKHgxNCA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDEzIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5vcHRpb25fb2ZfanMgT2pzLnN0cmluZ19vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHgxNCkgXCJnZXRJdGVtXCIgW3woT2pzLnN0cmluZ190b19qcyB4MTMpfF0pXG4gICAgbGV0IChzZXRfaXRlbSA6IHQgLT4gc3RyaW5nIC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgxOCA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDE2IDogc3RyaW5nKSAtPlxuICAgICAgICAgIGZ1biAoeDE3IDogc3RyaW5nKSAtPlxuICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MTgpIFwic2V0SXRlbVwiXG4gICAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDE2KTsoT2pzLnN0cmluZ190b19qcyB4MTcpfF0pXG4gICAgbGV0IChyZW1vdmVfaXRlbSA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDIwIDogdCkgLT5cbiAgICAgICAgZnVuICh4MTkgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDIwKSBcInJlbW92ZUl0ZW1cIiBbfChPanMuc3RyaW5nX3RvX2pzIHgxOSl8XSlcbiAgICBsZXQgKGNsZWFyIDogdCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgyMSA6IHQpIC0+IGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDIxKSBcImNsZWFyXCIgW3x8XSlcbiAgZW5kXG5tb2R1bGUgUmVnRXhwID1cbiAgc3RydWN0XG4gICAgdHlwZSB0ID0gT2pzLnRcbiAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4MjMgOiBPanMudCkgLT4geDIzXG4gICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4MjIgOiBPanMudCkgLT4geDIyXG4gICAgbGV0IChuZXdfcmVnX2V4cCA6IHN0cmluZyAtPiA/ZmxhZ3M6c3RyaW5nIC0+IHVuaXQgLT4gdCkgPVxuICAgICAgZnVuICh4MjQgOiBzdHJpbmcpIC0+XG4gICAgICAgIGZ1biA/ZmxhZ3M6KHgyNSA6IHN0cmluZyBvcHRpb24pIC0+XG4gICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICB0X29mX2pzXG4gICAgICAgICAgICAgIChPanMubmV3X29ial9hcnIgKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwiUmVnRXhwXCIpXG4gICAgICAgICAgICAgICAgIChsZXQgeDI2ID1cbiAgICAgICAgICAgICAgICAgICAgT2pzLm5ld19vYmogKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwiQXJyYXlcIikgW3x8XSBpblxuICAgICAgICAgICAgICAgICAgaWdub3JlIChPanMuY2FsbCB4MjYgXCJwdXNoXCIgW3woT2pzLnN0cmluZ190b19qcyB4MjQpfF0pO1xuICAgICAgICAgICAgICAgICAgKG1hdGNoIHgyNSB3aXRoXG4gICAgICAgICAgICAgICAgICAgfCBTb21lIHgyNyAtPlxuICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmNhbGwgeDI2IFwicHVzaFwiIFt8KE9qcy5zdHJpbmdfdG9fanMgeDI3KXxdKVxuICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICB4MjYpKVxuICBlbmRcbm1vZHVsZSBKc1N0cmluZyA9XG4gIHN0cnVjdFxuICAgIHR5cGUgdCA9IE9qcy50XG4gICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDI5IDogT2pzLnQpIC0+IHgyOVxuICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDI4IDogT2pzLnQpIC0+IHgyOFxuICAgIGxldCBvZl9zdHJpbmcgcyA9IE9qcy5zdHJpbmdfdG9fanMgc1xuICAgIGxldCB0b19zdHJpbmcgeCA9IE9qcy5zdHJpbmdfb2ZfanMgeFxuICAgIGxldCAobGVuZ3RoIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDMwIDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzMCkgXCJsZW5ndGhcIilcbiAgICBsZXQgKGNoYXJfY29kZV9hdCA6IHQgLT4gaW50IC0+IGludCkgPVxuICAgICAgZnVuICh4MzIgOiB0KSAtPlxuICAgICAgICBmdW4gKHgzMSA6IGludCkgLT5cbiAgICAgICAgICBPanMuaW50X29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDMyKSBcImNoYXJDb2RlQXRcIiBbfChPanMuaW50X3RvX2pzIHgzMSl8XSlcbiAgICBsZXQgKHRvX2xvd2VyX2Nhc2UgOiB0IC0+IHQpID1cbiAgICAgIGZ1biAoeDMzIDogdCkgLT4gdF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDMzKSBcInRvTG93ZXJDYXNlXCIgW3x8XSlcbiAgICBsZXQgKHRvX3VwcGVyX2Nhc2UgOiB0IC0+IHQpID1cbiAgICAgIGZ1biAoeDM0IDogdCkgLT4gdF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDM0KSBcInRvVXBwZXJDYXNlXCIgW3x8XSlcbiAgICBsZXQgKGNvbmNhdCA6IHQgLT4gdCBsaXN0IC0+IHQpID1cbiAgICAgIGZ1biAoeDM4IDogdCkgLT5cbiAgICAgICAgZnVuICh4MzUgOiB0IGxpc3QpIC0+XG4gICAgICAgICAgdF9vZl9qc1xuICAgICAgICAgICAgKGxldCB4MzkgPSB0X3RvX2pzIHgzOCBpblxuICAgICAgICAgICAgIE9qcy5jYWxsIChPanMuZ2V0X3Byb3BfYXNjaWkgeDM5IFwiY29uY2F0XCIpIFwiYXBwbHlcIlxuICAgICAgICAgICAgICAgW3x4Mzk7KChsZXQgeDM2ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICBPanMubmV3X29iaiAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJBcnJheVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgW3x8XSBpblxuICAgICAgICAgICAgICAgICAgICAgICBMaXN0Lml0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuICh4MzcgOiB0KSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZSAoT2pzLmNhbGwgeDM2IFwicHVzaFwiIFt8KHRfdG9fanMgeDM3KXxdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICB4MzU7XG4gICAgICAgICAgICAgICAgICAgICAgIHgzNikpfF0pXG4gICAgbGV0IChpbmNsdWRlcyA6IHQgLT4gdCAtPiBib29sKSA9XG4gICAgICBmdW4gKHg0MSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDQwIDogdCkgLT5cbiAgICAgICAgICBPanMuYm9vbF9vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0MSkgXCJpbmNsdWRlc1wiIFt8KHRfdG9fanMgeDQwKXxdKVxuICAgIGxldCAoZW5kc193aXRoIDogdCAtPiB0IC0+IGJvb2wpID1cbiAgICAgIGZ1biAoeDQzIDogdCkgLT5cbiAgICAgICAgZnVuICh4NDIgOiB0KSAtPlxuICAgICAgICAgIE9qcy5ib29sX29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDQzKSBcImVuZHNXaXRoXCIgW3wodF90b19qcyB4NDIpfF0pXG4gICAgbGV0IChpbmRleF9vZiA6IHQgLT4gdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDQ1IDogdCkgLT5cbiAgICAgICAgZnVuICh4NDQgOiB0KSAtPlxuICAgICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHg0NSkgXCJpbmRleE9mXCIgW3wodF90b19qcyB4NDQpfF0pXG4gICAgbGV0IChyZXBlYXQgOiB0IC0+IGludCAtPiB0KSA9XG4gICAgICBmdW4gKHg0NyA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDQ2IDogaW50KSAtPlxuICAgICAgICAgIHRfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHg0NykgXCJyZXBlYXRcIiBbfChPanMuaW50X3RvX2pzIHg0Nil8XSlcbiAgICBsZXQgKHNlYXJjaCA6IHQgLT4gUmVnRXhwLnQgLT4gaW50KSA9XG4gICAgICBmdW4gKHg0OSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDQ4IDogUmVnRXhwLnQpIC0+XG4gICAgICAgICAgT2pzLmludF9vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0OSkgXCJzZWFyY2hcIiBbfChSZWdFeHAudF90b19qcyB4NDgpfF0pXG4gICAgbGV0ICh0cmltIDogdCAtPiB0KSA9XG4gICAgICBmdW4gKHg1MCA6IHQpIC0+IHRfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHg1MCkgXCJ0cmltXCIgW3x8XSlcbiAgZW5kXG5tb2R1bGUgRGF0ZSA9XG4gIHN0cnVjdFxuICAgIHR5cGUgdCA9IE9qcy50XG4gICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDUyIDogT2pzLnQpIC0+IHg1MlxuICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDUxIDogT2pzLnQpIC0+IHg1MVxuICAgIGxldCAobmV3X2RhdGUgOiBmbG9hdCAtPiB0KSA9XG4gICAgICBmdW4gKHg1MyA6IGZsb2F0KSAtPlxuICAgICAgICB0X29mX2pzXG4gICAgICAgICAgKE9qcy5uZXdfb2JqIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIkRhdGVcIilcbiAgICAgICAgICAgICBbfChPanMuZmxvYXRfdG9fanMgeDUzKXxdKVxuICAgIGxldCAobm93IDogdW5pdCAtPiBmbG9hdCkgPVxuICAgICAgZnVuICgpIC0+XG4gICAgICAgIE9qcy5mbG9hdF9vZl9qc1xuICAgICAgICAgIChPanMuY2FsbCAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJEYXRlXCIpIFwibm93XCIgW3x8XSlcbiAgICBsZXQgKHBhcnNlIDogc3RyaW5nIC0+IHQpID1cbiAgICAgIGZ1biAoeDU0IDogc3RyaW5nKSAtPlxuICAgICAgICB0X29mX2pzXG4gICAgICAgICAgKE9qcy5jYWxsIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIkRhdGVcIikgXCJwYXJzZVwiXG4gICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4NTQpfF0pXG4gICAgbGV0IChnZXRfZGF0ZSA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHg1NSA6IHQpIC0+IE9qcy5pbnRfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHg1NSkgXCJnZXREYXRlXCIgW3x8XSlcbiAgICBsZXQgKGdldF9kYXkgOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4NTYgOiB0KSAtPiBPanMuaW50X29mX2pzIChPanMuY2FsbCAodF90b19qcyB4NTYpIFwiZ2V0RGF5XCIgW3x8XSlcbiAgICBsZXQgKGdldF9mdWxsX3llYXIgOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4NTcgOiB0KSAtPlxuICAgICAgICBPanMuaW50X29mX2pzIChPanMuY2FsbCAodF90b19qcyB4NTcpIFwiZ2V0RnVsbFllYXJcIiBbfHxdKVxuICAgIGxldCAoZ2V0X2hvdXJzIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDU4IDogdCkgLT4gT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDU4KSBcImdldEhvdXJzXCIgW3x8XSlcbiAgICBsZXQgKGdldF9taWxsaXNlY29uZHMgOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4NTkgOiB0KSAtPlxuICAgICAgICBPanMuaW50X29mX2pzIChPanMuY2FsbCAodF90b19qcyB4NTkpIFwiZ2V0TWlsbGlzZWNvbmRzXCIgW3x8XSlcbiAgICBsZXQgKGdldF9taW51dGVzIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDYwIDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDYwKSBcImdldE1pbnV0ZXNcIiBbfHxdKVxuICAgIGxldCAoZ2V0X21vbnRoIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDYxIDogdCkgLT4gT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDYxKSBcImdldE1vbnRoXCIgW3x8XSlcbiAgICBsZXQgKGdldF9zZWNvbmRzIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDYyIDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDYyKSBcImdldFNlY29uZHNcIiBbfHxdKVxuICAgIGxldCAoZ2V0X3RpbWUgOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4NjMgOiB0KSAtPiBPanMuaW50X29mX2pzIChPanMuY2FsbCAodF90b19qcyB4NjMpIFwiZ2V0VGltZVwiIFt8fF0pXG4gICAgbGV0IChnZXRfdGltZXpvbmVfb2Zmc2V0IDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDY0IDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDY0KSBcImdldFRpbWV6b25lT2Zmc2V0XCIgW3x8XSlcbiAgICBsZXQgKGdldF9VVENfZGF0ZSA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHg2NSA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHg2NSkgXCJnZXRVVENEYXRlXCIgW3x8XSlcbiAgICBsZXQgKGdldF9VVENfZGF5IDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDY2IDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDY2KSBcImdldFVUQ0RheVwiIFt8fF0pXG4gICAgbGV0IChnZXRfVVRDX2Z1bGxfeWVhciA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHg2NyA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHg2NykgXCJnZXRVVENGdWxsWWVhclwiIFt8fF0pXG4gICAgbGV0IChnZXRfVVRDX2hvdXJzIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDY4IDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDY4KSBcImdldFVUQ0hvdXJzXCIgW3x8XSlcbiAgICBsZXQgKGdldF9VVENfbWlsbGlzZWNvbmRzIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDY5IDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDY5KSBcImdldFVUQ01pbGxpc2Vjb25kc1wiIFt8fF0pXG4gICAgbGV0IChnZXRfVVRDX21pbnV0ZXMgOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4NzAgOiB0KSAtPlxuICAgICAgICBPanMuaW50X29mX2pzIChPanMuY2FsbCAodF90b19qcyB4NzApIFwiZ2V0VVRDTWludXRlc1wiIFt8fF0pXG4gICAgbGV0IChnZXRfVVRDX21vbnRoIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDcxIDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDcxKSBcImdldFVUQ01vbnRoXCIgW3x8XSlcbiAgICBsZXQgKGdldF9VVENfc2Vjb25kcyA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHg3MiA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHg3MikgXCJnZXRVVENTZWNvbmRzXCIgW3x8XSlcbiAgICBsZXQgKGdldF95ZWFyIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDczIDogdCkgLT4gT2pzLmludF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDczKSBcImdldFllYXJcIiBbfHxdKVxuICAgIGxldCAoc2V0X2RhdGUgOiB0IC0+IGludCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg3NSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDc0IDogaW50KSAtPlxuICAgICAgICAgIGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDc1KSBcInNldERhdGVcIiBbfChPanMuaW50X3RvX2pzIHg3NCl8XSlcbiAgICBsZXQgKHNldF9mdWxsX3llYXIgOiB0IC0+IGludCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg3NyA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDc2IDogaW50KSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg3NykgXCJzZXRGdWxsWWVhclwiIFt8KE9qcy5pbnRfdG9fanMgeDc2KXxdKVxuICAgIGxldCAoc2V0X2hvdXJzIDogdCAtPiBpbnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NzkgOiB0KSAtPlxuICAgICAgICBmdW4gKHg3OCA6IGludCkgLT5cbiAgICAgICAgICBpZ25vcmUgKE9qcy5jYWxsICh0X3RvX2pzIHg3OSkgXCJzZXRIb3Vyc1wiIFt8KE9qcy5pbnRfdG9fanMgeDc4KXxdKVxuICAgIGxldCAoc2V0X21pbGxpc2Vjb25kcyA6IHQgLT4gaW50IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDgxIDogdCkgLT5cbiAgICAgICAgZnVuICh4ODAgOiBpbnQpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDgxKSBcInNldE1pbGxpc2Vjb25kc1wiIFt8KE9qcy5pbnRfdG9fanMgeDgwKXxdKVxuICAgIGxldCAoc2V0X21pbnV0ZXMgOiB0IC0+IGludCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg4MyA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDgyIDogaW50KSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg4MykgXCJzZXRNaW51dGVzXCIgW3woT2pzLmludF90b19qcyB4ODIpfF0pXG4gICAgbGV0IChzZXRfbW9udGggOiB0IC0+IGludCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg4NSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDg0IDogaW50KSAtPlxuICAgICAgICAgIGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDg1KSBcInNldE1vbnRoXCIgW3woT2pzLmludF90b19qcyB4ODQpfF0pXG4gICAgbGV0IChzZXRfc2Vjb25kcyA6IHQgLT4gaW50IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDg3IDogdCkgLT5cbiAgICAgICAgZnVuICh4ODYgOiBpbnQpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDg3KSBcInNldFNlY29uZHNcIiBbfChPanMuaW50X3RvX2pzIHg4Nil8XSlcbiAgICBsZXQgKHNldF90aW1lIDogdCAtPiBpbnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4ODkgOiB0KSAtPlxuICAgICAgICBmdW4gKHg4OCA6IGludCkgLT5cbiAgICAgICAgICBpZ25vcmUgKE9qcy5jYWxsICh0X3RvX2pzIHg4OSkgXCJzZXRUaW1lXCIgW3woT2pzLmludF90b19qcyB4ODgpfF0pXG4gICAgbGV0IChzZXRfVVRDX2RhdGUgOiB0IC0+IGludCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg5MSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDkwIDogaW50KSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg5MSkgXCJzZXRVVENEYXRlXCIgW3woT2pzLmludF90b19qcyB4OTApfF0pXG4gICAgbGV0IChzZXRfVVRDX2Z1bGxfeWVhciA6IHQgLT4gaW50IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDkzIDogdCkgLT5cbiAgICAgICAgZnVuICh4OTIgOiBpbnQpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDkzKSBcInNldFVUQ0Z1bGxZZWFyXCIgW3woT2pzLmludF90b19qcyB4OTIpfF0pXG4gICAgbGV0IChzZXRfVVRDX2hvdXJzIDogdCAtPiBpbnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4OTUgOiB0KSAtPlxuICAgICAgICBmdW4gKHg5NCA6IGludCkgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4OTUpIFwic2V0VVRDSG91cnNcIiBbfChPanMuaW50X3RvX2pzIHg5NCl8XSlcbiAgICBsZXQgKHNldF9VVENfbWlsbGlzZWNvbmRzIDogdCAtPiBpbnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4OTcgOiB0KSAtPlxuICAgICAgICBmdW4gKHg5NiA6IGludCkgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4OTcpIFwic2V0VVRDTWlsbGlzZWNvbmRzXCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5pbnRfdG9fanMgeDk2KXxdKVxuICAgIGxldCAoc2V0X1VUQ19taW51dGVzIDogdCAtPiBpbnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4OTkgOiB0KSAtPlxuICAgICAgICBmdW4gKHg5OCA6IGludCkgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4OTkpIFwic2V0VVRDTWludXRlc1wiIFt8KE9qcy5pbnRfdG9fanMgeDk4KXxdKVxuICAgIGxldCAoc2V0X1VUQ19tb250aCA6IHQgLT4gaW50IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDEwMSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDEwMCA6IGludCkgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MTAxKSBcInNldFVUQ01vbnRoXCIgW3woT2pzLmludF90b19qcyB4MTAwKXxdKVxuICAgIGxldCAoc2V0X1VUQ19zZWNvbmRzIDogdCAtPiBpbnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MTAzIDogdCkgLT5cbiAgICAgICAgZnVuICh4MTAyIDogaW50KSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHgxMDMpIFwic2V0VVRDU2Vjb25kc1wiIFt8KE9qcy5pbnRfdG9fanMgeDEwMil8XSlcbiAgICBsZXQgKHNldF95ZWFyIDogdCAtPiBpbnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MTA1IDogdCkgLT5cbiAgICAgICAgZnVuICh4MTA0IDogaW50KSAtPlxuICAgICAgICAgIGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDEwNSkgXCJzZXRZZWFyXCIgW3woT2pzLmludF90b19qcyB4MTA0KXxdKVxuICAgIGxldCAodG9fZGF0ZV9zdHJpbmcgOiB0IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4MTA2IDogdCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDEwNikgXCJ0b0RhdGVTdHJpbmdcIiBbfHxdKVxuICAgIGxldCAodG9fR01UX3N0cmluZyA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHgxMDcgOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuY2FsbCAodF90b19qcyB4MTA3KSBcInRvR01UU3RyaW5nXCIgW3x8XSlcbiAgICBsZXQgKHRvX0lTT19zdHJpbmcgOiB0IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4MTA4IDogdCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDEwOCkgXCJ0b0lTT1N0cmluZ1wiIFt8fF0pXG4gICAgbGV0ICh0b19sb2NhbGVfc3RyaW5nIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDEwOSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHgxMDkpIFwidG9Mb2NhbGVTdHJpbmdcIiBbfHxdKVxuICAgIGxldCAodG9fc3RyaW5nIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDExMCA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHgxMTApIFwidG9TdHJpbmdcIiBbfHxdKVxuICAgIGxldCAodG9fdGltZV9zdHJpbmcgOiB0IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4MTExIDogdCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDExMSkgXCJ0b1RpbWVTdHJpbmdcIiBbfHxdKVxuICAgIGxldCAodG9fVVRDX3N0cmluZyA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHgxMTIgOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuY2FsbCAodF90b19qcyB4MTEyKSBcInRvVVRDU3RyaW5nXCIgW3x8XSlcbiAgZW5kXG5tb2R1bGUgQXJyYXlCdWZmZXIgPVxuICBzdHJ1Y3RcbiAgICB0eXBlIHQgPSBPanMudFxuICAgIGxldCByZWMgdF9vZl9qcyA6IE9qcy50IC0+IHQgPSBmdW4gKHgxMTQgOiBPanMudCkgLT4geDExNFxuICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDExMyA6IE9qcy50KSAtPiB4MTEzXG4gICAgbGV0IChjcmVhdGUgOiBpbnQgLT4gdCkgPVxuICAgICAgZnVuICh4MTE1IDogaW50KSAtPlxuICAgICAgICB0X29mX2pzXG4gICAgICAgICAgKE9qcy5uZXdfb2JqIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIkFycmF5QnVmZmVyXCIpXG4gICAgICAgICAgICAgW3woT2pzLmludF90b19qcyB4MTE1KXxdKVxuICBlbmRcbm1vZHVsZSBCbG9iID1cbiAgc3RydWN0XG4gICAgdHlwZSBvcHRpb25zID0gT2pzLnRcbiAgICBsZXQgcmVjIG9wdGlvbnNfb2ZfanMgOiBPanMudCAtPiBvcHRpb25zID0gZnVuICh4MTE3IDogT2pzLnQpIC0+IHgxMTdcbiAgICBhbmQgb3B0aW9uc190b19qcyA6IG9wdGlvbnMgLT4gT2pzLnQgPSBmdW4gKHgxMTYgOiBPanMudCkgLT4geDExNlxuICAgIGxldCAob3B0aW9ucyA6ID90eXBlXzpzdHJpbmcgLT4gP2VuZGluZ3M6c3RyaW5nIC0+IHVuaXQgLT4gb3B0aW9ucykgPVxuICAgICAgZnVuID90eXBlXzooeDExOCA6IHN0cmluZyBvcHRpb24pIC0+XG4gICAgICAgIGZ1biA/ZW5kaW5nczooeDExOSA6IHN0cmluZyBvcHRpb24pIC0+XG4gICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICBsZXQgeDEyMCA9IE9qcy5lbXB0eV9vYmogKCkgaW5cbiAgICAgICAgICAgIChtYXRjaCB4MTE4IHdpdGhcbiAgICAgICAgICAgICB8IFNvbWUgeDEyMiAtPlxuICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDEyMCBcInR5cGVcIiAoT2pzLnN0cmluZ190b19qcyB4MTIyKVxuICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAobWF0Y2ggeDExOSB3aXRoXG4gICAgICAgICAgICAgfCBTb21lIHgxMjEgLT5cbiAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHgxMjAgXCJlbmRpbmdzXCIgKE9qcy5zdHJpbmdfdG9fanMgeDEyMSlcbiAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgb3B0aW9uc19vZl9qcyB4MTIwXG4gICAgdHlwZSB0ID0gT2pzLnRcbiAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4MTI0IDogT2pzLnQpIC0+IHgxMjRcbiAgICBhbmQgdF90b19qcyA6IHQgLT4gT2pzLnQgPSBmdW4gKHgxMjMgOiBPanMudCkgLT4geDEyM1xuICAgIGxldCAoY3JlYXRlIDogT2pzLnQgbGlzdCAtPiA/b3B0aW9uczpvcHRpb25zIC0+IHVuaXQgLT4gdCkgPVxuICAgICAgZnVuICh4MTI1IDogT2pzLnQgbGlzdCkgLT5cbiAgICAgICAgZnVuID9vcHRpb25zOih4MTI2IDogb3B0aW9ucyBvcHRpb24pIC0+XG4gICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICB0X29mX2pzXG4gICAgICAgICAgICAgIChPanMubmV3X29ial9hcnIgKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwiQmxvYlwiKVxuICAgICAgICAgICAgICAgICAobGV0IHgxMjcgPVxuICAgICAgICAgICAgICAgICAgICBPanMubmV3X29iaiAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJBcnJheVwiKSBbfHxdIGluXG4gICAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgKE9qcy5jYWxsIHgxMjcgXCJwdXNoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgW3woT2pzLmxpc3RfdG9fanMgKGZ1biAoeDEyOSA6IE9qcy50KSAtPiB4MTI5KSB4MTI1KXxdKTtcbiAgICAgICAgICAgICAgICAgIChtYXRjaCB4MTI2IHdpdGhcbiAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDEyOCAtPlxuICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmUgKE9qcy5jYWxsIHgxMjcgXCJwdXNoXCIgW3wob3B0aW9uc190b19qcyB4MTI4KXxdKVxuICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICB4MTI3KSlcbiAgICBsZXQgKHNpemUgOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4MTMwIDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxMzApIFwic2l6ZVwiKVxuICAgIGxldCAodHlwZV8gOiB0IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4MTMxIDogdCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxMzEpIFwidHlwZVwiKVxuICAgIGxldCAodGV4dCA6IHQgLT4gdW5pdCAtPiBzdHJpbmcgUHJvbWlzZS50KSA9XG4gICAgICBmdW4gKHgxMzIgOiB0KSAtPlxuICAgICAgICBmdW4gKCkgLT5cbiAgICAgICAgICBQcm9taXNlLnRfb2ZfanMgT2pzLnN0cmluZ19vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHgxMzIpIFwidGV4dFwiIFt8fF0pXG4gIGVuZFxubW9kdWxlIEZpbGUgPVxuICBzdHJ1Y3RcbiAgICB0eXBlIHQgPSBCbG9iLnRcbiAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4MTM1IDogT2pzLnQpIC0+IEJsb2IudF9vZl9qcyB4MTM1XG4gICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4MTM0IDogQmxvYi50KSAtPiBCbG9iLnRfdG9fanMgeDEzNFxuICAgIHR5cGUgb3B0aW9ucyA9IE9qcy50XG4gICAgbGV0IHJlYyBvcHRpb25zX29mX2pzIDogT2pzLnQgLT4gb3B0aW9ucyA9IGZ1biAoeDEzNyA6IE9qcy50KSAtPiB4MTM3XG4gICAgYW5kIG9wdGlvbnNfdG9fanMgOiBvcHRpb25zIC0+IE9qcy50ID0gZnVuICh4MTM2IDogT2pzLnQpIC0+IHgxMzZcbiAgICBsZXQgKG9wdGlvbnMgOiA/dHlwZV86c3RyaW5nIC0+ID9sYXN0X21vZGlmaWVkOmZsb2F0IC0+IHVuaXQgLT4gb3B0aW9ucylcbiAgICAgID1cbiAgICAgIGZ1biA/dHlwZV86KHgxMzggOiBzdHJpbmcgb3B0aW9uKSAtPlxuICAgICAgICBmdW4gP2xhc3RfbW9kaWZpZWQ6KHgxMzkgOiBmbG9hdCBvcHRpb24pIC0+XG4gICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICBsZXQgeDE0MCA9IE9qcy5lbXB0eV9vYmogKCkgaW5cbiAgICAgICAgICAgIChtYXRjaCB4MTM4IHdpdGhcbiAgICAgICAgICAgICB8IFNvbWUgeDE0MiAtPlxuICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDE0MCBcInR5cGVcIiAoT2pzLnN0cmluZ190b19qcyB4MTQyKVxuICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAobWF0Y2ggeDEzOSB3aXRoXG4gICAgICAgICAgICAgfCBTb21lIHgxNDEgLT5cbiAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHgxNDAgXCJsYXN0TW9kaWZpZWRcIlxuICAgICAgICAgICAgICAgICAgIChPanMuZmxvYXRfdG9fanMgeDE0MSlcbiAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgb3B0aW9uc19vZl9qcyB4MTQwXG4gICAgbGV0IChjcmVhdGUgOiBCbG9iLnQgYXJyYXkgLT4gc3RyaW5nIC0+IG9wdGlvbnMgLT4gdCkgPVxuICAgICAgZnVuICh4MTQzIDogQmxvYi50IGFycmF5KSAtPlxuICAgICAgICBmdW4gKHgxNDUgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgZnVuICh4MTQ2IDogb3B0aW9ucykgLT5cbiAgICAgICAgICAgIHRfb2ZfanNcbiAgICAgICAgICAgICAgKE9qcy5uZXdfb2JqIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIkZpbGVcIilcbiAgICAgICAgICAgICAgICAgW3woT2pzLmFycmF5X3RvX2pzIEJsb2IudF90b19qcyB4MTQzKTsoT2pzLnN0cmluZ190b19qcyB4MTQ1KTsoXG4gICAgICAgICAgICAgICAgICAgb3B0aW9uc190b19qcyB4MTQ2KXxdKVxuICAgIGxldCAobmFtZSA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHgxNDcgOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE0NykgXCJuYW1lXCIpXG4gIGVuZFxubW9kdWxlIERhdGFUcmFuc2ZlciA9XG4gIHN0cnVjdFxuICAgIHR5cGUgdCA9IE9qcy50XG4gICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDE0OSA6IE9qcy50KSAtPiB4MTQ5XG4gICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4MTQ4IDogT2pzLnQpIC0+IHgxNDhcbiAgICBsZXQgKGZpbGVzIDogdCAtPiBGaWxlLnQgbGlzdCkgPVxuICAgICAgZnVuICh4MTUwIDogdCkgLT5cbiAgICAgICAgT2pzLmxpc3Rfb2ZfanMgRmlsZS50X29mX2pzXG4gICAgICAgICAgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTUwKSBcImZpbGVzXCIpXG4gICAgbGV0IChnZXRfZGF0YSA6IHQgLT4gc3RyaW5nIC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4MTUzIDogdCkgLT5cbiAgICAgICAgZnVuICh4MTUyIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zdHJpbmdfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MTUzKSBcImdldERhdGFcIiBbfChPanMuc3RyaW5nX3RvX2pzIHgxNTIpfF0pXG4gIGVuZFxubW9kdWxlIEV2ZW50ID1cbiAgc3RydWN0XG4gICAgdHlwZSB0ID0gT2pzLnRcbiAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4MTU1IDogT2pzLnQpIC0+IHgxNTVcbiAgICBhbmQgdF90b19qcyA6IHQgLT4gT2pzLnQgPSBmdW4gKHgxNTQgOiBPanMudCkgLT4geDE1NFxuICAgIHR5cGUga2luZCA9XG4gICAgICB8IEFib3J0IFxuICAgICAgfCBBZnRlcnByaW50IFxuICAgICAgfCBBbmltYXRpb25lbmQgXG4gICAgICB8IEFuaW1hdGlvbml0ZXJhdGlvbiBcbiAgICAgIHwgQW5pbWF0aW9uc3RhcnQgXG4gICAgICB8IEFwcGluc3RhbGxlZCBcbiAgICAgIHwgQXVkaW9lbmQgXG4gICAgICB8IEF1ZGlvcHJvY2VzcyBcbiAgICAgIHwgQXVkaW9zdGFydCBcbiAgICAgIHwgQmVmb3JlcHJpbnQgXG4gICAgICB8IEJlZm9yZXVubG9hZCBcbiAgICAgIHwgQmVnaW5FdmVudCBcbiAgICAgIHwgQmxvY2tlZCBcbiAgICAgIHwgQmx1ciBcbiAgICAgIHwgQm91bmRhcnkgXG4gICAgICB8IENhY2hlZCBcbiAgICAgIHwgQ2FucGxheSBcbiAgICAgIHwgQ2FucGxheXRocm91Z2ggXG4gICAgICB8IENoYW5nZSBcbiAgICAgIHwgQ2hhcmdpbmdjaGFuZ2UgXG4gICAgICB8IENoYXJnaW5ndGltZWNoYW5nZSBcbiAgICAgIHwgQ2hlY2tpbmcgXG4gICAgICB8IENsaWNrIFxuICAgICAgfCBDbG9zZSBcbiAgICAgIHwgQ29tcGxldGUgXG4gICAgICB8IENvbXBvc2l0aW9uZW5kIFxuICAgICAgfCBDb21wb3NpdGlvbnN0YXJ0IFxuICAgICAgfCBDb21wb3NpdGlvbnVwZGF0ZSBcbiAgICAgIHwgQ29udGV4dG1lbnUgXG4gICAgICB8IENvcHkgXG4gICAgICB8IEN1dCBcbiAgICAgIHwgRGJsY2xpY2sgXG4gICAgICB8IERldmljZWNoYW5nZSBcbiAgICAgIHwgRGV2aWNlbGlnaHQgXG4gICAgICB8IERldmljZW1vdGlvbiBcbiAgICAgIHwgRGV2aWNlb3JpZW50YXRpb24gXG4gICAgICB8IERldmljZXByb3hpbWl0eSBcbiAgICAgIHwgRGlzY2hhcmdpbmd0aW1lY2hhbmdlIFxuICAgICAgfCBET01BY3RpdmF0ZSBcbiAgICAgIHwgRE9NQXR0cmlidXRlTmFtZUNoYW5nZWQgXG4gICAgICB8IERPTUF0dHJNb2RpZmllZCBcbiAgICAgIHwgRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkIFxuICAgICAgfCBET01Db250ZW50TG9hZGVkIFxuICAgICAgfCBET01FbGVtZW50TmFtZUNoYW5nZWQgXG4gICAgICB8IERPTUZvY3VzSW4gXG4gICAgICB8IERPTUZvY3VzT3V0IFxuICAgICAgfCBET01Ob2RlSW5zZXJ0ZWQgXG4gICAgICB8IERPTU5vZGVJbnNlcnRlZEludG9Eb2N1bWVudCBcbiAgICAgIHwgRE9NTm9kZVJlbW92ZWQgXG4gICAgICB8IERPTU5vZGVSZW1vdmVkRnJvbURvY3VtZW50IFxuICAgICAgfCBET01TdWJ0cmVlTW9kaWZpZWQgXG4gICAgICB8IERvd25sb2FkaW5nIFxuICAgICAgfCBEcmFnIFxuICAgICAgfCBEcmFnZW5kIFxuICAgICAgfCBEcmFnZW50ZXIgXG4gICAgICB8IERyYWdsZWF2ZSBcbiAgICAgIHwgRHJhZ292ZXIgXG4gICAgICB8IERyYWdzdGFydCBcbiAgICAgIHwgRHJvcCBcbiAgICAgIHwgRHVyYXRpb25jaGFuZ2UgXG4gICAgICB8IEVtcHRpZWQgXG4gICAgICB8IEVuZCBcbiAgICAgIHwgRW5kZWQgXG4gICAgICB8IEVuZEV2ZW50IFxuICAgICAgfCBFcnJvciBcbiAgICAgIHwgRm9jdXMgXG4gICAgICB8IEZvY3VzaW4gXG4gICAgICB8IEZvY3Vzb3V0IFxuICAgICAgfCBGdWxsc2NyZWVuY2hhbmdlIFxuICAgICAgfCBGdWxsc2NyZWVuZXJyb3IgXG4gICAgICB8IEdhbWVwYWRjb25uZWN0ZWQgXG4gICAgICB8IEdhbWVwYWRkaXNjb25uZWN0ZWQgXG4gICAgICB8IEdvdHBvaW50ZXJjYXB0dXJlIFxuICAgICAgfCBIYXNoY2hhbmdlIFxuICAgICAgfCBJbnB1dCBcbiAgICAgIHwgSW52YWxpZCBcbiAgICAgIHwgS2V5ZG93biBcbiAgICAgIHwgS2V5cHJlc3MgXG4gICAgICB8IEtleXVwIFxuICAgICAgfCBMYW5ndWFnZWNoYW5nZSBcbiAgICAgIHwgTGV2ZWxjaGFuZ2UgXG4gICAgICB8IExvYWQgXG4gICAgICB8IExvYWRlZGRhdGEgXG4gICAgICB8IExvYWRlZG1ldGFkYXRhIFxuICAgICAgfCBMb2FkZW5kIFxuICAgICAgfCBMb2Fkc3RhcnQgXG4gICAgICB8IExvc3Rwb2ludGVyY2FwdHVyZSBcbiAgICAgIHwgTWFyayBcbiAgICAgIHwgTWVzc2FnZSBcbiAgICAgIHwgTWVzc2FnZWVycm9yIFxuICAgICAgfCBNb3VzZWRvd24gXG4gICAgICB8IE1vdXNlZW50ZXIgXG4gICAgICB8IE1vdXNlbGVhdmUgXG4gICAgICB8IE1vdXNlbW92ZSBcbiAgICAgIHwgTW91c2VvdXQgXG4gICAgICB8IE1vdXNlb3ZlciBcbiAgICAgIHwgTW91c2V1cCBcbiAgICAgIHwgTm9tYXRjaCBcbiAgICAgIHwgTm90aWZpY2F0aW9uY2xpY2sgXG4gICAgICB8IE5vdXBkYXRlIFxuICAgICAgfCBPYnNvbGV0ZSBcbiAgICAgIHwgT2ZmbGluZSBcbiAgICAgIHwgT25saW5lIFxuICAgICAgfCBPcGVuIFxuICAgICAgfCBPcmllbnRhdGlvbmNoYW5nZSBcbiAgICAgIHwgUGFnZWhpZGUgXG4gICAgICB8IFBhZ2VzaG93IFxuICAgICAgfCBQYXN0ZSBcbiAgICAgIHwgUGF1c2UgXG4gICAgICB8IFBsYXkgXG4gICAgICB8IFBsYXlpbmcgXG4gICAgICB8IFBvaW50ZXJjYW5jZWwgXG4gICAgICB8IFBvaW50ZXJkb3duIFxuICAgICAgfCBQb2ludGVyZW50ZXIgXG4gICAgICB8IFBvaW50ZXJsZWF2ZSBcbiAgICAgIHwgUG9pbnRlcmxvY2tjaGFuZ2UgXG4gICAgICB8IFBvaW50ZXJsb2NrZXJyb3IgXG4gICAgICB8IFBvaW50ZXJtb3ZlIFxuICAgICAgfCBQb2ludGVyb3V0IFxuICAgICAgfCBQb2ludGVyb3ZlciBcbiAgICAgIHwgUG9pbnRlcnVwIFxuICAgICAgfCBQb3BzdGF0ZSBcbiAgICAgIHwgUHJvZ3Jlc3MgXG4gICAgICB8IFB1c2ggXG4gICAgICB8IFB1c2hzdWJzY3JpcHRpb25jaGFuZ2UgXG4gICAgICB8IFJhdGVjaGFuZ2UgXG4gICAgICB8IFJlYWR5c3RhdGVjaGFuZ2UgXG4gICAgICB8IFJlcGVhdEV2ZW50IFxuICAgICAgfCBSZXNldCBcbiAgICAgIHwgUmVzaXplIFxuICAgICAgfCBSZXNvdXJjZXRpbWluZ2J1ZmZlcmZ1bGwgXG4gICAgICB8IFJlc3VsdCBcbiAgICAgIHwgUmVzdW1lIFxuICAgICAgfCBTY3JvbGwgXG4gICAgICB8IFNlZWtlZCBcbiAgICAgIHwgU2Vla2luZyBcbiAgICAgIHwgU2VsZWN0IFxuICAgICAgfCBTZWxlY3Rpb25jaGFuZ2UgXG4gICAgICB8IFNlbGVjdHN0YXJ0IFxuICAgICAgfCBTaG93IFxuICAgICAgfCBTbG90Y2hhbmdlIFxuICAgICAgfCBTb3VuZGVuZCBcbiAgICAgIHwgU291bmRzdGFydCBcbiAgICAgIHwgU3BlZWNoZW5kIFxuICAgICAgfCBTcGVlY2hzdGFydCBcbiAgICAgIHwgU3RhbGxlZCBcbiAgICAgIHwgU3RhcnQgXG4gICAgICB8IFN0b3JhZ2UgXG4gICAgICB8IFN1Ym1pdCBcbiAgICAgIHwgU3VjY2VzcyBcbiAgICAgIHwgU3VzcGVuZCBcbiAgICAgIHwgU1ZHQWJvcnQgXG4gICAgICB8IFNWR0Vycm9yIFxuICAgICAgfCBTVkdMb2FkIFxuICAgICAgfCBTVkdSZXNpemUgXG4gICAgICB8IFNWR1Njcm9sbCBcbiAgICAgIHwgU1ZHVW5sb2FkIFxuICAgICAgfCBTVkdab29tIFxuICAgICAgfCBUaW1lb3V0IFxuICAgICAgfCBUaW1ldXBkYXRlIFxuICAgICAgfCBUb3VjaGNhbmNlbCBcbiAgICAgIHwgVG91Y2hlbmQgXG4gICAgICB8IFRvdWNobW92ZSBcbiAgICAgIHwgVG91Y2hzdGFydCBcbiAgICAgIHwgVHJhbnNpdGlvbmVuZCBcbiAgICAgIHwgVW5sb2FkIFxuICAgICAgfCBVcGRhdGVyZWFkeSBcbiAgICAgIHwgVXBncmFkZW5lZWRlZCBcbiAgICAgIHwgVXNlcnByb3hpbWl0eSBcbiAgICAgIHwgVmVyc2lvbmNoYW5nZSBcbiAgICAgIHwgVmlzaWJpbGl0eWNoYW5nZSBcbiAgICAgIHwgVm9pY2VzY2hhbmdlZCBcbiAgICAgIHwgVm9sdW1lY2hhbmdlIFxuICAgICAgfCBXYWl0aW5nIFxuICAgICAgfCBXaGVlbCBcbiAgICAgIHwgTm9uU3RhbmRhcmQgb2Ygc3RyaW5nIFxuICAgIGxldCByZWMga2luZF9vZl9qcyA6IE9qcy50IC0+IGtpbmQgPVxuICAgICAgZnVuICh4MTU4IDogT2pzLnQpIC0+XG4gICAgICAgIGxldCB4MTU5ID0geDE1OCBpblxuICAgICAgICBtYXRjaCBPanMuc3RyaW5nX29mX2pzIHgxNTkgd2l0aFxuICAgICAgICB8IFwiYWJvcnRcIiAtPiBBYm9ydFxuICAgICAgICB8IFwiYWZ0ZXJwcmludFwiIC0+IEFmdGVycHJpbnRcbiAgICAgICAgfCBcImFuaW1hdGlvbmVuZFwiIC0+IEFuaW1hdGlvbmVuZFxuICAgICAgICB8IFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIgLT4gQW5pbWF0aW9uaXRlcmF0aW9uXG4gICAgICAgIHwgXCJhbmltYXRpb25zdGFydFwiIC0+IEFuaW1hdGlvbnN0YXJ0XG4gICAgICAgIHwgXCJhcHBpbnN0YWxsZWRcIiAtPiBBcHBpbnN0YWxsZWRcbiAgICAgICAgfCBcImF1ZGlvZW5kXCIgLT4gQXVkaW9lbmRcbiAgICAgICAgfCBcImF1ZGlvcHJvY2Vzc1wiIC0+IEF1ZGlvcHJvY2Vzc1xuICAgICAgICB8IFwiYXVkaW9zdGFydFwiIC0+IEF1ZGlvc3RhcnRcbiAgICAgICAgfCBcImJlZm9yZXByaW50XCIgLT4gQmVmb3JlcHJpbnRcbiAgICAgICAgfCBcImJlZm9yZXVubG9hZFwiIC0+IEJlZm9yZXVubG9hZFxuICAgICAgICB8IFwiYmVnaW5FdmVudFwiIC0+IEJlZ2luRXZlbnRcbiAgICAgICAgfCBcImJsb2NrZWRcIiAtPiBCbG9ja2VkXG4gICAgICAgIHwgXCJibHVyXCIgLT4gQmx1clxuICAgICAgICB8IFwiYm91bmRhcnlcIiAtPiBCb3VuZGFyeVxuICAgICAgICB8IFwiY2FjaGVkXCIgLT4gQ2FjaGVkXG4gICAgICAgIHwgXCJjYW5wbGF5XCIgLT4gQ2FucGxheVxuICAgICAgICB8IFwiY2FucGxheXRocm91Z2hcIiAtPiBDYW5wbGF5dGhyb3VnaFxuICAgICAgICB8IFwiY2hhbmdlXCIgLT4gQ2hhbmdlXG4gICAgICAgIHwgXCJjaGFyZ2luZ2NoYW5nZVwiIC0+IENoYXJnaW5nY2hhbmdlXG4gICAgICAgIHwgXCJjaGFyZ2luZ3RpbWVjaGFuZ2VcIiAtPiBDaGFyZ2luZ3RpbWVjaGFuZ2VcbiAgICAgICAgfCBcImNoZWNraW5nXCIgLT4gQ2hlY2tpbmdcbiAgICAgICAgfCBcImNsaWNrXCIgLT4gQ2xpY2tcbiAgICAgICAgfCBcImNsb3NlXCIgLT4gQ2xvc2VcbiAgICAgICAgfCBcImNvbXBsZXRlXCIgLT4gQ29tcGxldGVcbiAgICAgICAgfCBcImNvbXBvc2l0aW9uZW5kXCIgLT4gQ29tcG9zaXRpb25lbmRcbiAgICAgICAgfCBcImNvbXBvc2l0aW9uc3RhcnRcIiAtPiBDb21wb3NpdGlvbnN0YXJ0XG4gICAgICAgIHwgXCJjb21wb3NpdGlvbnVwZGF0ZVwiIC0+IENvbXBvc2l0aW9udXBkYXRlXG4gICAgICAgIHwgXCJjb250ZXh0bWVudVwiIC0+IENvbnRleHRtZW51XG4gICAgICAgIHwgXCJjb3B5XCIgLT4gQ29weVxuICAgICAgICB8IFwiY3V0XCIgLT4gQ3V0XG4gICAgICAgIHwgXCJkYmxjbGlja1wiIC0+IERibGNsaWNrXG4gICAgICAgIHwgXCJkZXZpY2VjaGFuZ2VcIiAtPiBEZXZpY2VjaGFuZ2VcbiAgICAgICAgfCBcImRldmljZWxpZ2h0XCIgLT4gRGV2aWNlbGlnaHRcbiAgICAgICAgfCBcImRldmljZW1vdGlvblwiIC0+IERldmljZW1vdGlvblxuICAgICAgICB8IFwiZGV2aWNlb3JpZW50YXRpb25cIiAtPiBEZXZpY2VvcmllbnRhdGlvblxuICAgICAgICB8IFwiZGV2aWNlcHJveGltaXR5XCIgLT4gRGV2aWNlcHJveGltaXR5XG4gICAgICAgIHwgXCJkaXNjaGFyZ2luZ3RpbWVjaGFuZ2VcIiAtPiBEaXNjaGFyZ2luZ3RpbWVjaGFuZ2VcbiAgICAgICAgfCBcIkRPTUFjdGl2YXRlXCIgLT4gRE9NQWN0aXZhdGVcbiAgICAgICAgfCBcIkRPTUF0dHJpYnV0ZU5hbWVDaGFuZ2VkXCIgLT4gRE9NQXR0cmlidXRlTmFtZUNoYW5nZWRcbiAgICAgICAgfCBcIkRPTUF0dHJNb2RpZmllZFwiIC0+IERPTUF0dHJNb2RpZmllZFxuICAgICAgICB8IFwiRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkXCIgLT4gRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkXG4gICAgICAgIHwgXCJET01Db250ZW50TG9hZGVkXCIgLT4gRE9NQ29udGVudExvYWRlZFxuICAgICAgICB8IFwiRE9NRWxlbWVudE5hbWVDaGFuZ2VkXCIgLT4gRE9NRWxlbWVudE5hbWVDaGFuZ2VkXG4gICAgICAgIHwgXCJET01Gb2N1c0luXCIgLT4gRE9NRm9jdXNJblxuICAgICAgICB8IFwiRE9NRm9jdXNPdXRcIiAtPiBET01Gb2N1c091dFxuICAgICAgICB8IFwiRE9NTm9kZUluc2VydGVkXCIgLT4gRE9NTm9kZUluc2VydGVkXG4gICAgICAgIHwgXCJET01Ob2RlSW5zZXJ0ZWRJbnRvRG9jdW1lbnRcIiAtPiBET01Ob2RlSW5zZXJ0ZWRJbnRvRG9jdW1lbnRcbiAgICAgICAgfCBcIkRPTU5vZGVSZW1vdmVkXCIgLT4gRE9NTm9kZVJlbW92ZWRcbiAgICAgICAgfCBcIkRPTU5vZGVSZW1vdmVkRnJvbURvY3VtZW50XCIgLT4gRE9NTm9kZVJlbW92ZWRGcm9tRG9jdW1lbnRcbiAgICAgICAgfCBcIkRPTVN1YnRyZWVNb2RpZmllZFwiIC0+IERPTVN1YnRyZWVNb2RpZmllZFxuICAgICAgICB8IFwiZG93bmxvYWRpbmdcIiAtPiBEb3dubG9hZGluZ1xuICAgICAgICB8IFwiZHJhZ1wiIC0+IERyYWdcbiAgICAgICAgfCBcImRyYWdlbmRcIiAtPiBEcmFnZW5kXG4gICAgICAgIHwgXCJkcmFnZW50ZXJcIiAtPiBEcmFnZW50ZXJcbiAgICAgICAgfCBcImRyYWdsZWF2ZVwiIC0+IERyYWdsZWF2ZVxuICAgICAgICB8IFwiZHJhZ292ZXJcIiAtPiBEcmFnb3ZlclxuICAgICAgICB8IFwiZHJhZ3N0YXJ0XCIgLT4gRHJhZ3N0YXJ0XG4gICAgICAgIHwgXCJkcm9wXCIgLT4gRHJvcFxuICAgICAgICB8IFwiZHVyYXRpb25jaGFuZ2VcIiAtPiBEdXJhdGlvbmNoYW5nZVxuICAgICAgICB8IFwiZW1wdGllZFwiIC0+IEVtcHRpZWRcbiAgICAgICAgfCBcImVuZFwiIC0+IEVuZFxuICAgICAgICB8IFwiZW5kZWRcIiAtPiBFbmRlZFxuICAgICAgICB8IFwiZW5kRXZlbnRcIiAtPiBFbmRFdmVudFxuICAgICAgICB8IFwiZXJyb3JcIiAtPiBFcnJvclxuICAgICAgICB8IFwiZm9jdXNcIiAtPiBGb2N1c1xuICAgICAgICB8IFwiZm9jdXNpblwiIC0+IEZvY3VzaW5cbiAgICAgICAgfCBcImZvY3Vzb3V0XCIgLT4gRm9jdXNvdXRcbiAgICAgICAgfCBcImZ1bGxzY3JlZW5jaGFuZ2VcIiAtPiBGdWxsc2NyZWVuY2hhbmdlXG4gICAgICAgIHwgXCJmdWxsc2NyZWVuZXJyb3JcIiAtPiBGdWxsc2NyZWVuZXJyb3JcbiAgICAgICAgfCBcImdhbWVwYWRjb25uZWN0ZWRcIiAtPiBHYW1lcGFkY29ubmVjdGVkXG4gICAgICAgIHwgXCJnYW1lcGFkZGlzY29ubmVjdGVkXCIgLT4gR2FtZXBhZGRpc2Nvbm5lY3RlZFxuICAgICAgICB8IFwiZ290cG9pbnRlcmNhcHR1cmVcIiAtPiBHb3Rwb2ludGVyY2FwdHVyZVxuICAgICAgICB8IFwiaGFzaGNoYW5nZVwiIC0+IEhhc2hjaGFuZ2VcbiAgICAgICAgfCBcImlucHV0XCIgLT4gSW5wdXRcbiAgICAgICAgfCBcImludmFsaWRcIiAtPiBJbnZhbGlkXG4gICAgICAgIHwgXCJrZXlkb3duXCIgLT4gS2V5ZG93blxuICAgICAgICB8IFwia2V5cHJlc3NcIiAtPiBLZXlwcmVzc1xuICAgICAgICB8IFwia2V5dXBcIiAtPiBLZXl1cFxuICAgICAgICB8IFwibGFuZ3VhZ2VjaGFuZ2VcIiAtPiBMYW5ndWFnZWNoYW5nZVxuICAgICAgICB8IFwibGV2ZWxjaGFuZ2VcIiAtPiBMZXZlbGNoYW5nZVxuICAgICAgICB8IFwibG9hZFwiIC0+IExvYWRcbiAgICAgICAgfCBcImxvYWRlZGRhdGFcIiAtPiBMb2FkZWRkYXRhXG4gICAgICAgIHwgXCJsb2FkZWRtZXRhZGF0YVwiIC0+IExvYWRlZG1ldGFkYXRhXG4gICAgICAgIHwgXCJsb2FkZW5kXCIgLT4gTG9hZGVuZFxuICAgICAgICB8IFwibG9hZHN0YXJ0XCIgLT4gTG9hZHN0YXJ0XG4gICAgICAgIHwgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIiAtPiBMb3N0cG9pbnRlcmNhcHR1cmVcbiAgICAgICAgfCBcIm1hcmtcIiAtPiBNYXJrXG4gICAgICAgIHwgXCJtZXNzYWdlXCIgLT4gTWVzc2FnZVxuICAgICAgICB8IFwibWVzc2FnZWVycm9yXCIgLT4gTWVzc2FnZWVycm9yXG4gICAgICAgIHwgXCJtb3VzZWRvd25cIiAtPiBNb3VzZWRvd25cbiAgICAgICAgfCBcIm1vdXNlZW50ZXJcIiAtPiBNb3VzZWVudGVyXG4gICAgICAgIHwgXCJtb3VzZWxlYXZlXCIgLT4gTW91c2VsZWF2ZVxuICAgICAgICB8IFwibW91c2Vtb3ZlXCIgLT4gTW91c2Vtb3ZlXG4gICAgICAgIHwgXCJtb3VzZW91dFwiIC0+IE1vdXNlb3V0XG4gICAgICAgIHwgXCJtb3VzZW92ZXJcIiAtPiBNb3VzZW92ZXJcbiAgICAgICAgfCBcIm1vdXNldXBcIiAtPiBNb3VzZXVwXG4gICAgICAgIHwgXCJub21hdGNoXCIgLT4gTm9tYXRjaFxuICAgICAgICB8IFwibm90aWZpY2F0aW9uY2xpY2tcIiAtPiBOb3RpZmljYXRpb25jbGlja1xuICAgICAgICB8IFwibm91cGRhdGVcIiAtPiBOb3VwZGF0ZVxuICAgICAgICB8IFwib2Jzb2xldGVcIiAtPiBPYnNvbGV0ZVxuICAgICAgICB8IFwib2ZmbGluZVwiIC0+IE9mZmxpbmVcbiAgICAgICAgfCBcIm9ubGluZVwiIC0+IE9ubGluZVxuICAgICAgICB8IFwib3BlblwiIC0+IE9wZW5cbiAgICAgICAgfCBcIm9yaWVudGF0aW9uY2hhbmdlXCIgLT4gT3JpZW50YXRpb25jaGFuZ2VcbiAgICAgICAgfCBcInBhZ2VoaWRlXCIgLT4gUGFnZWhpZGVcbiAgICAgICAgfCBcInBhZ2VzaG93XCIgLT4gUGFnZXNob3dcbiAgICAgICAgfCBcInBhc3RlXCIgLT4gUGFzdGVcbiAgICAgICAgfCBcInBhdXNlXCIgLT4gUGF1c2VcbiAgICAgICAgfCBcInBsYXlcIiAtPiBQbGF5XG4gICAgICAgIHwgXCJwbGF5aW5nXCIgLT4gUGxheWluZ1xuICAgICAgICB8IFwicG9pbnRlcmNhbmNlbFwiIC0+IFBvaW50ZXJjYW5jZWxcbiAgICAgICAgfCBcInBvaW50ZXJkb3duXCIgLT4gUG9pbnRlcmRvd25cbiAgICAgICAgfCBcInBvaW50ZXJlbnRlclwiIC0+IFBvaW50ZXJlbnRlclxuICAgICAgICB8IFwicG9pbnRlcmxlYXZlXCIgLT4gUG9pbnRlcmxlYXZlXG4gICAgICAgIHwgXCJwb2ludGVybG9ja2NoYW5nZVwiIC0+IFBvaW50ZXJsb2NrY2hhbmdlXG4gICAgICAgIHwgXCJwb2ludGVybG9ja2Vycm9yXCIgLT4gUG9pbnRlcmxvY2tlcnJvclxuICAgICAgICB8IFwicG9pbnRlcm1vdmVcIiAtPiBQb2ludGVybW92ZVxuICAgICAgICB8IFwicG9pbnRlcm91dFwiIC0+IFBvaW50ZXJvdXRcbiAgICAgICAgfCBcInBvaW50ZXJvdmVyXCIgLT4gUG9pbnRlcm92ZXJcbiAgICAgICAgfCBcInBvaW50ZXJ1cFwiIC0+IFBvaW50ZXJ1cFxuICAgICAgICB8IFwicG9wc3RhdGVcIiAtPiBQb3BzdGF0ZVxuICAgICAgICB8IFwicHJvZ3Jlc3NcIiAtPiBQcm9ncmVzc1xuICAgICAgICB8IFwicHVzaFwiIC0+IFB1c2hcbiAgICAgICAgfCBcInB1c2hzdWJzY3JpcHRpb25jaGFuZ2VcIiAtPiBQdXNoc3Vic2NyaXB0aW9uY2hhbmdlXG4gICAgICAgIHwgXCJyYXRlY2hhbmdlXCIgLT4gUmF0ZWNoYW5nZVxuICAgICAgICB8IFwicmVhZHlzdGF0ZWNoYW5nZVwiIC0+IFJlYWR5c3RhdGVjaGFuZ2VcbiAgICAgICAgfCBcInJlcGVhdEV2ZW50XCIgLT4gUmVwZWF0RXZlbnRcbiAgICAgICAgfCBcInJlc2V0XCIgLT4gUmVzZXRcbiAgICAgICAgfCBcInJlc2l6ZVwiIC0+IFJlc2l6ZVxuICAgICAgICB8IFwicmVzb3VyY2V0aW1pbmdidWZmZXJmdWxsXCIgLT4gUmVzb3VyY2V0aW1pbmdidWZmZXJmdWxsXG4gICAgICAgIHwgXCJyZXN1bHRcIiAtPiBSZXN1bHRcbiAgICAgICAgfCBcInJlc3VtZVwiIC0+IFJlc3VtZVxuICAgICAgICB8IFwic2Nyb2xsXCIgLT4gU2Nyb2xsXG4gICAgICAgIHwgXCJzZWVrZWRcIiAtPiBTZWVrZWRcbiAgICAgICAgfCBcInNlZWtpbmdcIiAtPiBTZWVraW5nXG4gICAgICAgIHwgXCJzZWxlY3RcIiAtPiBTZWxlY3RcbiAgICAgICAgfCBcInNlbGVjdGlvbmNoYW5nZVwiIC0+IFNlbGVjdGlvbmNoYW5nZVxuICAgICAgICB8IFwic2VsZWN0c3RhcnRcIiAtPiBTZWxlY3RzdGFydFxuICAgICAgICB8IFwic2hvd1wiIC0+IFNob3dcbiAgICAgICAgfCBcInNsb3RjaGFuZ2VcIiAtPiBTbG90Y2hhbmdlXG4gICAgICAgIHwgXCJzb3VuZGVuZFwiIC0+IFNvdW5kZW5kXG4gICAgICAgIHwgXCJzb3VuZHN0YXJ0XCIgLT4gU291bmRzdGFydFxuICAgICAgICB8IFwic3BlZWNoZW5kXCIgLT4gU3BlZWNoZW5kXG4gICAgICAgIHwgXCJzcGVlY2hzdGFydFwiIC0+IFNwZWVjaHN0YXJ0XG4gICAgICAgIHwgXCJzdGFsbGVkXCIgLT4gU3RhbGxlZFxuICAgICAgICB8IFwic3RhcnRcIiAtPiBTdGFydFxuICAgICAgICB8IFwic3RvcmFnZVwiIC0+IFN0b3JhZ2VcbiAgICAgICAgfCBcInN1Ym1pdFwiIC0+IFN1Ym1pdFxuICAgICAgICB8IFwic3VjY2Vzc1wiIC0+IFN1Y2Nlc3NcbiAgICAgICAgfCBcInN1c3BlbmRcIiAtPiBTdXNwZW5kXG4gICAgICAgIHwgXCJTVkdBYm9ydFwiIC0+IFNWR0Fib3J0XG4gICAgICAgIHwgXCJTVkdFcnJvclwiIC0+IFNWR0Vycm9yXG4gICAgICAgIHwgXCJTVkdMb2FkXCIgLT4gU1ZHTG9hZFxuICAgICAgICB8IFwiU1ZHUmVzaXplXCIgLT4gU1ZHUmVzaXplXG4gICAgICAgIHwgXCJTVkdTY3JvbGxcIiAtPiBTVkdTY3JvbGxcbiAgICAgICAgfCBcIlNWR1VubG9hZFwiIC0+IFNWR1VubG9hZFxuICAgICAgICB8IFwiU1ZHWm9vbVwiIC0+IFNWR1pvb21cbiAgICAgICAgfCBcInRpbWVvdXRcIiAtPiBUaW1lb3V0XG4gICAgICAgIHwgXCJ0aW1ldXBkYXRlXCIgLT4gVGltZXVwZGF0ZVxuICAgICAgICB8IFwidG91Y2hjYW5jZWxcIiAtPiBUb3VjaGNhbmNlbFxuICAgICAgICB8IFwidG91Y2hlbmRcIiAtPiBUb3VjaGVuZFxuICAgICAgICB8IFwidG91Y2htb3ZlXCIgLT4gVG91Y2htb3ZlXG4gICAgICAgIHwgXCJ0b3VjaHN0YXJ0XCIgLT4gVG91Y2hzdGFydFxuICAgICAgICB8IFwidHJhbnNpdGlvbmVuZFwiIC0+IFRyYW5zaXRpb25lbmRcbiAgICAgICAgfCBcInVubG9hZFwiIC0+IFVubG9hZFxuICAgICAgICB8IFwidXBkYXRlcmVhZHlcIiAtPiBVcGRhdGVyZWFkeVxuICAgICAgICB8IFwidXBncmFkZW5lZWRlZFwiIC0+IFVwZ3JhZGVuZWVkZWRcbiAgICAgICAgfCBcInVzZXJwcm94aW1pdHlcIiAtPiBVc2VycHJveGltaXR5XG4gICAgICAgIHwgXCJ2ZXJzaW9uY2hhbmdlXCIgLT4gVmVyc2lvbmNoYW5nZVxuICAgICAgICB8IFwidmlzaWJpbGl0eWNoYW5nZVwiIC0+IFZpc2liaWxpdHljaGFuZ2VcbiAgICAgICAgfCBcInZvaWNlc2NoYW5nZWRcIiAtPiBWb2ljZXNjaGFuZ2VkXG4gICAgICAgIHwgXCJ2b2x1bWVjaGFuZ2VcIiAtPiBWb2x1bWVjaGFuZ2VcbiAgICAgICAgfCBcIndhaXRpbmdcIiAtPiBXYWl0aW5nXG4gICAgICAgIHwgXCJ3aGVlbFwiIC0+IFdoZWVsXG4gICAgICAgIHwgeDE2MCAtPiBOb25TdGFuZGFyZCB4MTYwXG4gICAgYW5kIGtpbmRfdG9fanMgOiBraW5kIC0+IE9qcy50ID1cbiAgICAgIGZ1biAoeDE1NiA6IGtpbmQpIC0+XG4gICAgICAgIG1hdGNoIHgxNTYgd2l0aFxuICAgICAgICB8IEFib3J0IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJhYm9ydFwiXG4gICAgICAgIHwgQWZ0ZXJwcmludCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiYWZ0ZXJwcmludFwiXG4gICAgICAgIHwgQW5pbWF0aW9uZW5kIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJhbmltYXRpb25lbmRcIlxuICAgICAgICB8IEFuaW1hdGlvbml0ZXJhdGlvbiAtPiBPanMuc3RyaW5nX3RvX2pzIFwiYW5pbWF0aW9uaXRlcmF0aW9uXCJcbiAgICAgICAgfCBBbmltYXRpb25zdGFydCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiYW5pbWF0aW9uc3RhcnRcIlxuICAgICAgICB8IEFwcGluc3RhbGxlZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiYXBwaW5zdGFsbGVkXCJcbiAgICAgICAgfCBBdWRpb2VuZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiYXVkaW9lbmRcIlxuICAgICAgICB8IEF1ZGlvcHJvY2VzcyAtPiBPanMuc3RyaW5nX3RvX2pzIFwiYXVkaW9wcm9jZXNzXCJcbiAgICAgICAgfCBBdWRpb3N0YXJ0IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJhdWRpb3N0YXJ0XCJcbiAgICAgICAgfCBCZWZvcmVwcmludCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiYmVmb3JlcHJpbnRcIlxuICAgICAgICB8IEJlZm9yZXVubG9hZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiYmVmb3JldW5sb2FkXCJcbiAgICAgICAgfCBCZWdpbkV2ZW50IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJiZWdpbkV2ZW50XCJcbiAgICAgICAgfCBCbG9ja2VkIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJibG9ja2VkXCJcbiAgICAgICAgfCBCbHVyIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJibHVyXCJcbiAgICAgICAgfCBCb3VuZGFyeSAtPiBPanMuc3RyaW5nX3RvX2pzIFwiYm91bmRhcnlcIlxuICAgICAgICB8IENhY2hlZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY2FjaGVkXCJcbiAgICAgICAgfCBDYW5wbGF5IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJjYW5wbGF5XCJcbiAgICAgICAgfCBDYW5wbGF5dGhyb3VnaCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY2FucGxheXRocm91Z2hcIlxuICAgICAgICB8IENoYW5nZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY2hhbmdlXCJcbiAgICAgICAgfCBDaGFyZ2luZ2NoYW5nZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY2hhcmdpbmdjaGFuZ2VcIlxuICAgICAgICB8IENoYXJnaW5ndGltZWNoYW5nZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY2hhcmdpbmd0aW1lY2hhbmdlXCJcbiAgICAgICAgfCBDaGVja2luZyAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY2hlY2tpbmdcIlxuICAgICAgICB8IENsaWNrIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJjbGlja1wiXG4gICAgICAgIHwgQ2xvc2UgLT4gT2pzLnN0cmluZ190b19qcyBcImNsb3NlXCJcbiAgICAgICAgfCBDb21wbGV0ZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY29tcGxldGVcIlxuICAgICAgICB8IENvbXBvc2l0aW9uZW5kIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJjb21wb3NpdGlvbmVuZFwiXG4gICAgICAgIHwgQ29tcG9zaXRpb25zdGFydCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY29tcG9zaXRpb25zdGFydFwiXG4gICAgICAgIHwgQ29tcG9zaXRpb251cGRhdGUgLT4gT2pzLnN0cmluZ190b19qcyBcImNvbXBvc2l0aW9udXBkYXRlXCJcbiAgICAgICAgfCBDb250ZXh0bWVudSAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY29udGV4dG1lbnVcIlxuICAgICAgICB8IENvcHkgLT4gT2pzLnN0cmluZ190b19qcyBcImNvcHlcIlxuICAgICAgICB8IEN1dCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiY3V0XCJcbiAgICAgICAgfCBEYmxjbGljayAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZGJsY2xpY2tcIlxuICAgICAgICB8IERldmljZWNoYW5nZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZGV2aWNlY2hhbmdlXCJcbiAgICAgICAgfCBEZXZpY2VsaWdodCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZGV2aWNlbGlnaHRcIlxuICAgICAgICB8IERldmljZW1vdGlvbiAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZGV2aWNlbW90aW9uXCJcbiAgICAgICAgfCBEZXZpY2VvcmllbnRhdGlvbiAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZGV2aWNlb3JpZW50YXRpb25cIlxuICAgICAgICB8IERldmljZXByb3hpbWl0eSAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZGV2aWNlcHJveGltaXR5XCJcbiAgICAgICAgfCBEaXNjaGFyZ2luZ3RpbWVjaGFuZ2UgLT4gT2pzLnN0cmluZ190b19qcyBcImRpc2NoYXJnaW5ndGltZWNoYW5nZVwiXG4gICAgICAgIHwgRE9NQWN0aXZhdGUgLT4gT2pzLnN0cmluZ190b19qcyBcIkRPTUFjdGl2YXRlXCJcbiAgICAgICAgfCBET01BdHRyaWJ1dGVOYW1lQ2hhbmdlZCAtPlxuICAgICAgICAgICAgT2pzLnN0cmluZ190b19qcyBcIkRPTUF0dHJpYnV0ZU5hbWVDaGFuZ2VkXCJcbiAgICAgICAgfCBET01BdHRyTW9kaWZpZWQgLT4gT2pzLnN0cmluZ190b19qcyBcIkRPTUF0dHJNb2RpZmllZFwiXG4gICAgICAgIHwgRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkIC0+XG4gICAgICAgICAgICBPanMuc3RyaW5nX3RvX2pzIFwiRE9NQ2hhcmFjdGVyRGF0YU1vZGlmaWVkXCJcbiAgICAgICAgfCBET01Db250ZW50TG9hZGVkIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJET01Db250ZW50TG9hZGVkXCJcbiAgICAgICAgfCBET01FbGVtZW50TmFtZUNoYW5nZWQgLT4gT2pzLnN0cmluZ190b19qcyBcIkRPTUVsZW1lbnROYW1lQ2hhbmdlZFwiXG4gICAgICAgIHwgRE9NRm9jdXNJbiAtPiBPanMuc3RyaW5nX3RvX2pzIFwiRE9NRm9jdXNJblwiXG4gICAgICAgIHwgRE9NRm9jdXNPdXQgLT4gT2pzLnN0cmluZ190b19qcyBcIkRPTUZvY3VzT3V0XCJcbiAgICAgICAgfCBET01Ob2RlSW5zZXJ0ZWQgLT4gT2pzLnN0cmluZ190b19qcyBcIkRPTU5vZGVJbnNlcnRlZFwiXG4gICAgICAgIHwgRE9NTm9kZUluc2VydGVkSW50b0RvY3VtZW50IC0+XG4gICAgICAgICAgICBPanMuc3RyaW5nX3RvX2pzIFwiRE9NTm9kZUluc2VydGVkSW50b0RvY3VtZW50XCJcbiAgICAgICAgfCBET01Ob2RlUmVtb3ZlZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiRE9NTm9kZVJlbW92ZWRcIlxuICAgICAgICB8IERPTU5vZGVSZW1vdmVkRnJvbURvY3VtZW50IC0+XG4gICAgICAgICAgICBPanMuc3RyaW5nX3RvX2pzIFwiRE9NTm9kZVJlbW92ZWRGcm9tRG9jdW1lbnRcIlxuICAgICAgICB8IERPTVN1YnRyZWVNb2RpZmllZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiRE9NU3VidHJlZU1vZGlmaWVkXCJcbiAgICAgICAgfCBEb3dubG9hZGluZyAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZG93bmxvYWRpbmdcIlxuICAgICAgICB8IERyYWcgLT4gT2pzLnN0cmluZ190b19qcyBcImRyYWdcIlxuICAgICAgICB8IERyYWdlbmQgLT4gT2pzLnN0cmluZ190b19qcyBcImRyYWdlbmRcIlxuICAgICAgICB8IERyYWdlbnRlciAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZHJhZ2VudGVyXCJcbiAgICAgICAgfCBEcmFnbGVhdmUgLT4gT2pzLnN0cmluZ190b19qcyBcImRyYWdsZWF2ZVwiXG4gICAgICAgIHwgRHJhZ292ZXIgLT4gT2pzLnN0cmluZ190b19qcyBcImRyYWdvdmVyXCJcbiAgICAgICAgfCBEcmFnc3RhcnQgLT4gT2pzLnN0cmluZ190b19qcyBcImRyYWdzdGFydFwiXG4gICAgICAgIHwgRHJvcCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZHJvcFwiXG4gICAgICAgIHwgRHVyYXRpb25jaGFuZ2UgLT4gT2pzLnN0cmluZ190b19qcyBcImR1cmF0aW9uY2hhbmdlXCJcbiAgICAgICAgfCBFbXB0aWVkIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJlbXB0aWVkXCJcbiAgICAgICAgfCBFbmQgLT4gT2pzLnN0cmluZ190b19qcyBcImVuZFwiXG4gICAgICAgIHwgRW5kZWQgLT4gT2pzLnN0cmluZ190b19qcyBcImVuZGVkXCJcbiAgICAgICAgfCBFbmRFdmVudCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZW5kRXZlbnRcIlxuICAgICAgICB8IEVycm9yIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJlcnJvclwiXG4gICAgICAgIHwgRm9jdXMgLT4gT2pzLnN0cmluZ190b19qcyBcImZvY3VzXCJcbiAgICAgICAgfCBGb2N1c2luIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJmb2N1c2luXCJcbiAgICAgICAgfCBGb2N1c291dCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZm9jdXNvdXRcIlxuICAgICAgICB8IEZ1bGxzY3JlZW5jaGFuZ2UgLT4gT2pzLnN0cmluZ190b19qcyBcImZ1bGxzY3JlZW5jaGFuZ2VcIlxuICAgICAgICB8IEZ1bGxzY3JlZW5lcnJvciAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZnVsbHNjcmVlbmVycm9yXCJcbiAgICAgICAgfCBHYW1lcGFkY29ubmVjdGVkIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJnYW1lcGFkY29ubmVjdGVkXCJcbiAgICAgICAgfCBHYW1lcGFkZGlzY29ubmVjdGVkIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJnYW1lcGFkZGlzY29ubmVjdGVkXCJcbiAgICAgICAgfCBHb3Rwb2ludGVyY2FwdHVyZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwiZ290cG9pbnRlcmNhcHR1cmVcIlxuICAgICAgICB8IEhhc2hjaGFuZ2UgLT4gT2pzLnN0cmluZ190b19qcyBcImhhc2hjaGFuZ2VcIlxuICAgICAgICB8IElucHV0IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJpbnB1dFwiXG4gICAgICAgIHwgSW52YWxpZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiaW52YWxpZFwiXG4gICAgICAgIHwgS2V5ZG93biAtPiBPanMuc3RyaW5nX3RvX2pzIFwia2V5ZG93blwiXG4gICAgICAgIHwgS2V5cHJlc3MgLT4gT2pzLnN0cmluZ190b19qcyBcImtleXByZXNzXCJcbiAgICAgICAgfCBLZXl1cCAtPiBPanMuc3RyaW5nX3RvX2pzIFwia2V5dXBcIlxuICAgICAgICB8IExhbmd1YWdlY2hhbmdlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJsYW5ndWFnZWNoYW5nZVwiXG4gICAgICAgIHwgTGV2ZWxjaGFuZ2UgLT4gT2pzLnN0cmluZ190b19qcyBcImxldmVsY2hhbmdlXCJcbiAgICAgICAgfCBMb2FkIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJsb2FkXCJcbiAgICAgICAgfCBMb2FkZWRkYXRhIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJsb2FkZWRkYXRhXCJcbiAgICAgICAgfCBMb2FkZWRtZXRhZGF0YSAtPiBPanMuc3RyaW5nX3RvX2pzIFwibG9hZGVkbWV0YWRhdGFcIlxuICAgICAgICB8IExvYWRlbmQgLT4gT2pzLnN0cmluZ190b19qcyBcImxvYWRlbmRcIlxuICAgICAgICB8IExvYWRzdGFydCAtPiBPanMuc3RyaW5nX3RvX2pzIFwibG9hZHN0YXJ0XCJcbiAgICAgICAgfCBMb3N0cG9pbnRlcmNhcHR1cmUgLT4gT2pzLnN0cmluZ190b19qcyBcImxvc3Rwb2ludGVyY2FwdHVyZVwiXG4gICAgICAgIHwgTWFyayAtPiBPanMuc3RyaW5nX3RvX2pzIFwibWFya1wiXG4gICAgICAgIHwgTWVzc2FnZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwibWVzc2FnZVwiXG4gICAgICAgIHwgTWVzc2FnZWVycm9yIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJtZXNzYWdlZXJyb3JcIlxuICAgICAgICB8IE1vdXNlZG93biAtPiBPanMuc3RyaW5nX3RvX2pzIFwibW91c2Vkb3duXCJcbiAgICAgICAgfCBNb3VzZWVudGVyIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJtb3VzZWVudGVyXCJcbiAgICAgICAgfCBNb3VzZWxlYXZlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJtb3VzZWxlYXZlXCJcbiAgICAgICAgfCBNb3VzZW1vdmUgLT4gT2pzLnN0cmluZ190b19qcyBcIm1vdXNlbW92ZVwiXG4gICAgICAgIHwgTW91c2VvdXQgLT4gT2pzLnN0cmluZ190b19qcyBcIm1vdXNlb3V0XCJcbiAgICAgICAgfCBNb3VzZW92ZXIgLT4gT2pzLnN0cmluZ190b19qcyBcIm1vdXNlb3ZlclwiXG4gICAgICAgIHwgTW91c2V1cCAtPiBPanMuc3RyaW5nX3RvX2pzIFwibW91c2V1cFwiXG4gICAgICAgIHwgTm9tYXRjaCAtPiBPanMuc3RyaW5nX3RvX2pzIFwibm9tYXRjaFwiXG4gICAgICAgIHwgTm90aWZpY2F0aW9uY2xpY2sgLT4gT2pzLnN0cmluZ190b19qcyBcIm5vdGlmaWNhdGlvbmNsaWNrXCJcbiAgICAgICAgfCBOb3VwZGF0ZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwibm91cGRhdGVcIlxuICAgICAgICB8IE9ic29sZXRlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJvYnNvbGV0ZVwiXG4gICAgICAgIHwgT2ZmbGluZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwib2ZmbGluZVwiXG4gICAgICAgIHwgT25saW5lIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJvbmxpbmVcIlxuICAgICAgICB8IE9wZW4gLT4gT2pzLnN0cmluZ190b19qcyBcIm9wZW5cIlxuICAgICAgICB8IE9yaWVudGF0aW9uY2hhbmdlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJvcmllbnRhdGlvbmNoYW5nZVwiXG4gICAgICAgIHwgUGFnZWhpZGUgLT4gT2pzLnN0cmluZ190b19qcyBcInBhZ2VoaWRlXCJcbiAgICAgICAgfCBQYWdlc2hvdyAtPiBPanMuc3RyaW5nX3RvX2pzIFwicGFnZXNob3dcIlxuICAgICAgICB8IFBhc3RlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwYXN0ZVwiXG4gICAgICAgIHwgUGF1c2UgLT4gT2pzLnN0cmluZ190b19qcyBcInBhdXNlXCJcbiAgICAgICAgfCBQbGF5IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwbGF5XCJcbiAgICAgICAgfCBQbGF5aW5nIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwbGF5aW5nXCJcbiAgICAgICAgfCBQb2ludGVyY2FuY2VsIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwb2ludGVyY2FuY2VsXCJcbiAgICAgICAgfCBQb2ludGVyZG93biAtPiBPanMuc3RyaW5nX3RvX2pzIFwicG9pbnRlcmRvd25cIlxuICAgICAgICB8IFBvaW50ZXJlbnRlciAtPiBPanMuc3RyaW5nX3RvX2pzIFwicG9pbnRlcmVudGVyXCJcbiAgICAgICAgfCBQb2ludGVybGVhdmUgLT4gT2pzLnN0cmluZ190b19qcyBcInBvaW50ZXJsZWF2ZVwiXG4gICAgICAgIHwgUG9pbnRlcmxvY2tjaGFuZ2UgLT4gT2pzLnN0cmluZ190b19qcyBcInBvaW50ZXJsb2NrY2hhbmdlXCJcbiAgICAgICAgfCBQb2ludGVybG9ja2Vycm9yIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwb2ludGVybG9ja2Vycm9yXCJcbiAgICAgICAgfCBQb2ludGVybW92ZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwicG9pbnRlcm1vdmVcIlxuICAgICAgICB8IFBvaW50ZXJvdXQgLT4gT2pzLnN0cmluZ190b19qcyBcInBvaW50ZXJvdXRcIlxuICAgICAgICB8IFBvaW50ZXJvdmVyIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwb2ludGVyb3ZlclwiXG4gICAgICAgIHwgUG9pbnRlcnVwIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwb2ludGVydXBcIlxuICAgICAgICB8IFBvcHN0YXRlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwb3BzdGF0ZVwiXG4gICAgICAgIHwgUHJvZ3Jlc3MgLT4gT2pzLnN0cmluZ190b19qcyBcInByb2dyZXNzXCJcbiAgICAgICAgfCBQdXNoIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwdXNoXCJcbiAgICAgICAgfCBQdXNoc3Vic2NyaXB0aW9uY2hhbmdlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJwdXNoc3Vic2NyaXB0aW9uY2hhbmdlXCJcbiAgICAgICAgfCBSYXRlY2hhbmdlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJyYXRlY2hhbmdlXCJcbiAgICAgICAgfCBSZWFkeXN0YXRlY2hhbmdlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJyZWFkeXN0YXRlY2hhbmdlXCJcbiAgICAgICAgfCBSZXBlYXRFdmVudCAtPiBPanMuc3RyaW5nX3RvX2pzIFwicmVwZWF0RXZlbnRcIlxuICAgICAgICB8IFJlc2V0IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJyZXNldFwiXG4gICAgICAgIHwgUmVzaXplIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJyZXNpemVcIlxuICAgICAgICB8IFJlc291cmNldGltaW5nYnVmZmVyZnVsbCAtPlxuICAgICAgICAgICAgT2pzLnN0cmluZ190b19qcyBcInJlc291cmNldGltaW5nYnVmZmVyZnVsbFwiXG4gICAgICAgIHwgUmVzdWx0IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJyZXN1bHRcIlxuICAgICAgICB8IFJlc3VtZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwicmVzdW1lXCJcbiAgICAgICAgfCBTY3JvbGwgLT4gT2pzLnN0cmluZ190b19qcyBcInNjcm9sbFwiXG4gICAgICAgIHwgU2Vla2VkIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJzZWVrZWRcIlxuICAgICAgICB8IFNlZWtpbmcgLT4gT2pzLnN0cmluZ190b19qcyBcInNlZWtpbmdcIlxuICAgICAgICB8IFNlbGVjdCAtPiBPanMuc3RyaW5nX3RvX2pzIFwic2VsZWN0XCJcbiAgICAgICAgfCBTZWxlY3Rpb25jaGFuZ2UgLT4gT2pzLnN0cmluZ190b19qcyBcInNlbGVjdGlvbmNoYW5nZVwiXG4gICAgICAgIHwgU2VsZWN0c3RhcnQgLT4gT2pzLnN0cmluZ190b19qcyBcInNlbGVjdHN0YXJ0XCJcbiAgICAgICAgfCBTaG93IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJzaG93XCJcbiAgICAgICAgfCBTbG90Y2hhbmdlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJzbG90Y2hhbmdlXCJcbiAgICAgICAgfCBTb3VuZGVuZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwic291bmRlbmRcIlxuICAgICAgICB8IFNvdW5kc3RhcnQgLT4gT2pzLnN0cmluZ190b19qcyBcInNvdW5kc3RhcnRcIlxuICAgICAgICB8IFNwZWVjaGVuZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwic3BlZWNoZW5kXCJcbiAgICAgICAgfCBTcGVlY2hzdGFydCAtPiBPanMuc3RyaW5nX3RvX2pzIFwic3BlZWNoc3RhcnRcIlxuICAgICAgICB8IFN0YWxsZWQgLT4gT2pzLnN0cmluZ190b19qcyBcInN0YWxsZWRcIlxuICAgICAgICB8IFN0YXJ0IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJzdGFydFwiXG4gICAgICAgIHwgU3RvcmFnZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwic3RvcmFnZVwiXG4gICAgICAgIHwgU3VibWl0IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJzdWJtaXRcIlxuICAgICAgICB8IFN1Y2Nlc3MgLT4gT2pzLnN0cmluZ190b19qcyBcInN1Y2Nlc3NcIlxuICAgICAgICB8IFN1c3BlbmQgLT4gT2pzLnN0cmluZ190b19qcyBcInN1c3BlbmRcIlxuICAgICAgICB8IFNWR0Fib3J0IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJTVkdBYm9ydFwiXG4gICAgICAgIHwgU1ZHRXJyb3IgLT4gT2pzLnN0cmluZ190b19qcyBcIlNWR0Vycm9yXCJcbiAgICAgICAgfCBTVkdMb2FkIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJTVkdMb2FkXCJcbiAgICAgICAgfCBTVkdSZXNpemUgLT4gT2pzLnN0cmluZ190b19qcyBcIlNWR1Jlc2l6ZVwiXG4gICAgICAgIHwgU1ZHU2Nyb2xsIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJTVkdTY3JvbGxcIlxuICAgICAgICB8IFNWR1VubG9hZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwiU1ZHVW5sb2FkXCJcbiAgICAgICAgfCBTVkdab29tIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJTVkdab29tXCJcbiAgICAgICAgfCBUaW1lb3V0IC0+IE9qcy5zdHJpbmdfdG9fanMgXCJ0aW1lb3V0XCJcbiAgICAgICAgfCBUaW1ldXBkYXRlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJ0aW1ldXBkYXRlXCJcbiAgICAgICAgfCBUb3VjaGNhbmNlbCAtPiBPanMuc3RyaW5nX3RvX2pzIFwidG91Y2hjYW5jZWxcIlxuICAgICAgICB8IFRvdWNoZW5kIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJ0b3VjaGVuZFwiXG4gICAgICAgIHwgVG91Y2htb3ZlIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJ0b3VjaG1vdmVcIlxuICAgICAgICB8IFRvdWNoc3RhcnQgLT4gT2pzLnN0cmluZ190b19qcyBcInRvdWNoc3RhcnRcIlxuICAgICAgICB8IFRyYW5zaXRpb25lbmQgLT4gT2pzLnN0cmluZ190b19qcyBcInRyYW5zaXRpb25lbmRcIlxuICAgICAgICB8IFVubG9hZCAtPiBPanMuc3RyaW5nX3RvX2pzIFwidW5sb2FkXCJcbiAgICAgICAgfCBVcGRhdGVyZWFkeSAtPiBPanMuc3RyaW5nX3RvX2pzIFwidXBkYXRlcmVhZHlcIlxuICAgICAgICB8IFVwZ3JhZGVuZWVkZWQgLT4gT2pzLnN0cmluZ190b19qcyBcInVwZ3JhZGVuZWVkZWRcIlxuICAgICAgICB8IFVzZXJwcm94aW1pdHkgLT4gT2pzLnN0cmluZ190b19qcyBcInVzZXJwcm94aW1pdHlcIlxuICAgICAgICB8IFZlcnNpb25jaGFuZ2UgLT4gT2pzLnN0cmluZ190b19qcyBcInZlcnNpb25jaGFuZ2VcIlxuICAgICAgICB8IFZpc2liaWxpdHljaGFuZ2UgLT4gT2pzLnN0cmluZ190b19qcyBcInZpc2liaWxpdHljaGFuZ2VcIlxuICAgICAgICB8IFZvaWNlc2NoYW5nZWQgLT4gT2pzLnN0cmluZ190b19qcyBcInZvaWNlc2NoYW5nZWRcIlxuICAgICAgICB8IFZvbHVtZWNoYW5nZSAtPiBPanMuc3RyaW5nX3RvX2pzIFwidm9sdW1lY2hhbmdlXCJcbiAgICAgICAgfCBXYWl0aW5nIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJ3YWl0aW5nXCJcbiAgICAgICAgfCBXaGVlbCAtPiBPanMuc3RyaW5nX3RvX2pzIFwid2hlZWxcIlxuICAgICAgICB8IE5vblN0YW5kYXJkIHgxNTcgLT4gT2pzLnN0cmluZ190b19qcyB4MTU3XG4gICAgbGV0ICh0YXJnZXQgOiB0IC0+IE9qcy50KSA9XG4gICAgICBmdW4gKHgxNjEgOiB0KSAtPiBPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE2MSkgXCJ0YXJnZXRcIlxuICAgIGxldCAocmVsYXRlZF90YXJnZXQgOiB0IC0+IE9qcy50IG9wdGlvbikgPVxuICAgICAgZnVuICh4MTYyIDogdCkgLT5cbiAgICAgICAgT2pzLm9wdGlvbl9vZl9qcyAoZnVuICh4MTYzIDogT2pzLnQpIC0+IHgxNjMpXG4gICAgICAgICAgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTYyKSBcInJlbGF0ZWRUYXJnZXRcIilcbiAgICBsZXQgKHByZXZlbnRfZGVmYXVsdCA6IHQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MTY0IDogdCkgLT5cbiAgICAgICAgaWdub3JlIChPanMuY2FsbCAodF90b19qcyB4MTY0KSBcInByZXZlbnREZWZhdWx0XCIgW3x8XSlcbiAgICBsZXQgKHN0b3BfcHJvcGFnYXRpb24gOiB0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDE2NSA6IHQpIC0+XG4gICAgICAgIGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDE2NSkgXCJzdG9wUHJvcGFnYXRpb25cIiBbfHxdKVxuICAgIGxldCAodHlwZV8gOiB0IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4MTY2IDogdCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxNjYpIFwidHlwZVwiKVxuICAgIGxldCAoaW5pdF9ldmVudCA6IHQgLT4ga2luZCAtPiBib29sIC0+IGJvb2wgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MTcwIDogdCkgLT5cbiAgICAgICAgZnVuICh4MTY3IDoga2luZCkgLT5cbiAgICAgICAgICBmdW4gKHgxNjggOiBib29sKSAtPlxuICAgICAgICAgICAgZnVuICh4MTY5IDogYm9vbCkgLT5cbiAgICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHgxNzApIFwiaW5pdEV2ZW50XCJcbiAgICAgICAgICAgICAgICAgICBbfChraW5kX3RvX2pzIHgxNjcpOyhPanMuYm9vbF90b19qcyB4MTY4KTsoT2pzLmJvb2xfdG9fanNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MTY5KXxdKVxuICAgIGxldCAoY2xpZW50X3ggOiB0IC0+IGZsb2F0KSA9XG4gICAgICBmdW4gKHgxNzEgOiB0KSAtPlxuICAgICAgICBPanMuZmxvYXRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTcxKSBcImNsaWVudFhcIilcbiAgICBsZXQgKGNsaWVudF95IDogdCAtPiBmbG9hdCkgPVxuICAgICAgZnVuICh4MTcyIDogdCkgLT5cbiAgICAgICAgT2pzLmZsb2F0X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE3MikgXCJjbGllbnRZXCIpXG4gICAgbGV0IChwYWdlX3ggOiB0IC0+IGZsb2F0KSA9XG4gICAgICBmdW4gKHgxNzMgOiB0KSAtPlxuICAgICAgICBPanMuZmxvYXRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTczKSBcInBhZ2VYXCIpXG4gICAgbGV0IChwYWdlX3kgOiB0IC0+IGZsb2F0KSA9XG4gICAgICBmdW4gKHgxNzQgOiB0KSAtPlxuICAgICAgICBPanMuZmxvYXRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTc0KSBcInBhZ2VZXCIpXG4gICAgbGV0IChzY3JlZW5feCA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHgxNzUgOiB0KSAtPlxuICAgICAgICBPanMuaW50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE3NSkgXCJzY3JlZW5YXCIpXG4gICAgbGV0IChzY3JlZW5feSA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHgxNzYgOiB0KSAtPlxuICAgICAgICBPanMuaW50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE3NikgXCJzY3JlZW5ZXCIpXG4gICAgbGV0IChtb3ZlbWVudF94IDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDE3NyA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTc3KSBcIm1vdmVtZW50WFwiKVxuICAgIGxldCAobW92ZW1lbnRfeSA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHgxNzggOiB0KSAtPlxuICAgICAgICBPanMuaW50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE3OCkgXCJtb3ZlbWVudFlcIilcbiAgICBsZXQgKGJ1dHRvbnMgOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4MTc5IDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxNzkpIFwiYnV0dG9uc1wiKVxuICAgIGxldCAoYWx0X2tleSA6IHQgLT4gYm9vbCkgPVxuICAgICAgZnVuICh4MTgwIDogdCkgLT5cbiAgICAgICAgT2pzLmJvb2xfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTgwKSBcImFsdEtleVwiKVxuICAgIGxldCAoY3RybF9rZXkgOiB0IC0+IGJvb2wpID1cbiAgICAgIGZ1biAoeDE4MSA6IHQpIC0+XG4gICAgICAgIE9qcy5ib29sX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE4MSkgXCJjdHJsS2V5XCIpXG4gICAgbGV0IChzaGlmdF9rZXkgOiB0IC0+IGJvb2wpID1cbiAgICAgIGZ1biAoeDE4MiA6IHQpIC0+XG4gICAgICAgIE9qcy5ib29sX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE4MikgXCJzaGlmdEtleVwiKVxuICAgIGxldCAod2hpY2ggOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4MTgzIDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxODMpIFwid2hpY2hcIilcbiAgICBsZXQgKGNvZGUgOiB0IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4MTg0IDogdCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxODQpIFwiY29kZVwiKVxuICAgIGxldCAoa2V5IDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDE4NSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTg1KSBcImtleVwiKVxuICAgIGxldCAoZGVsdGFfeSA6IHQgLT4gZmxvYXQpID1cbiAgICAgIGZ1biAoeDE4NiA6IHQpIC0+XG4gICAgICAgIE9qcy5mbG9hdF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxODYpIFwiZGVsdGFZXCIpXG4gICAgbGV0IChkZWx0YV94IDogdCAtPiBmbG9hdCkgPVxuICAgICAgZnVuICh4MTg3IDogdCkgLT5cbiAgICAgICAgT2pzLmZsb2F0X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE4NykgXCJkZWx0YVhcIilcbiAgICBsZXQgKGRhdGFfdHJhbnNmZXIgOiB0IC0+IERhdGFUcmFuc2Zlci50KSA9XG4gICAgICBmdW4gKHgxODggOiB0KSAtPlxuICAgICAgICBEYXRhVHJhbnNmZXIudF9vZl9qc1xuICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE4OCkgXCJkYXRhVHJhbnNmZXJcIilcbiAgICBsZXQgKGNsaXBib2FyZF9kYXRhIDogdCAtPiBEYXRhVHJhbnNmZXIudCkgPVxuICAgICAgZnVuICh4MTg5IDogdCkgLT5cbiAgICAgICAgRGF0YVRyYW5zZmVyLnRfb2ZfanNcbiAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxODkpIFwiY2xpcGJvYXJkRGF0YVwiKVxuICAgIGxldCAoZGF0YSA6IHQgLT4gT2pzLnQpID1cbiAgICAgIGZ1biAoeDE5MCA6IHQpIC0+IE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTkwKSBcImRhdGFcIlxuICAgIGxldCAob3JpZ2luIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDE5MSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTkxKSBcIm9yaWdpblwiKVxuICAgIGxldCAoc3RhdGUgOiB0IC0+IE9qcy50KSA9XG4gICAgICBmdW4gKHgxOTIgOiB0KSAtPiBPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE5MikgXCJzdGF0ZVwiXG4gIGVuZFxubW9kdWxlIFJlY3QgPVxuICBzdHJ1Y3RcbiAgICB0eXBlIHQgPSBPanMudFxuICAgIGxldCByZWMgdF9vZl9qcyA6IE9qcy50IC0+IHQgPSBmdW4gKHgxOTQgOiBPanMudCkgLT4geDE5NFxuICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDE5MyA6IE9qcy50KSAtPiB4MTkzXG4gICAgbGV0IChoZWlnaHQgOiB0IC0+IGZsb2F0KSA9XG4gICAgICBmdW4gKHgxOTUgOiB0KSAtPlxuICAgICAgICBPanMuZmxvYXRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTk1KSBcImhlaWdodFwiKVxuICAgIGxldCAod2lkdGggOiB0IC0+IGZsb2F0KSA9XG4gICAgICBmdW4gKHgxOTYgOiB0KSAtPlxuICAgICAgICBPanMuZmxvYXRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MTk2KSBcIndpZHRoXCIpXG4gICAgbGV0IChsZWZ0IDogdCAtPiBmbG9hdCkgPVxuICAgICAgZnVuICh4MTk3IDogdCkgLT5cbiAgICAgICAgT2pzLmZsb2F0X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDE5NykgXCJsZWZ0XCIpXG4gICAgbGV0IChyaWdodCA6IHQgLT4gZmxvYXQpID1cbiAgICAgIGZ1biAoeDE5OCA6IHQpIC0+XG4gICAgICAgIE9qcy5mbG9hdF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxOTgpIFwicmlnaHRcIilcbiAgICBsZXQgKHRvcCA6IHQgLT4gZmxvYXQpID1cbiAgICAgIGZ1biAoeDE5OSA6IHQpIC0+XG4gICAgICAgIE9qcy5mbG9hdF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgxOTkpIFwidG9wXCIpXG4gICAgbGV0IChib3R0b20gOiB0IC0+IGZsb2F0KSA9XG4gICAgICBmdW4gKHgyMDAgOiB0KSAtPlxuICAgICAgICBPanMuZmxvYXRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MjAwKSBcImJvdHRvbVwiKVxuICBlbmRcbm1vZHVsZSBTVkdSZWN0ID1cbiAgc3RydWN0XG4gICAgdHlwZSB0ID0gT2pzLnRcbiAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4MjAyIDogT2pzLnQpIC0+IHgyMDJcbiAgICBhbmQgdF90b19qcyA6IHQgLT4gT2pzLnQgPSBmdW4gKHgyMDEgOiBPanMudCkgLT4geDIwMVxuICAgIGxldCAoeCA6IHQgLT4gZmxvYXQpID1cbiAgICAgIGZ1biAoeDIwMyA6IHQpIC0+XG4gICAgICAgIE9qcy5mbG9hdF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgyMDMpIFwieFwiKVxuICAgIGxldCAoeSA6IHQgLT4gZmxvYXQpID1cbiAgICAgIGZ1biAoeDIwNCA6IHQpIC0+XG4gICAgICAgIE9qcy5mbG9hdF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgyMDQpIFwieVwiKVxuICAgIGxldCAoaGVpZ2h0IDogdCAtPiBmbG9hdCkgPVxuICAgICAgZnVuICh4MjA1IDogdCkgLT5cbiAgICAgICAgT2pzLmZsb2F0X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDIwNSkgXCJoZWlnaHRcIilcbiAgICBsZXQgKHdpZHRoIDogdCAtPiBmbG9hdCkgPVxuICAgICAgZnVuICh4MjA2IDogdCkgLT5cbiAgICAgICAgT2pzLmZsb2F0X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDIwNikgXCJ3aWR0aFwiKVxuICBlbmRcbm1vZHVsZSBTdHlsZSA9XG4gIHN0cnVjdFxuICAgIHR5cGUgdCA9IE9qcy50XG4gICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDIwOCA6IE9qcy50KSAtPiB4MjA4XG4gICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4MjA3IDogT2pzLnQpIC0+IHgyMDdcbiAgICBsZXQgc2V0IHN0eWxlIHByb3AgdmFsdWUgPVxuICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHN0eWxlKSBwcm9wIChPanMuc3RyaW5nX3RvX2pzIHZhbHVlKVxuICAgIGxldCAoc2V0X2NvbG9yIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjA5IDogdCkgLT5cbiAgICAgICAgZnVuICh4MjEwIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MjA5KSBcImNvbG9yXCIgKE9qcy5zdHJpbmdfdG9fanMgeDIxMClcbiAgICBsZXQgKHNldF9ib3JkZXIgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgyMTEgOiB0KSAtPlxuICAgICAgICBmdW4gKHgyMTIgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgyMTEpIFwiYm9yZGVyXCIgKE9qcy5zdHJpbmdfdG9fanMgeDIxMilcbiAgICBsZXQgKHNldF9iYWNrZ3JvdW5kIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjEzIDogdCkgLT5cbiAgICAgICAgZnVuICh4MjE0IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MjEzKSBcImJhY2tncm91bmRcIlxuICAgICAgICAgICAgKE9qcy5zdHJpbmdfdG9fanMgeDIxNClcbiAgICBsZXQgKHNldF9iYWNrZ3JvdW5kX2NvbG9yIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjE1IDogdCkgLT5cbiAgICAgICAgZnVuICh4MjE2IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MjE1KSBcImJhY2tncm91bmRDb2xvclwiXG4gICAgICAgICAgICAoT2pzLnN0cmluZ190b19qcyB4MjE2KVxuICAgIGxldCAoc2V0X2hlaWdodCA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDIxNyA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDIxOCA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDIxNykgXCJoZWlnaHRcIiAoT2pzLnN0cmluZ190b19qcyB4MjE4KVxuICAgIGxldCAoc2V0X3dpZHRoIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjE5IDogdCkgLT5cbiAgICAgICAgZnVuICh4MjIwIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MjE5KSBcIndpZHRoXCIgKE9qcy5zdHJpbmdfdG9fanMgeDIyMClcbiAgICBsZXQgKHNldF9ib3R0b20gOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgyMjEgOiB0KSAtPlxuICAgICAgICBmdW4gKHgyMjIgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgyMjEpIFwiYm90dG9tXCIgKE9qcy5zdHJpbmdfdG9fanMgeDIyMilcbiAgICBsZXQgKHNldF9sZWZ0IDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjIzIDogdCkgLT5cbiAgICAgICAgZnVuICh4MjI0IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MjIzKSBcImxlZnRcIiAoT2pzLnN0cmluZ190b19qcyB4MjI0KVxuICAgIGxldCAoc2V0X3RvcCA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDIyNSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDIyNiA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDIyNSkgXCJ0b3BcIiAoT2pzLnN0cmluZ190b19qcyB4MjI2KVxuICAgIGxldCAoc2V0X3JpZ2h0IDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjI3IDogdCkgLT5cbiAgICAgICAgZnVuICh4MjI4IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MjI3KSBcInJpZ2h0XCIgKE9qcy5zdHJpbmdfdG9fanMgeDIyOClcbiAgICBsZXQgKHNldF9wb3NpdGlvbiA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDIyOSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDIzMCA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDIyOSkgXCJwb3NpdGlvblwiXG4gICAgICAgICAgICAoT2pzLnN0cmluZ190b19qcyB4MjMwKVxuICAgIGxldCAoc2V0X2N1cnNvciA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDIzMSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDIzMiA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDIzMSkgXCJjdXJzb3JcIiAoT2pzLnN0cmluZ190b19qcyB4MjMyKVxuICAgIGxldCAoc2V0X2Rpc3BsYXkgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgyMzMgOiB0KSAtPlxuICAgICAgICBmdW4gKHgyMzQgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgyMzMpIFwiZGlzcGxheVwiIChPanMuc3RyaW5nX3RvX2pzIHgyMzQpXG4gICAgbGV0IChzZXRfdmlzaWJpbGl0eSA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDIzNSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDIzNiA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDIzNSkgXCJ2aXNpYmlsaXR5XCJcbiAgICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHgyMzYpXG4gICAgbGV0IGdldCBzdHlsZSBwcm9wID1cbiAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyBzdHlsZSkgcHJvcClcbiAgICBsZXQgdW5zZXQgc3R5bGUgcHJvcCA9IE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyBzdHlsZSkgcHJvcCBPanMubnVsbFxuICBlbmRcbm1vZHVsZSBDbGFzc0xpc3QgPVxuICBzdHJ1Y3RcbiAgICB0eXBlIHQgPSBPanMudFxuICAgIGxldCByZWMgdF9vZl9qcyA6IE9qcy50IC0+IHQgPSBmdW4gKHgyMzggOiBPanMudCkgLT4geDIzOFxuICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDIzNyA6IE9qcy50KSAtPiB4MjM3XG4gICAgbGV0IChhZGQgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgyNDAgOiB0KSAtPlxuICAgICAgICBmdW4gKHgyMzkgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgaWdub3JlIChPanMuY2FsbCAodF90b19qcyB4MjQwKSBcImFkZFwiIFt8KE9qcy5zdHJpbmdfdG9fanMgeDIzOSl8XSlcbiAgICBsZXQgKHJlbW92ZSA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDI0MiA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDI0MSA6IHN0cmluZykgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MjQyKSBcInJlbW92ZVwiIFt8KE9qcy5zdHJpbmdfdG9fanMgeDI0MSl8XSlcbiAgICBsZXQgKGNvbnRhaW5zIDogdCAtPiBzdHJpbmcgLT4gYm9vbCkgPVxuICAgICAgZnVuICh4MjQ0IDogdCkgLT5cbiAgICAgICAgZnVuICh4MjQzIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5ib29sX29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDI0NCkgXCJjb250YWluc1wiIFt8KE9qcy5zdHJpbmdfdG9fanMgeDI0Myl8XSlcbiAgICBsZXQgKHJlcGxhY2UgOiB0IC0+IHN0cmluZyAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjQ3IDogdCkgLT5cbiAgICAgICAgZnVuICh4MjQ1IDogc3RyaW5nKSAtPlxuICAgICAgICAgIGZ1biAoeDI0NiA6IHN0cmluZykgLT5cbiAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDI0NykgXCJyZXBsYWNlXCJcbiAgICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4MjQ1KTsoT2pzLnN0cmluZ190b19qcyB4MjQ2KXxdKVxuICAgIGxldCAodG9nZ2xlIDogdCAtPiBzdHJpbmcgLT4gYm9vbCAtPiBib29sKSA9XG4gICAgICBmdW4gKHgyNTAgOiB0KSAtPlxuICAgICAgICBmdW4gKHgyNDggOiBzdHJpbmcpIC0+XG4gICAgICAgICAgZnVuICh4MjQ5IDogYm9vbCkgLT5cbiAgICAgICAgICAgIE9qcy5ib29sX29mX2pzXG4gICAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MjUwKSBcInRvZ2dsZVwiXG4gICAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDI0OCk7KE9qcy5ib29sX3RvX2pzIHgyNDkpfF0pXG4gIGVuZFxubW9kdWxlIEVsZW1lbnQgPVxuICBzdHJ1Y3RcbiAgICB0eXBlIHQgPSBPanMudFxuICAgIGxldCByZWMgdF9vZl9qcyA6IE9qcy50IC0+IHQgPSBmdW4gKHgyNTIgOiBPanMudCkgLT4geDI1MlxuICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDI1MSA6IE9qcy50KSAtPiB4MjUxXG4gICAgbGV0IG51bGwgPSB0X29mX2pzIE9qcy5udWxsXG4gICAgbGV0IChpZCA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHgyNTMgOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDI1MykgXCJpZFwiKVxuICAgIGxldCAoc2V0X2lkIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjU0IDogdCkgLT5cbiAgICAgICAgZnVuICh4MjU1IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MjU0KSBcImlkXCIgKE9qcy5zdHJpbmdfdG9fanMgeDI1NSlcbiAgICB0eXBlIG5vZGVfdHlwZSA9XG4gICAgICB8IEVMRU1FTlRfTk9ERSBcbiAgICAgIHwgVEVYVF9OT0RFIFxuICAgICAgfCBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREUgXG4gICAgICB8IENPTU1FTlRfTk9ERSBcbiAgICAgIHwgRE9DVU1FTlRfTk9ERSBcbiAgICAgIHwgRE9DVU1FTlRfVFlQRV9OT0RFIFxuICAgICAgfCBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIFxuICAgIGxldCByZWMgbm9kZV90eXBlX29mX2pzIDogT2pzLnQgLT4gbm9kZV90eXBlID1cbiAgICAgIGZ1biAoeDI1NyA6IE9qcy50KSAtPlxuICAgICAgICBsZXQgeDI1OCA9IHgyNTcgaW5cbiAgICAgICAgbWF0Y2ggT2pzLmludF9vZl9qcyB4MjU4IHdpdGhcbiAgICAgICAgfCAxIC0+IEVMRU1FTlRfTk9ERVxuICAgICAgICB8IDMgLT4gVEVYVF9OT0RFXG4gICAgICAgIHwgNyAtPiBQUk9DRVNTSU5HX0lOU1RSVUNUSU9OX05PREVcbiAgICAgICAgfCA4IC0+IENPTU1FTlRfTk9ERVxuICAgICAgICB8IDkgLT4gRE9DVU1FTlRfTk9ERVxuICAgICAgICB8IDEwIC0+IERPQ1VNRU5UX1RZUEVfTk9ERVxuICAgICAgICB8IDExIC0+IERPQ1VNRU5UX0ZSQUdNRU5UX05PREVcbiAgICAgICAgfCBfIC0+IGFzc2VydCBmYWxzZVxuICAgIGFuZCBub2RlX3R5cGVfdG9fanMgOiBub2RlX3R5cGUgLT4gT2pzLnQgPVxuICAgICAgZnVuICh4MjU2IDogbm9kZV90eXBlKSAtPlxuICAgICAgICBtYXRjaCB4MjU2IHdpdGhcbiAgICAgICAgfCBFTEVNRU5UX05PREUgLT4gT2pzLmludF90b19qcyAxXG4gICAgICAgIHwgVEVYVF9OT0RFIC0+IE9qcy5pbnRfdG9fanMgM1xuICAgICAgICB8IFBST0NFU1NJTkdfSU5TVFJVQ1RJT05fTk9ERSAtPiBPanMuaW50X3RvX2pzIDdcbiAgICAgICAgfCBDT01NRU5UX05PREUgLT4gT2pzLmludF90b19qcyA4XG4gICAgICAgIHwgRE9DVU1FTlRfTk9ERSAtPiBPanMuaW50X3RvX2pzIDlcbiAgICAgICAgfCBET0NVTUVOVF9UWVBFX05PREUgLT4gT2pzLmludF90b19qcyAxMFxuICAgICAgICB8IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgLT4gT2pzLmludF90b19qcyAxMVxuICAgIGxldCAobm9kZV90eXBlIDogdCAtPiBub2RlX3R5cGUpID1cbiAgICAgIGZ1biAoeDI1OSA6IHQpIC0+XG4gICAgICAgIG5vZGVfdHlwZV9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgyNTkpIFwibm9kZVR5cGVcIilcbiAgICBsZXQgKGNsb25lX25vZGUgOiB0IC0+IGJvb2wgLT4gdCkgPVxuICAgICAgZnVuICh4MjYxIDogdCkgLT5cbiAgICAgICAgZnVuICh4MjYwIDogYm9vbCkgLT5cbiAgICAgICAgICB0X29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDI2MSkgXCJjbG9uZU5vZGVcIiBbfChPanMuYm9vbF90b19qcyB4MjYwKXxdKVxuICAgIGxldCAoY29udGFpbnMgOiB0IC0+IHQgLT4gYm9vbCkgPVxuICAgICAgZnVuICh4MjYzIDogdCkgLT5cbiAgICAgICAgZnVuICh4MjYyIDogdCkgLT5cbiAgICAgICAgICBPanMuYm9vbF9vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHgyNjMpIFwiY29udGFpbnNcIiBbfCh0X3RvX2pzIHgyNjIpfF0pXG4gICAgbGV0IChhcHBlbmRfY2hpbGQgOiB0IC0+IHQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjY1IDogdCkgLT5cbiAgICAgICAgZnVuICh4MjY0IDogdCkgLT5cbiAgICAgICAgICBpZ25vcmUgKE9qcy5jYWxsICh0X3RvX2pzIHgyNjUpIFwiYXBwZW5kQ2hpbGRcIiBbfCh0X3RvX2pzIHgyNjQpfF0pXG4gICAgbGV0IChpbnNlcnRfYmVmb3JlIDogdCAtPiB0IC0+IHQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjY4IDogdCkgLT5cbiAgICAgICAgZnVuICh4MjY2IDogdCkgLT5cbiAgICAgICAgICBmdW4gKHgyNjcgOiB0KSAtPlxuICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MjY4KSBcImluc2VydEJlZm9yZVwiXG4gICAgICAgICAgICAgICAgIFt8KHRfdG9fanMgeDI2Nik7KHRfdG9fanMgeDI2Nyl8XSlcbiAgICBsZXQgKHJlcGxhY2VfY2hpbGQgOiB0IC0+IHQgLT4gdCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgyNzEgOiB0KSAtPlxuICAgICAgICBmdW4gKHgyNjkgOiB0KSAtPlxuICAgICAgICAgIGZ1biAoeDI3MCA6IHQpIC0+XG4gICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHgyNzEpIFwicmVwbGFjZUNoaWxkXCJcbiAgICAgICAgICAgICAgICAgW3wodF90b19qcyB4MjY5KTsodF90b19qcyB4MjcwKXxdKVxuICAgIGxldCAocmVtb3ZlX2NoaWxkIDogdCAtPiB0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDI3MyA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDI3MiA6IHQpIC0+XG4gICAgICAgICAgaWdub3JlIChPanMuY2FsbCAodF90b19qcyB4MjczKSBcInJlbW92ZUNoaWxkXCIgW3wodF90b19qcyB4MjcyKXxdKVxuICAgIGxldCAoZmlyc3RfY2hpbGQgOiB0IC0+IHQpID1cbiAgICAgIGZ1biAoeDI3NCA6IHQpIC0+XG4gICAgICAgIHRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4Mjc0KSBcImZpcnN0Q2hpbGRcIilcbiAgICBsZXQgKGxhc3RfY2hpbGQgOiB0IC0+IHQpID1cbiAgICAgIGZ1biAoeDI3NSA6IHQpIC0+XG4gICAgICAgIHRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4Mjc1KSBcImxhc3RDaGlsZFwiKVxuICAgIGxldCAobmV4dF9zaWJsaW5nIDogdCAtPiB0KSA9XG4gICAgICBmdW4gKHgyNzYgOiB0KSAtPlxuICAgICAgICB0X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDI3NikgXCJuZXh0U2libGluZ1wiKVxuICAgIGxldCByZW1vdmVfYWxsX2NoaWxkcmVuIHggPVxuICAgICAgbGV0IHJlYyBsb29wIGNoaWxkID1cbiAgICAgICAgaWYgY2hpbGQgPSBudWxsXG4gICAgICAgIHRoZW4gKClcbiAgICAgICAgZWxzZSAocmVtb3ZlX2NoaWxkIHggY2hpbGQ7IGxvb3AgKGZpcnN0X2NoaWxkIHgpKSBpblxuICAgICAgbG9vcCAoZmlyc3RfY2hpbGQgeClcbiAgICBsZXQgKGhhc19jaGlsZF9ub2RlcyA6IHQgLT4gYm9vbCkgPVxuICAgICAgZnVuICh4Mjc3IDogdCkgLT5cbiAgICAgICAgT2pzLmJvb2xfb2ZfanMgKE9qcy5jYWxsICh0X3RvX2pzIHgyNzcpIFwiaGFzQ2hpbGROb2Rlc1wiIFt8fF0pXG4gICAgbGV0IChhZGRfZXZlbnRfbGlzdGVuZXIgOlxuICAgICAgdCAtPiBFdmVudC5raW5kIC0+IChFdmVudC50IC0+IHVuaXQpIC0+IGJvb2wgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjgyIDogdCkgLT5cbiAgICAgICAgZnVuICh4Mjc4IDogRXZlbnQua2luZCkgLT5cbiAgICAgICAgICBmdW4gKHgyNzkgOiBFdmVudC50IC0+IHVuaXQpIC0+XG4gICAgICAgICAgICBmdW4gKHgyODEgOiBib29sKSAtPlxuICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDI4MikgXCJhZGRFdmVudExpc3RlbmVyXCJcbiAgICAgICAgICAgICAgICAgICBbfChFdmVudC5raW5kX3RvX2pzIHgyNzgpOyhPanMuZnVuX3RvX2pzIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW4gKHgyODAgOiBPanMudCkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyNzkgKEV2ZW50LnRfb2ZfanMgeDI4MCkpKTsoXG4gICAgICAgICAgICAgICAgICAgICBPanMuYm9vbF90b19qcyB4MjgxKXxdKVxuICAgIGxldCAoYWRkX2V2ZW50X2xpc3RlbmVyX2ludGVybmFsIDpcbiAgICAgIHQgLT4gRXZlbnQua2luZCAtPiBPanMudCAtPiBib29sIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDI4NiA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDI4MyA6IEV2ZW50LmtpbmQpIC0+XG4gICAgICAgICAgZnVuICh4Mjg0IDogT2pzLnQpIC0+XG4gICAgICAgICAgICBmdW4gKHgyODUgOiBib29sKSAtPlxuICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDI4NikgXCJhZGRFdmVudExpc3RlbmVyXCJcbiAgICAgICAgICAgICAgICAgICBbfChFdmVudC5raW5kX3RvX2pzIHgyODMpO3gyODQ7KE9qcy5ib29sX3RvX2pzIHgyODUpfF0pXG4gICAgbGV0IChyZW1vdmVfZXZlbnRfbGlzdGVuZXJfaW50ZXJuYWwgOlxuICAgICAgdCAtPiBFdmVudC5raW5kIC0+IE9qcy50IC0+IGJvb2wgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MjkwIDogdCkgLT5cbiAgICAgICAgZnVuICh4Mjg3IDogRXZlbnQua2luZCkgLT5cbiAgICAgICAgICBmdW4gKHgyODggOiBPanMudCkgLT5cbiAgICAgICAgICAgIGZ1biAoeDI4OSA6IGJvb2wpIC0+XG4gICAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MjkwKSBcInJlbW92ZUV2ZW50TGlzdGVuZXJcIlxuICAgICAgICAgICAgICAgICAgIFt8KEV2ZW50LmtpbmRfdG9fanMgeDI4Nyk7eDI4ODsoT2pzLmJvb2xfdG9fanMgeDI4OSl8XSlcbiAgICBsZXQgYWRkX2NhbmNlbGxhYmxlX2V2ZW50X2xpc3RlbmVyIHggayBmIGMgPVxuICAgICAgbGV0IGYgPSBPanMuZnVuX3RvX2pzIDEgKGZ1biB4IC0+IGYgKEV2ZW50LnRfb2ZfanMgeCkpIGluXG4gICAgICBhZGRfZXZlbnRfbGlzdGVuZXJfaW50ZXJuYWwgeCBrIGYgYztcbiAgICAgIChmdW4gKCkgLT4gcmVtb3ZlX2V2ZW50X2xpc3RlbmVyX2ludGVybmFsIHggayBmIGMpXG4gICAgbGV0IChpbm5lcl90ZXh0IDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDI5MSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MjkxKSBcImlubmVyVGV4dFwiKVxuICAgIGxldCAoZ2V0X2VsZW1lbnRzX2J5X3RhZ19uYW1lIDogdCAtPiBzdHJpbmcgLT4gdCBhcnJheSkgPVxuICAgICAgZnVuICh4MjkzIDogdCkgLT5cbiAgICAgICAgZnVuICh4MjkyIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5hcnJheV9vZl9qcyB0X29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDI5MykgXCJnZXRFbGVtZW50c0J5VGFnTmFtZVwiXG4gICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHgyOTIpfF0pXG4gICAgbGV0IChnZXRfZWxlbWVudHNfYnlfY2xhc3NfbmFtZSA6IHQgLT4gc3RyaW5nIC0+IHQgYXJyYXkpID1cbiAgICAgIGZ1biAoeDI5NiA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDI5NSA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuYXJyYXlfb2ZfanMgdF9vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHgyOTYpIFwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZVwiXG4gICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHgyOTUpfF0pXG4gICAgbGV0IChoYXNfYXR0cmlidXRlIDogdCAtPiBzdHJpbmcgLT4gYm9vbCkgPVxuICAgICAgZnVuICh4Mjk5IDogdCkgLT5cbiAgICAgICAgZnVuICh4Mjk4IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5ib29sX29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDI5OSkgXCJoYXNBdHRyaWJ1dGVcIlxuICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4Mjk4KXxdKVxuICAgIGxldCAoZ2V0X2F0dHJpYnV0ZSA6IHQgLT4gc3RyaW5nIC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4MzAxIDogdCkgLT5cbiAgICAgICAgZnVuICh4MzAwIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zdHJpbmdfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MzAxKSBcImdldEF0dHJpYnV0ZVwiXG4gICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHgzMDApfF0pXG4gICAgbGV0IChyZW1vdmVfYXR0cmlidXRlIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzAzIDogdCkgLT5cbiAgICAgICAgZnVuICh4MzAyIDogc3RyaW5nKSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHgzMDMpIFwicmVtb3ZlQXR0cmlidXRlXCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDMwMil8XSlcbiAgICBsZXQgKHNldF9hdHRyaWJ1dGUgOiB0IC0+IHN0cmluZyAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzA2IDogdCkgLT5cbiAgICAgICAgZnVuICh4MzA0IDogc3RyaW5nKSAtPlxuICAgICAgICAgIGZ1biAoeDMwNSA6IHN0cmluZykgLT5cbiAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDMwNikgXCJzZXRBdHRyaWJ1dGVcIlxuICAgICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHgzMDQpOyhPanMuc3RyaW5nX3RvX2pzIHgzMDUpfF0pXG4gICAgbGV0IChnZXRfYm91bmRpbmdfY2xpZW50X3JlY3QgOiB0IC0+IFJlY3QudCkgPVxuICAgICAgZnVuICh4MzA3IDogdCkgLT5cbiAgICAgICAgUmVjdC50X29mX2pzIChPanMuY2FsbCAodF90b19qcyB4MzA3KSBcImdldEJvdW5kaW5nQ2xpZW50UmVjdFwiIFt8fF0pXG4gICAgbGV0IChnZXRfYm91bmRpbmdfYm94IDogdCAtPiBTVkdSZWN0LnQpID1cbiAgICAgIGZ1biAoeDMwOCA6IHQpIC0+XG4gICAgICAgIFNWR1JlY3QudF9vZl9qcyAoT2pzLmNhbGwgKHRfdG9fanMgeDMwOCkgXCJnZXRCQm94XCIgW3x8XSlcbiAgICB0eXBlIHNoYWRvd19tb2RlID1cbiAgICAgIHwgT3BlbiBcbiAgICAgIHwgQ2xvc2VkIFxuICAgIGxldCByZWMgc2hhZG93X21vZGVfb2ZfanMgOiBPanMudCAtPiBzaGFkb3dfbW9kZSA9XG4gICAgICBmdW4gKHgzMTAgOiBPanMudCkgLT5cbiAgICAgICAgbGV0IHgzMTEgPSB4MzEwIGluXG4gICAgICAgIG1hdGNoIE9qcy5zdHJpbmdfb2ZfanMgeDMxMSB3aXRoXG4gICAgICAgIHwgXCJvcGVuXCIgLT4gT3BlblxuICAgICAgICB8IFwiY2xvc2VkXCIgLT4gQ2xvc2VkXG4gICAgICAgIHwgXyAtPiBhc3NlcnQgZmFsc2VcbiAgICBhbmQgc2hhZG93X21vZGVfdG9fanMgOiBzaGFkb3dfbW9kZSAtPiBPanMudCA9XG4gICAgICBmdW4gKHgzMDkgOiBzaGFkb3dfbW9kZSkgLT5cbiAgICAgICAgbWF0Y2ggeDMwOSB3aXRoXG4gICAgICAgIHwgT3BlbiAtPiBPanMuc3RyaW5nX3RvX2pzIFwib3BlblwiXG4gICAgICAgIHwgQ2xvc2VkIC0+IE9qcy5zdHJpbmdfdG9fanMgXCJjbG9zZWRcIlxuICAgIGluY2x1ZGVcbiAgICAgIHN0cnVjdFxuICAgICAgICB0eXBlIHNoYWRvd19yb290X2luaXQgPSB7XG4gICAgICAgICAgbW9kZTogc2hhZG93X21vZGUgfVxuICAgICAgICBbQEBAb2NhbWwud2FybmluZyBcIi03LTMyLTM5XCJdXG4gICAgICAgIGxldCByZWMgc2hhZG93X3Jvb3RfaW5pdF9vZl9qcyA6IE9qcy50IC0+IHNoYWRvd19yb290X2luaXQgPVxuICAgICAgICAgIGZ1biAoeDMxMyA6IE9qcy50KSAtPlxuICAgICAgICAgICAgeyBtb2RlID0gKHNoYWRvd19tb2RlX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgeDMxMyBcIm1vZGVcIikpIH1cbiAgICAgICAgYW5kIHNoYWRvd19yb290X2luaXRfdG9fanMgOiBzaGFkb3dfcm9vdF9pbml0IC0+IE9qcy50ID1cbiAgICAgICAgICBmdW4gKHgzMTIgOiBzaGFkb3dfcm9vdF9pbml0KSAtPlxuICAgICAgICAgICAgT2pzLm9iaiBbfChcIm1vZGVcIiwgKHNoYWRvd19tb2RlX3RvX2pzIHgzMTIubW9kZSkpfF1cbiAgICAgIGVuZFxuICAgIGxldCAoYXR0YWNoX3NoYWRvdyA6IHQgLT4gc2hhZG93X3Jvb3RfaW5pdCAtPiB0KSA9XG4gICAgICBmdW4gKHgzMTUgOiB0KSAtPlxuICAgICAgICBmdW4gKHgzMTQgOiBzaGFkb3dfcm9vdF9pbml0KSAtPlxuICAgICAgICAgIHRfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MzE1KSBcImF0dGFjaFNoYWRvd1wiXG4gICAgICAgICAgICAgICBbfChzaGFkb3dfcm9vdF9pbml0X3RvX2pzIHgzMTQpfF0pXG4gICAgbGV0IGF0dGFjaF9zaGFkb3cgfm1vZGUgIGVsZW1lbnQgPSBhdHRhY2hfc2hhZG93IGVsZW1lbnQgeyBtb2RlIH1cbiAgICBsZXQgKG5vcm1hbGl6ZSA6IHQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzE2IDogdCkgLT4gaWdub3JlIChPanMuY2FsbCAodF90b19qcyB4MzE2KSBcIm5vcm1hbGl6ZVwiIFt8fF0pXG4gICAgbGV0ICh2YWx1ZSA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHgzMTcgOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDMxNykgXCJ2YWx1ZVwiKVxuICAgIGxldCAoc2V0X3ZhbHVlIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzE4IDogdCkgLT5cbiAgICAgICAgZnVuICh4MzE5IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzE4KSBcInZhbHVlXCIgKE9qcy5zdHJpbmdfdG9fanMgeDMxOSlcbiAgICBsZXQgKHNlbGVjdCA6IHQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzIwIDogdCkgLT4gaWdub3JlIChPanMuY2FsbCAodF90b19qcyB4MzIwKSBcInNlbGVjdFwiIFt8fF0pXG4gICAgbGV0IChmaWxlcyA6IHQgLT4gRmlsZS50IGxpc3QpID1cbiAgICAgIGZ1biAoeDMyMSA6IHQpIC0+XG4gICAgICAgIE9qcy5saXN0X29mX2pzIEZpbGUudF9vZl9qc1xuICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDMyMSkgXCJmaWxlc1wiKVxuICAgIGxldCAoc3VibWl0IDogdCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgzMjMgOiB0KSAtPiBpZ25vcmUgKE9qcy5jYWxsICh0X3RvX2pzIHgzMjMpIFwic3VibWl0XCIgW3x8XSlcbiAgICBsZXQgKHNob3dfcGlja2VyIDogdCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgzMjQgOiB0KSAtPiBpZ25vcmUgKE9qcy5jYWxsICh0X3RvX2pzIHgzMjQpIFwic2hvd1BpY2tlclwiIFt8fF0pXG4gICAgbGV0IChzZWxlY3RlZF9pbmRleCA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHgzMjUgOiB0KSAtPlxuICAgICAgICBPanMuaW50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDMyNSkgXCJzZWxlY3RlZEluZGV4XCIpXG4gICAgbGV0IChjaGVja2VkIDogdCAtPiBib29sKSA9XG4gICAgICBmdW4gKHgzMjYgOiB0KSAtPlxuICAgICAgICBPanMuYm9vbF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzMjYpIFwiY2hlY2tlZFwiKVxuICAgIGxldCAoc2V0X2NoZWNrZWQgOiB0IC0+IGJvb2wgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzI3IDogdCkgLT5cbiAgICAgICAgZnVuICh4MzI4IDogYm9vbCkgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDMyNykgXCJjaGVja2VkXCIgKE9qcy5ib29sX3RvX2pzIHgzMjgpXG4gICAgbGV0IChub2RlX3ZhbHVlIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDMyOSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzI5KSBcIm5vZGVWYWx1ZVwiKVxuICAgIGxldCAoc2V0X25vZGVfdmFsdWUgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgzMzAgOiB0KSAtPlxuICAgICAgICBmdW4gKHgzMzEgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzMzApIFwibm9kZVZhbHVlXCJcbiAgICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHgzMzEpXG4gICAgbGV0IChwYXJlbnRfbm9kZSA6IHQgLT4gdCkgPVxuICAgICAgZnVuICh4MzMyIDogdCkgLT5cbiAgICAgICAgdF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzMzIpIFwicGFyZW50Tm9kZVwiKVxuICAgIGxldCAobm9kZV9uYW1lIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDMzMyA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzMzKSBcIm5vZGVOYW1lXCIpXG4gICAgbGV0IChkaXNwYXRjaF9ldmVudCA6IHQgLT4gRXZlbnQudCAtPiBib29sKSA9XG4gICAgICBmdW4gKHgzMzUgOiB0KSAtPlxuICAgICAgICBmdW4gKHgzMzQgOiBFdmVudC50KSAtPlxuICAgICAgICAgIE9qcy5ib29sX29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDMzNSkgXCJkaXNwYXRjaEV2ZW50XCIgW3woRXZlbnQudF90b19qcyB4MzM0KXxdKVxuICAgIGxldCAoc3R5bGUgOiB0IC0+IFN0eWxlLnQpID1cbiAgICAgIGZ1biAoeDMzNiA6IHQpIC0+XG4gICAgICAgIFN0eWxlLnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzM2KSBcInN0eWxlXCIpXG4gICAgbGV0IChpbm5lcl9IVE1MIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDMzNyA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzM3KSBcImlubmVySFRNTFwiKVxuICAgIGxldCAob3V0ZXJfSFRNTCA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHgzMzggOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDMzOCkgXCJvdXRlckhUTUxcIilcbiAgICBsZXQgKHNldF9pbm5lcl9IVE1MIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzM5IDogdCkgLT5cbiAgICAgICAgZnVuICh4MzQwIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzM5KSBcImlubmVySFRNTFwiXG4gICAgICAgICAgICAoT2pzLnN0cmluZ190b19qcyB4MzQwKVxuICAgIGxldCAoc2V0X3RleHRfY29udGVudCA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDM0MSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDM0MiA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDM0MSkgXCJ0ZXh0Q29udGVudFwiXG4gICAgICAgICAgICAoT2pzLnN0cmluZ190b19qcyB4MzQyKVxuICAgIGxldCAoc2V0X2NsYXNzX25hbWUgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgzNDMgOiB0KSAtPlxuICAgICAgICBmdW4gKHgzNDQgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzNDMpIFwiY2xhc3NOYW1lXCJcbiAgICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHgzNDQpXG4gICAgbGV0IChjbGFzc19uYW1lIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDM0NSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzQ1KSBcImNsYXNzTmFtZVwiKVxuICAgIGxldCAoY2xpZW50X3dpZHRoIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDM0NiA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzQ2KSBcImNsaWVudFdpZHRoXCIpXG4gICAgbGV0IChjbGllbnRfaGVpZ2h0IDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDM0NyA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzQ3KSBcImNsaWVudEhlaWdodFwiKVxuICAgIGxldCAoc2Nyb2xsX3dpZHRoIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDM0OCA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzQ4KSBcInNjcm9sbFdpZHRoXCIpXG4gICAgbGV0IChzY3JvbGxfaGVpZ2h0IDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDM0OSA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzQ5KSBcInNjcm9sbEhlaWdodFwiKVxuICAgIGxldCAod2lkdGggOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4MzUwIDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzNTApIFwid2lkdGhcIilcbiAgICBsZXQgKGhlaWdodCA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHgzNTEgOiB0KSAtPlxuICAgICAgICBPanMuaW50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDM1MSkgXCJoZWlnaHRcIilcbiAgICBsZXQgKG9mZnNldF9wYXJlbnQgOiB0IC0+IHQgb3B0aW9uKSA9XG4gICAgICBmdW4gKHgzNTIgOiB0KSAtPlxuICAgICAgICBPanMub3B0aW9uX29mX2pzIHRfb2ZfanNcbiAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzNTIpIFwib2Zmc2V0UGFyZW50XCIpXG4gICAgbGV0IChvZmZzZXRfdG9wIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDM1NCA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzU0KSBcIm9mZnNldFRvcFwiKVxuICAgIGxldCAob2Zmc2V0X2xlZnQgOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4MzU1IDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzNTUpIFwib2Zmc2V0TGVmdFwiKVxuICAgIGxldCAob2Zmc2V0X3dpZHRoIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDM1NiA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzU2KSBcIm9mZnNldFdpZHRoXCIpXG4gICAgbGV0IChvZmZzZXRfaGVpZ2h0IDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDM1NyA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzU3KSBcIm9mZnNldEhlaWdodFwiKVxuICAgIGxldCAoc2Nyb2xsX3RvcCA6IHQgLT4gZmxvYXQpID1cbiAgICAgIGZ1biAoeDM1OCA6IHQpIC0+XG4gICAgICAgIE9qcy5mbG9hdF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzNTgpIFwic2Nyb2xsVG9wXCIpXG4gICAgbGV0IChzZXRfc2Nyb2xsX3RvcCA6IHQgLT4gZmxvYXQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzU5IDogdCkgLT5cbiAgICAgICAgZnVuICh4MzYwIDogZmxvYXQpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzNTkpIFwic2Nyb2xsVG9wXCJcbiAgICAgICAgICAgIChPanMuZmxvYXRfdG9fanMgeDM2MClcbiAgICBsZXQgKHNjcm9sbF9pbnRvX3ZpZXcgOiB0IC0+IGJvb2wgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzYyIDogdCkgLT5cbiAgICAgICAgZnVuICh4MzYxIDogYm9vbCkgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MzYyKSBcInNjcm9sbEludG9WaWV3XCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5ib29sX3RvX2pzIHgzNjEpfF0pXG4gICAgbGV0IChmb2N1cyA6IHQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4MzYzIDogdCkgLT4gaWdub3JlIChPanMuY2FsbCAodF90b19qcyB4MzYzKSBcImZvY3VzXCIgW3x8XSlcbiAgICBsZXQgKGJsdXIgOiB0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDM2NCA6IHQpIC0+IGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDM2NCkgXCJibHVyXCIgW3x8XSlcbiAgICB0eXBlIHNjcm9sbF9pbnRvX3ZpZXdfb3B0aW9ucyA9IHtcbiAgICAgIGJlaGF2aW9yOiBiZWhhdmlvciBvcHRpb24gfVxuICAgIGFuZCBiZWhhdmlvciA9XG4gICAgICB8IEF1dG8gXG4gICAgICB8IEluc3RhbnQgXG4gICAgICB8IFNtb290aCBcbiAgICBsZXQgcmVjIHNjcm9sbF9pbnRvX3ZpZXdfb3B0aW9uc19vZl9qcyA6XG4gICAgICBPanMudCAtPiBzY3JvbGxfaW50b192aWV3X29wdGlvbnMgPVxuICAgICAgZnVuICh4MzY3IDogT2pzLnQpIC0+XG4gICAgICAgIHtcbiAgICAgICAgICBiZWhhdmlvciA9XG4gICAgICAgICAgICAoT2pzLm9wdGlvbl9vZl9qcyBiZWhhdmlvcl9vZl9qc1xuICAgICAgICAgICAgICAgKE9qcy5nZXRfcHJvcF9hc2NpaSB4MzY3IFwiYmVoYXZpb3JcIikpXG4gICAgICAgIH1cbiAgICBhbmQgc2Nyb2xsX2ludG9fdmlld19vcHRpb25zX3RvX2pzIDogc2Nyb2xsX2ludG9fdmlld19vcHRpb25zIC0+IE9qcy50ID1cbiAgICAgIGZ1biAoeDM2NSA6IHNjcm9sbF9pbnRvX3ZpZXdfb3B0aW9ucykgLT5cbiAgICAgICAgT2pzLm9ialxuICAgICAgICAgIFt8KFwiYmVoYXZpb3JcIiwgKE9qcy5vcHRpb25fdG9fanMgYmVoYXZpb3JfdG9fanMgeDM2NS5iZWhhdmlvcikpfF1cbiAgICBhbmQgYmVoYXZpb3Jfb2ZfanMgOiBPanMudCAtPiBiZWhhdmlvciA9XG4gICAgICBmdW4gKHgzNzAgOiBPanMudCkgLT5cbiAgICAgICAgbGV0IHgzNzEgPSB4MzcwIGluXG4gICAgICAgIG1hdGNoIE9qcy5zdHJpbmdfb2ZfanMgeDM3MSB3aXRoXG4gICAgICAgIHwgXCJhdXRvXCIgLT4gQXV0b1xuICAgICAgICB8IFwiaW5zdGFudFwiIC0+IEluc3RhbnRcbiAgICAgICAgfCBcInNtb290aFwiIC0+IFNtb290aFxuICAgICAgICB8IF8gLT4gYXNzZXJ0IGZhbHNlXG4gICAgYW5kIGJlaGF2aW9yX3RvX2pzIDogYmVoYXZpb3IgLT4gT2pzLnQgPVxuICAgICAgZnVuICh4MzY5IDogYmVoYXZpb3IpIC0+XG4gICAgICAgIG1hdGNoIHgzNjkgd2l0aFxuICAgICAgICB8IEF1dG8gLT4gT2pzLnN0cmluZ190b19qcyBcImF1dG9cIlxuICAgICAgICB8IEluc3RhbnQgLT4gT2pzLnN0cmluZ190b19qcyBcImluc3RhbnRcIlxuICAgICAgICB8IFNtb290aCAtPiBPanMuc3RyaW5nX3RvX2pzIFwic21vb3RoXCJcbiAgICBsZXQgKHNjcm9sbF9pbnRvX3ZpZXdfb3B0aW9ucyA6IHQgLT4gc2Nyb2xsX2ludG9fdmlld19vcHRpb25zIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDM3MyA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDM3MiA6IHNjcm9sbF9pbnRvX3ZpZXdfb3B0aW9ucykgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MzczKSBcInNjcm9sbEludG9WaWV3XCJcbiAgICAgICAgICAgICAgIFt8KHNjcm9sbF9pbnRvX3ZpZXdfb3B0aW9uc190b19qcyB4MzcyKXxdKVxuICAgIHR5cGUgc2Nyb2xsX2J5X29wdGlvbnMgPVxuICAgICAge1xuICAgICAgdG9wOiBmbG9hdCA7XG4gICAgICBsZWZ0OiBmbG9hdCA7XG4gICAgICBiZWhhdmlvcjogYmVoYXZpb3Igb3B0aW9uIH1cbiAgICBsZXQgcmVjIHNjcm9sbF9ieV9vcHRpb25zX29mX2pzIDogT2pzLnQgLT4gc2Nyb2xsX2J5X29wdGlvbnMgPVxuICAgICAgZnVuICh4Mzc2IDogT2pzLnQpIC0+XG4gICAgICAgIHtcbiAgICAgICAgICB0b3AgPSAoT2pzLmZsb2F0X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgeDM3NiBcInRvcFwiKSk7XG4gICAgICAgICAgbGVmdCA9IChPanMuZmxvYXRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSB4Mzc2IFwibGVmdFwiKSk7XG4gICAgICAgICAgYmVoYXZpb3IgPVxuICAgICAgICAgICAgKE9qcy5vcHRpb25fb2ZfanMgYmVoYXZpb3Jfb2ZfanNcbiAgICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgeDM3NiBcImJlaGF2aW9yXCIpKVxuICAgICAgICB9XG4gICAgYW5kIHNjcm9sbF9ieV9vcHRpb25zX3RvX2pzIDogc2Nyb2xsX2J5X29wdGlvbnMgLT4gT2pzLnQgPVxuICAgICAgZnVuICh4Mzc0IDogc2Nyb2xsX2J5X29wdGlvbnMpIC0+XG4gICAgICAgIE9qcy5vYmpcbiAgICAgICAgICBbfChcInRvcFwiLCAoT2pzLmZsb2F0X3RvX2pzIHgzNzQudG9wKSk7KFwibGVmdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmZsb2F0X3RvX2pzIHgzNzQubGVmdCkpO1xuICAgICAgICAgICAgKFwiYmVoYXZpb3JcIiwgKE9qcy5vcHRpb25fdG9fanMgYmVoYXZpb3JfdG9fanMgeDM3NC5iZWhhdmlvcikpfF1cbiAgICBsZXQgKHNjcm9sbF9ieSA6IHQgLT4gc2Nyb2xsX2J5X29wdGlvbnMgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4Mzc5IDogdCkgLT5cbiAgICAgICAgZnVuICh4Mzc4IDogc2Nyb2xsX2J5X29wdGlvbnMpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDM3OSkgXCJzY3JvbGxCeVwiXG4gICAgICAgICAgICAgICBbfChzY3JvbGxfYnlfb3B0aW9uc190b19qcyB4Mzc4KXxdKVxuICAgIGxldCAoc2VsZWN0aW9uX3N0YXJ0IDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDM4MCA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzgwKSBcInNlbGVjdGlvblN0YXJ0XCIpXG4gICAgbGV0IChzZWxlY3Rpb25fZW5kIDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDM4MSA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4MzgxKSBcInNlbGVjdGlvbkVuZFwiKVxuICAgIGxldCAoc2V0X3NlbGVjdGlvbl9zdGFydCA6IHQgLT4gaW50IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDM4MiA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDM4MyA6IGludCkgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDM4MikgXCJzZWxlY3Rpb25TdGFydFwiXG4gICAgICAgICAgICAoT2pzLmludF90b19qcyB4MzgzKVxuICAgIGxldCAoc2V0X3NlbGVjdGlvbl9lbmQgOiB0IC0+IGludCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHgzODQgOiB0KSAtPlxuICAgICAgICBmdW4gKHgzODUgOiBpbnQpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHgzODQpIFwic2VsZWN0aW9uRW5kXCJcbiAgICAgICAgICAgIChPanMuaW50X3RvX2pzIHgzODUpXG4gICAgbGV0IChyZW1vdmUgOiB0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDM4NiA6IHQpIC0+IGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDM4NikgXCJyZW1vdmVcIiBbfHxdKVxuICAgIGxldCAoY2xpY2sgOiB0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDM4NyA6IHQpIC0+IGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDM4NykgXCJjbGlja1wiIFt8fF0pXG4gICAgbGV0IChxdWVyeV9zZWxlY3RvciA6IHQgLT4gc3RyaW5nIC0+IHQpID1cbiAgICAgIGZ1biAoeDM4OSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDM4OCA6IHN0cmluZykgLT5cbiAgICAgICAgICB0X29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDM4OSkgXCJxdWVyeVNlbGVjdG9yXCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDM4OCl8XSlcbiAgICBsZXQgKHF1ZXJ5X3NlbGVjdG9yX2FsbCA6IHQgLT4gc3RyaW5nIC0+IHQgbGlzdCkgPVxuICAgICAgZnVuICh4MzkxIDogdCkgLT5cbiAgICAgICAgZnVuICh4MzkwIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5saXN0X29mX2pzIHRfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4MzkxKSBcInF1ZXJ5U2VsZWN0b3JBbGxcIlxuICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4MzkwKXxdKVxuICAgIGxldCAoY2xhc3NfbGlzdCA6IHQgLT4gQ2xhc3NMaXN0LnQpID1cbiAgICAgIGZ1biAoeDM5MyA6IHQpIC0+XG4gICAgICAgIENsYXNzTGlzdC50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDM5MykgXCJjbGFzc0xpc3RcIilcbiAgZW5kXG5tb2R1bGUgRG9jdW1lbnQgPVxuICBzdHJ1Y3RcbiAgICB0eXBlIHQgPSBPanMudFxuICAgIGxldCByZWMgdF9vZl9qcyA6IE9qcy50IC0+IHQgPSBmdW4gKHgzOTUgOiBPanMudCkgLT4geDM5NVxuICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDM5NCA6IE9qcy50KSAtPiB4Mzk0XG4gICAgbGV0IChjcmVhdGVfZWxlbWVudCA6IHQgLT4gc3RyaW5nIC0+IEVsZW1lbnQudCkgPVxuICAgICAgZnVuICh4Mzk3IDogdCkgLT5cbiAgICAgICAgZnVuICh4Mzk2IDogc3RyaW5nKSAtPlxuICAgICAgICAgIEVsZW1lbnQudF9vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHgzOTcpIFwiY3JlYXRlRWxlbWVudFwiXG4gICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHgzOTYpfF0pXG4gICAgbGV0IChjcmVhdGVfZWxlbWVudF9ucyA6IHQgLT4gc3RyaW5nIC0+IHN0cmluZyAtPiBFbGVtZW50LnQpID1cbiAgICAgIGZ1biAoeDQwMCA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDM5OCA6IHN0cmluZykgLT5cbiAgICAgICAgICBmdW4gKHgzOTkgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgICBFbGVtZW50LnRfb2ZfanNcbiAgICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0MDApIFwiY3JlYXRlRWxlbWVudE5TXCJcbiAgICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4Mzk4KTsoT2pzLnN0cmluZ190b19qcyB4Mzk5KXxdKVxuICAgIGxldCAoY3JlYXRlX3RleHRfbm9kZSA6IHQgLT4gc3RyaW5nIC0+IEVsZW1lbnQudCkgPVxuICAgICAgZnVuICh4NDAyIDogdCkgLT5cbiAgICAgICAgZnVuICh4NDAxIDogc3RyaW5nKSAtPlxuICAgICAgICAgIEVsZW1lbnQudF9vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0MDIpIFwiY3JlYXRlVGV4dE5vZGVcIlxuICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4NDAxKXxdKVxuICAgIGxldCAoY3JlYXRlX2V2ZW50IDogdCAtPiBzdHJpbmcgLT4gRXZlbnQudCkgPVxuICAgICAgZnVuICh4NDA0IDogdCkgLT5cbiAgICAgICAgZnVuICh4NDAzIDogc3RyaW5nKSAtPlxuICAgICAgICAgIEV2ZW50LnRfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NDA0KSBcImNyZWF0ZUV2ZW50XCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDQwMyl8XSlcbiAgICBsZXQgKGdldF9lbGVtZW50X2J5X2lkIDogdCAtPiBzdHJpbmcgLT4gRWxlbWVudC50IG9wdGlvbikgPVxuICAgICAgZnVuICh4NDA2IDogdCkgLT5cbiAgICAgICAgZnVuICh4NDA1IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5vcHRpb25fb2ZfanMgRWxlbWVudC50X29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDQwNikgXCJnZXRFbGVtZW50QnlJZFwiXG4gICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHg0MDUpfF0pXG4gICAgbGV0IChnZXRfZWxlbWVudHNfYnlfY2xhc3NfbmFtZSA6IHQgLT4gc3RyaW5nIC0+IEVsZW1lbnQudCBhcnJheSkgPVxuICAgICAgZnVuICh4NDA5IDogdCkgLT5cbiAgICAgICAgZnVuICh4NDA4IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5hcnJheV9vZl9qcyBFbGVtZW50LnRfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NDA5KSBcImdldEVsZW1lbnRzQnlDbGFzc05hbWVcIlxuICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4NDA4KXxdKVxuICAgIGxldCAoYm9keSA6IHQgLT4gRWxlbWVudC50KSA9XG4gICAgICBmdW4gKHg0MTEgOiB0KSAtPlxuICAgICAgICBFbGVtZW50LnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NDExKSBcImJvZHlcIilcbiAgICBsZXQgKGRvY3VtZW50X2VsZW1lbnQgOiB0IC0+IEVsZW1lbnQudCkgPVxuICAgICAgZnVuICh4NDEyIDogdCkgLT5cbiAgICAgICAgRWxlbWVudC50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDQxMikgXCJkb2N1bWVudEVsZW1lbnRcIilcbiAgICBsZXQgKGFjdGl2ZV9lbGVtZW50IDogdCAtPiBFbGVtZW50LnQpID1cbiAgICAgIGZ1biAoeDQxMyA6IHQpIC0+XG4gICAgICAgIEVsZW1lbnQudF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg0MTMpIFwiYWN0aXZlRWxlbWVudFwiKVxuICAgIGxldCAoY29va2llIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDQxNCA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NDE0KSBcImNvb2tpZVwiKVxuICAgIGxldCAoc2V0X2Nvb2tpZSA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQxNSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDQxNiA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDQxNSkgXCJjb29raWVcIiAoT2pzLnN0cmluZ190b19qcyB4NDE2KVxuICAgIGxldCAoc2V0X3RpdGxlIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NDE3IDogdCkgLT5cbiAgICAgICAgZnVuICh4NDE4IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NDE3KSBcInRpdGxlXCIgKE9qcy5zdHJpbmdfdG9fanMgeDQxOClcbiAgICBsZXQgKG9wZW5fIDpcbiAgICAgIHQgLT4gP21pbWVfdHlwZTpzdHJpbmcgLT4gP2hpc3RvcnlfbW9kZTpzdHJpbmcgLT4gdW5pdCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg0MjQgOiB0KSAtPlxuICAgICAgICBmdW4gP21pbWVfdHlwZTooeDQxOSA6IHN0cmluZyBvcHRpb24pIC0+XG4gICAgICAgICAgZnVuID9oaXN0b3J5X21vZGU6KHg0MjAgOiBzdHJpbmcgb3B0aW9uKSAtPlxuICAgICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAgIChsZXQgeDQyNSA9IHRfdG9fanMgeDQyNCBpblxuICAgICAgICAgICAgICAgICBPanMuY2FsbCAoT2pzLmdldF9wcm9wX2FzY2lpIHg0MjUgXCJvcGVuXCIpIFwiYXBwbHlcIlxuICAgICAgICAgICAgICAgICAgIFt8eDQyNTsoKGxldCB4NDIxID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5uZXdfb2JqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIkFycmF5XCIpIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbfHxdIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hdGNoIHg0MTkgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDQyMyAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuY2FsbCB4NDIxIFwicHVzaFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDQyMyl8XSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWF0Y2ggeDQyMCB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU29tZSB4NDIyIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE9qcy5jYWxsIHg0MjEgXCJwdXNoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4NDIyKXxdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg0MjEpKXxdKVxuICAgIGxldCAod3JpdGUgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg0MjcgOiB0KSAtPlxuICAgICAgICBmdW4gKHg0MjYgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDQyNykgXCJ3cml0ZVwiIFt8KE9qcy5zdHJpbmdfdG9fanMgeDQyNil8XSlcbiAgICBsZXQgKHdyaXRlbG4gOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg0MjkgOiB0KSAtPlxuICAgICAgICBmdW4gKHg0MjggOiBzdHJpbmcpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDQyOSkgXCJ3cml0ZWxuXCIgW3woT2pzLnN0cmluZ190b19qcyB4NDI4KXxdKVxuICAgIGxldCAoY2xvc2UgOiB0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQzMCA6IHQpIC0+IGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDQzMCkgXCJjbG9zZVwiIFt8fF0pXG4gICAgbGV0IChleGVjX2NvbW1hbmQgOiB0IC0+IHN0cmluZyAtPiBib29sKSA9XG4gICAgICBmdW4gKHg0MzIgOiB0KSAtPlxuICAgICAgICBmdW4gKHg0MzEgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgT2pzLmJvb2xfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NDMyKSBcImV4ZWNDb21tYW5kXCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDQzMSl8XSlcbiAgICBsZXQgKHF1ZXJ5X3NlbGVjdG9yIDogdCAtPiBzdHJpbmcgLT4gRWxlbWVudC50KSA9XG4gICAgICBmdW4gKHg0MzQgOiB0KSAtPlxuICAgICAgICBmdW4gKHg0MzMgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgRWxlbWVudC50X29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDQzNCkgXCJxdWVyeVNlbGVjdG9yXCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDQzMyl8XSlcbiAgICBsZXQgKHF1ZXJ5X3NlbGVjdG9yX2FsbCA6IHQgLT4gc3RyaW5nIC0+IEVsZW1lbnQudCBsaXN0KSA9XG4gICAgICBmdW4gKHg0MzYgOiB0KSAtPlxuICAgICAgICBmdW4gKHg0MzUgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgT2pzLmxpc3Rfb2ZfanMgRWxlbWVudC50X29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDQzNikgXCJxdWVyeVNlbGVjdG9yQWxsXCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDQzNSl8XSlcbiAgICBsZXQgKHJlbW92ZV9hbGxfc2VsZWN0aW9uX3JhbmdlcyA6IHQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NDM4IDogdCkgLT5cbiAgICAgICAgaWdub3JlXG4gICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0MzgpIFwiZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzXCIgW3x8XSlcbiAgZW5kXG5tb2R1bGUgSGlzdG9yeSA9XG4gIHN0cnVjdFxuICAgIHR5cGUgdCA9IE9qcy50XG4gICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDQ0MCA6IE9qcy50KSAtPiB4NDQwXG4gICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4NDM5IDogT2pzLnQpIC0+IHg0MzlcbiAgICBsZXQgKGxlbmd0aCA6IHQgLT4gaW50KSA9XG4gICAgICBmdW4gKHg0NDEgOiB0KSAtPlxuICAgICAgICBPanMuaW50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDQ0MSkgXCJsZW5ndGhcIilcbiAgICBsZXQgKGJhY2sgOiB0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQ0MiA6IHQpIC0+IGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDQ0MikgXCJiYWNrXCIgW3x8XSlcbiAgICBsZXQgKGZvcndhcmQgOiB0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQ0MyA6IHQpIC0+IGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDQ0MykgXCJmb3J3YXJkXCIgW3x8XSlcbiAgICBsZXQgKGdvIDogdCAtPiBbIGBPZmZzZXQgb2YgaW50ICB8IGBVcmwgb2Ygc3RyaW5nIF0gLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NDQ3IDogdCkgLT5cbiAgICAgICAgZnVuICh4NDQ0IDogWyBgT2Zmc2V0IG9mIGludCAgfCBgVXJsIG9mIHN0cmluZyBdKSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0NDcpIFwiZ29cIlxuICAgICAgICAgICAgICAgW3woKG1hdGNoIHg0NDQgd2l0aFxuICAgICAgICAgICAgICAgICAgIHwgYE9mZnNldCB4NDQ1IC0+IE9qcy5pbnRfdG9fanMgeDQ0NVxuICAgICAgICAgICAgICAgICAgIHwgYFVybCB4NDQ2IC0+IE9qcy5zdHJpbmdfdG9fanMgeDQ0NikpfF0pXG4gICAgbGV0IChyZXBsYWNlX3N0YXRlIDogdCAtPiBPanMudCAtPiBzdHJpbmcgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQ1MSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDQ0OCA6IE9qcy50KSAtPlxuICAgICAgICAgIGZ1biAoeDQ0OSA6IHN0cmluZykgLT5cbiAgICAgICAgICAgIGZ1biAoeDQ1MCA6IHN0cmluZykgLT5cbiAgICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0NTEpIFwicmVwbGFjZVN0YXRlXCJcbiAgICAgICAgICAgICAgICAgICBbfHg0NDg7KE9qcy5zdHJpbmdfdG9fanMgeDQ0OSk7KE9qcy5zdHJpbmdfdG9fanMgeDQ1MCl8XSlcbiAgICBsZXQgKHB1c2hfc3RhdGUgOiB0IC0+IE9qcy50IC0+IHN0cmluZyAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NDU1IDogdCkgLT5cbiAgICAgICAgZnVuICh4NDUyIDogT2pzLnQpIC0+XG4gICAgICAgICAgZnVuICh4NDUzIDogc3RyaW5nKSAtPlxuICAgICAgICAgICAgZnVuICh4NDU0IDogc3RyaW5nKSAtPlxuICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDQ1NSkgXCJwdXNoU3RhdGVcIlxuICAgICAgICAgICAgICAgICAgIFt8eDQ1MjsoT2pzLnN0cmluZ190b19qcyB4NDUzKTsoT2pzLnN0cmluZ190b19qcyB4NDU0KXxdKVxuICBlbmRcbm1vZHVsZSBMb2NhdGlvbiA9XG4gIHN0cnVjdFxuICAgIHR5cGUgdCA9IE9qcy50XG4gICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDQ1NyA6IE9qcy50KSAtPiB4NDU3XG4gICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4NDU2IDogT2pzLnQpIC0+IHg0NTZcbiAgICBsZXQgKGdldF9oYXNoIDogdW5pdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoKSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzXG4gICAgICAgICAgKE9qcy5nZXRfcHJvcF9hc2NpaSAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJsb2NhdGlvblwiKVxuICAgICAgICAgICAgIFwiaGFzaFwiKVxuICAgIGxldCAoc2V0X2hhc2ggOiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NDU4IDogc3RyaW5nKSAtPlxuICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwibG9jYXRpb25cIikgXCJoYXNoXCJcbiAgICAgICAgICAoT2pzLnN0cmluZ190b19qcyB4NDU4KVxuICAgIGxldCAoaG9zdCA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHg0NTkgOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDQ1OSkgXCJob3N0XCIpXG4gICAgbGV0IChzZXRfaG9zdCA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQ2MCA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDQ2MSA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDQ2MCkgXCJob3N0XCIgKE9qcy5zdHJpbmdfdG9fanMgeDQ2MSlcbiAgICBsZXQgKGhvc3RuYW1lIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDQ2MiA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NDYyKSBcImhvc3RuYW1lXCIpXG4gICAgbGV0IChzZXRfaG9zdG5hbWUgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg0NjMgOiB0KSAtPlxuICAgICAgICBmdW4gKHg0NjQgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg0NjMpIFwiaG9zdG5hbWVcIlxuICAgICAgICAgICAgKE9qcy5zdHJpbmdfdG9fanMgeDQ2NClcbiAgICBsZXQgKGhyZWYgOiB1bml0IC0+IHN0cmluZykgPVxuICAgICAgZnVuICgpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanNcbiAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcImxvY2F0aW9uXCIpXG4gICAgICAgICAgICAgXCJocmVmXCIpXG4gICAgbGV0IChzZXRfaHJlZiA6IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg0NjUgOiBzdHJpbmcpIC0+XG4gICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJsb2NhdGlvblwiKSBcImhyZWZcIlxuICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHg0NjUpXG4gICAgbGV0IChwYXRobmFtZSA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHg0NjYgOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDQ2NikgXCJwYXRobmFtZVwiKVxuICAgIGxldCAoc2V0X3BhdGhuYW1lIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NDY3IDogdCkgLT5cbiAgICAgICAgZnVuICh4NDY4IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NDY3KSBcInBhdGhuYW1lXCJcbiAgICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHg0NjgpXG4gICAgbGV0IChwb3J0IDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDQ2OSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NDY5KSBcInBvcnRcIilcbiAgICBsZXQgKHNldF9wb3J0IDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NDcwIDogdCkgLT5cbiAgICAgICAgZnVuICh4NDcxIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NDcwKSBcInBvcnRcIiAoT2pzLnN0cmluZ190b19qcyB4NDcxKVxuICAgIGxldCAocHJvdG9jb2wgOiB0IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4NDcyIDogdCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg0NzIpIFwicHJvdG9jb2xcIilcbiAgICBsZXQgKHNldF9wcm90b2NvbCA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQ3MyA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDQ3NCA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDQ3MykgXCJwcm90b2NvbFwiXG4gICAgICAgICAgICAoT2pzLnN0cmluZ190b19qcyB4NDc0KVxuICAgIGxldCAoc2VhcmNoIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDQ3NSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NDc1KSBcInNlYXJjaFwiKVxuICAgIGxldCAoc2V0X3NlYXJjaCA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQ3NiA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDQ3NyA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDQ3NikgXCJzZWFyY2hcIiAoT2pzLnN0cmluZ190b19qcyB4NDc3KVxuICAgIGxldCAob3JpZ2luIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDQ3OCA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NDc4KSBcIm9yaWdpblwiKVxuICAgIGxldCAoYXNzaWduIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NDgwIDogdCkgLT5cbiAgICAgICAgZnVuICh4NDc5IDogc3RyaW5nKSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0ODApIFwiYXNzaWduXCIgW3woT2pzLnN0cmluZ190b19qcyB4NDc5KXxdKVxuICAgIGxldCAocmVsb2FkIDogdCAtPiA/Zm9yY2U6Ym9vbCAtPiB1bml0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQ4NCA6IHQpIC0+XG4gICAgICAgIGZ1biA/Zm9yY2U6KHg0ODEgOiBib29sIG9wdGlvbikgLT5cbiAgICAgICAgICBmdW4gKCkgLT5cbiAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAobGV0IHg0ODUgPSB0X3RvX2pzIHg0ODQgaW5cbiAgICAgICAgICAgICAgIE9qcy5jYWxsIChPanMuZ2V0X3Byb3BfYXNjaWkgeDQ4NSBcInJlbG9hZFwiKSBcImFwcGx5XCJcbiAgICAgICAgICAgICAgICAgW3x4NDg1OygobGV0IHg0ODIgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5uZXdfb2JqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJBcnJheVwiKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt8fF0gaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hdGNoIHg0ODEgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg0ODMgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuY2FsbCB4NDgyIFwicHVzaFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbfChPanMuYm9vbF90b19qcyB4NDgzKXxdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDQ4MikpfF0pXG4gICAgbGV0IChyZXBsYWNlIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NDg3IDogdCkgLT5cbiAgICAgICAgZnVuICh4NDg2IDogc3RyaW5nKSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0ODcpIFwicmVwbGFjZVwiIFt8KE9qcy5zdHJpbmdfdG9fanMgeDQ4Nil8XSlcbiAgZW5kXG5tb2R1bGUgV2luZG93ID1cbiAgc3RydWN0XG4gICAgdHlwZSB0ID0gT2pzLnRcbiAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4NDg5IDogT2pzLnQpIC0+IHg0ODlcbiAgICBhbmQgdF90b19qcyA6IHQgLT4gT2pzLnQgPSBmdW4gKHg0ODggOiBPanMudCkgLT4geDQ4OFxuICAgIHR5cGUgdGltZW91dF9pZCA9IE9qcy50XG4gICAgbGV0IHJlYyB0aW1lb3V0X2lkX29mX2pzIDogT2pzLnQgLT4gdGltZW91dF9pZCA9XG4gICAgICBmdW4gKHg0OTEgOiBPanMudCkgLT4geDQ5MVxuICAgIGFuZCB0aW1lb3V0X2lkX3RvX2pzIDogdGltZW91dF9pZCAtPiBPanMudCA9IGZ1biAoeDQ5MCA6IE9qcy50KSAtPiB4NDkwXG4gICAgdHlwZSBpbnRlcnZhbF9pZCA9IE9qcy50XG4gICAgbGV0IHJlYyBpbnRlcnZhbF9pZF9vZl9qcyA6IE9qcy50IC0+IGludGVydmFsX2lkID1cbiAgICAgIGZ1biAoeDQ5MyA6IE9qcy50KSAtPiB4NDkzXG4gICAgYW5kIGludGVydmFsX2lkX3RvX2pzIDogaW50ZXJ2YWxfaWQgLT4gT2pzLnQgPSBmdW4gKHg0OTIgOiBPanMudCkgLT4geDQ5MlxuICAgIGxldCAoYWRkX2V2ZW50X2xpc3RlbmVyIDpcbiAgICAgIHQgLT4gRXZlbnQua2luZCAtPiAoRXZlbnQudCAtPiB1bml0KSAtPiBib29sIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDQ5OCA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDQ5NCA6IEV2ZW50LmtpbmQpIC0+XG4gICAgICAgICAgZnVuICh4NDk1IDogRXZlbnQudCAtPiB1bml0KSAtPlxuICAgICAgICAgICAgZnVuICh4NDk3IDogYm9vbCkgLT5cbiAgICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg0OTgpIFwiYWRkRXZlbnRMaXN0ZW5lclwiXG4gICAgICAgICAgICAgICAgICAgW3woRXZlbnQua2luZF90b19qcyB4NDk0KTsoT2pzLmZ1bl90b19qcyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuICh4NDk2IDogT2pzLnQpIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4NDk1IChFdmVudC50X29mX2pzIHg0OTYpKSk7KFxuICAgICAgICAgICAgICAgICAgICAgT2pzLmJvb2xfdG9fanMgeDQ5Nyl8XSlcbiAgICBsZXQgKGFkZF9ldmVudF9saXN0ZW5lcl9pbnRlcm5hbCA6XG4gICAgICB0IC0+IEV2ZW50LmtpbmQgLT4gT2pzLnQgLT4gYm9vbCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg1MDIgOiB0KSAtPlxuICAgICAgICBmdW4gKHg0OTkgOiBFdmVudC5raW5kKSAtPlxuICAgICAgICAgIGZ1biAoeDUwMCA6IE9qcy50KSAtPlxuICAgICAgICAgICAgZnVuICh4NTAxIDogYm9vbCkgLT5cbiAgICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg1MDIpIFwiYWRkRXZlbnRMaXN0ZW5lclwiXG4gICAgICAgICAgICAgICAgICAgW3woRXZlbnQua2luZF90b19qcyB4NDk5KTt4NTAwOyhPanMuYm9vbF90b19qcyB4NTAxKXxdKVxuICAgIGxldCAocmVtb3ZlX2V2ZW50X2xpc3RlbmVyX2ludGVybmFsIDpcbiAgICAgIHQgLT4gRXZlbnQua2luZCAtPiBPanMudCAtPiBib29sIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDUwNiA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDUwMyA6IEV2ZW50LmtpbmQpIC0+XG4gICAgICAgICAgZnVuICh4NTA0IDogT2pzLnQpIC0+XG4gICAgICAgICAgICBmdW4gKHg1MDUgOiBib29sKSAtPlxuICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDUwNikgXCJyZW1vdmVFdmVudExpc3RlbmVyXCJcbiAgICAgICAgICAgICAgICAgICBbfChFdmVudC5raW5kX3RvX2pzIHg1MDMpO3g1MDQ7KE9qcy5ib29sX3RvX2pzIHg1MDUpfF0pXG4gICAgbGV0IGFkZF9jYW5jZWxsYWJsZV9ldmVudF9saXN0ZW5lciB4IGsgZiBjID1cbiAgICAgIGxldCBmID0gT2pzLmZ1bl90b19qcyAxIChmdW4geCAtPiBmIChFdmVudC50X29mX2pzIHgpKSBpblxuICAgICAgYWRkX2V2ZW50X2xpc3RlbmVyX2ludGVybmFsIHggayBmIGM7XG4gICAgICAoZnVuICgpIC0+IHJlbW92ZV9ldmVudF9saXN0ZW5lcl9pbnRlcm5hbCB4IGsgZiBjKVxuICAgIGxldCAoZG9jdW1lbnQgOiB0IC0+IERvY3VtZW50LnQpID1cbiAgICAgIGZ1biAoeDUwNyA6IHQpIC0+XG4gICAgICAgIERvY3VtZW50LnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NTA3KSBcImRvY3VtZW50XCIpXG4gICAgbGV0IChzZXRfb25sb2FkIDogdCAtPiAodW5pdCAtPiB1bml0KSAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg1MDggOiB0KSAtPlxuICAgICAgICBmdW4gKHg1MDkgOiB1bml0IC0+IHVuaXQpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg1MDgpIFwib25sb2FkXCJcbiAgICAgICAgICAgIChPanMuZnVuX3RvX2pzIDEgKGZ1biBfIC0+IHg1MDkgKCkpKVxuICAgIGxldCAoc2V0X2ludGVydmFsIDogdCAtPiAodW5pdCAtPiB1bml0KSAtPiBpbnQgLT4gaW50ZXJ2YWxfaWQpID1cbiAgICAgIGZ1biAoeDUxMiA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDUxMCA6IHVuaXQgLT4gdW5pdCkgLT5cbiAgICAgICAgICBmdW4gKHg1MTEgOiBpbnQpIC0+XG4gICAgICAgICAgICBpbnRlcnZhbF9pZF9vZl9qc1xuICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDUxMikgXCJzZXRJbnRlcnZhbFwiXG4gICAgICAgICAgICAgICAgIFt8KE9qcy5mdW5fdG9fanMgMSAoZnVuIF8gLT4geDUxMCAoKSkpOyhPanMuaW50X3RvX2pzIHg1MTEpfF0pXG4gICAgbGV0IChzZXRfdGltZW91dCA6IHQgLT4gKHVuaXQgLT4gdW5pdCkgLT4gaW50IC0+IHRpbWVvdXRfaWQpID1cbiAgICAgIGZ1biAoeDUxNSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDUxMyA6IHVuaXQgLT4gdW5pdCkgLT5cbiAgICAgICAgICBmdW4gKHg1MTQgOiBpbnQpIC0+XG4gICAgICAgICAgICB0aW1lb3V0X2lkX29mX2pzXG4gICAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NTE1KSBcInNldFRpbWVvdXRcIlxuICAgICAgICAgICAgICAgICBbfChPanMuZnVuX3RvX2pzIDEgKGZ1biBfIC0+IHg1MTMgKCkpKTsoT2pzLmludF90b19qcyB4NTE0KXxdKVxuICAgIGxldCAoY2xlYXJfdGltZW91dCA6IHQgLT4gdGltZW91dF9pZCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg1MTcgOiB0KSAtPlxuICAgICAgICBmdW4gKHg1MTYgOiB0aW1lb3V0X2lkKSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg1MTcpIFwiY2xlYXJUaW1lb3V0XCJcbiAgICAgICAgICAgICAgIFt8KHRpbWVvdXRfaWRfdG9fanMgeDUxNil8XSlcbiAgICBsZXQgKGNsZWFyX2ludGVydmFsIDogdCAtPiBpbnRlcnZhbF9pZCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg1MTkgOiB0KSAtPlxuICAgICAgICBmdW4gKHg1MTggOiBpbnRlcnZhbF9pZCkgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NTE5KSBcImNsZWFySW50ZXJ2YWxcIlxuICAgICAgICAgICAgICAgW3woaW50ZXJ2YWxfaWRfdG9fanMgeDUxOCl8XSlcbiAgICBsZXQgKHJlcXVlc3RfYW5pbWF0aW9uX2ZyYW1lIDogdCAtPiAoZmxvYXQgLT4gdW5pdCkgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NTIyIDogdCkgLT5cbiAgICAgICAgZnVuICh4NTIwIDogZmxvYXQgLT4gdW5pdCkgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NTIyKSBcInJlcXVlc3RBbmltYXRpb25GcmFtZVwiXG4gICAgICAgICAgICAgICBbfChPanMuZnVuX3RvX2pzIDFcbiAgICAgICAgICAgICAgICAgICAgKGZ1biAoeDUyMSA6IE9qcy50KSAtPiB4NTIwIChPanMuZmxvYXRfb2ZfanMgeDUyMSkpKXxdKVxuICAgIGxldCAob3Blbl8gOlxuICAgICAgdCAtPlxuICAgICAgICA/dXJsOnN0cmluZyAtPlxuICAgICAgICAgID9uYW1lOnN0cmluZyAtPiA/ZmVhdHVyZXM6c3RyaW5nIC0+ID9yZXBsYWNlOmJvb2wgLT4gdW5pdCAtPiB0KVxuICAgICAgPVxuICAgICAgZnVuICh4NTMyIDogdCkgLT5cbiAgICAgICAgZnVuID91cmw6KHg1MjMgOiBzdHJpbmcgb3B0aW9uKSAtPlxuICAgICAgICAgIGZ1biA/bmFtZTooeDUyNCA6IHN0cmluZyBvcHRpb24pIC0+XG4gICAgICAgICAgICBmdW4gP2ZlYXR1cmVzOih4NTI1IDogc3RyaW5nIG9wdGlvbikgLT5cbiAgICAgICAgICAgICAgZnVuID9yZXBsYWNlOih4NTI2IDogYm9vbCBvcHRpb24pIC0+XG4gICAgICAgICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICAgICAgICB0X29mX2pzXG4gICAgICAgICAgICAgICAgICAgIChsZXQgeDUzMyA9IHRfdG9fanMgeDUzMiBpblxuICAgICAgICAgICAgICAgICAgICAgT2pzLmNhbGwgKE9qcy5nZXRfcHJvcF9hc2NpaSB4NTMzIFwib3BlblwiKSBcImFwcGx5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgW3x4NTMzOygobGV0IHg1MjcgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5uZXdfb2JqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJBcnJheVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3x8XSBpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWF0Y2ggeDUyMyB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDUzMSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE9qcy5jYWxsIHg1MjcgXCJwdXNoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDUzMSl8XSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCB4NTI0IHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU29tZSB4NTMwIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmNhbGwgeDUyNyBcInB1c2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4NTMwKXxdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hdGNoIHg1MjUgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg1MjkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuY2FsbCB4NTI3IFwicHVzaFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHg1MjkpfF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWF0Y2ggeDUyNiB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDUyOCAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE9qcy5jYWxsIHg1MjcgXCJwdXNoXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt8KE9qcy5ib29sX3RvX2pzIHg1MjgpfF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4NTI3KSl8XSlcbiAgICBsZXQgKGFsZXJ0IDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NTM1IDogdCkgLT5cbiAgICAgICAgZnVuICh4NTM0IDogc3RyaW5nKSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg1MzUpIFwiYWxlcnRcIiBbfChPanMuc3RyaW5nX3RvX2pzIHg1MzQpfF0pXG4gICAgbGV0IChzZXNzaW9uX3N0b3JhZ2UgOiB0IC0+IFN0b3JhZ2UudCBvcHRpb24pID1cbiAgICAgIGZ1biAoeDUzNiA6IHQpIC0+XG4gICAgICAgIE9qcy5vcHRpb25fb2ZfanMgU3RvcmFnZS50X29mX2pzXG4gICAgICAgICAgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NTM2KSBcInNlc3Npb25TdG9yYWdlXCIpXG4gICAgbGV0IChsb2NhbF9zdG9yYWdlIDogdCAtPiBTdG9yYWdlLnQgb3B0aW9uKSA9XG4gICAgICBmdW4gKHg1MzggOiB0KSAtPlxuICAgICAgICBPanMub3B0aW9uX29mX2pzIFN0b3JhZ2UudF9vZl9qc1xuICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDUzOCkgXCJsb2NhbFN0b3JhZ2VcIilcbiAgICBsZXQgKGlubmVyX3dpZHRoIDogdCAtPiBmbG9hdCkgPVxuICAgICAgZnVuICh4NTQwIDogdCkgLT5cbiAgICAgICAgT2pzLmZsb2F0X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDU0MCkgXCJpbm5lcldpZHRoXCIpXG4gICAgbGV0IChpbm5lcl9oZWlnaHQgOiB0IC0+IGZsb2F0KSA9XG4gICAgICBmdW4gKHg1NDEgOiB0KSAtPlxuICAgICAgICBPanMuZmxvYXRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NTQxKSBcImlubmVySGVpZ2h0XCIpXG4gICAgbGV0IChwYWdlX3hfb2Zmc2V0IDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDU0MiA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NTQyKSBcInBhZ2VYT2Zmc2V0XCIpXG4gICAgbGV0IChwYWdlX3lfb2Zmc2V0IDogdCAtPiBpbnQpID1cbiAgICAgIGZ1biAoeDU0MyA6IHQpIC0+XG4gICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NTQzKSBcInBhZ2VZT2Zmc2V0XCIpXG4gICAgbGV0IChzY3JvbGxfYnkgOiB0IC0+IGludCAtPiBpbnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NTQ2IDogdCkgLT5cbiAgICAgICAgZnVuICh4NTQ0IDogaW50KSAtPlxuICAgICAgICAgIGZ1biAoeDU0NSA6IGludCkgLT5cbiAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDU0NikgXCJzY3JvbGxCeVwiXG4gICAgICAgICAgICAgICAgIFt8KE9qcy5pbnRfdG9fanMgeDU0NCk7KE9qcy5pbnRfdG9fanMgeDU0NSl8XSlcbiAgICBsZXQgKHNjcm9sbF90byA6IHQgLT4gaW50IC0+IGludCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg1NDkgOiB0KSAtPlxuICAgICAgICBmdW4gKHg1NDcgOiBpbnQpIC0+XG4gICAgICAgICAgZnVuICh4NTQ4IDogaW50KSAtPlxuICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NTQ5KSBcInNjcm9sbFRvXCJcbiAgICAgICAgICAgICAgICAgW3woT2pzLmludF90b19qcyB4NTQ3KTsoT2pzLmludF90b19qcyB4NTQ4KXxdKVxuICAgIHR5cGUgc2Nyb2xsX3RvX29wdGlvbnMgPVxuICAgICAge1xuICAgICAgdG9wOiBpbnQgO1xuICAgICAgbGVmdDogaW50IDtcbiAgICAgIGJlaGF2aW9yOiBFbGVtZW50LmJlaGF2aW9yIG9wdGlvbiB9XG4gICAgbGV0IHJlYyBzY3JvbGxfdG9fb3B0aW9uc19vZl9qcyA6IE9qcy50IC0+IHNjcm9sbF90b19vcHRpb25zID1cbiAgICAgIGZ1biAoeDU1MiA6IE9qcy50KSAtPlxuICAgICAgICB7XG4gICAgICAgICAgdG9wID0gKE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSB4NTUyIFwidG9wXCIpKTtcbiAgICAgICAgICBsZWZ0ID0gKE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSB4NTUyIFwibGVmdFwiKSk7XG4gICAgICAgICAgYmVoYXZpb3IgPVxuICAgICAgICAgICAgKE9qcy5vcHRpb25fb2ZfanMgRWxlbWVudC5iZWhhdmlvcl9vZl9qc1xuICAgICAgICAgICAgICAgKE9qcy5nZXRfcHJvcF9hc2NpaSB4NTUyIFwiYmVoYXZpb3JcIikpXG4gICAgICAgIH1cbiAgICBhbmQgc2Nyb2xsX3RvX29wdGlvbnNfdG9fanMgOiBzY3JvbGxfdG9fb3B0aW9ucyAtPiBPanMudCA9XG4gICAgICBmdW4gKHg1NTAgOiBzY3JvbGxfdG9fb3B0aW9ucykgLT5cbiAgICAgICAgT2pzLm9ialxuICAgICAgICAgIFt8KFwidG9wXCIsIChPanMuaW50X3RvX2pzIHg1NTAudG9wKSk7KFwibGVmdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE9qcy5pbnRfdG9fanMgeDU1MC5sZWZ0KSk7XG4gICAgICAgICAgICAoXCJiZWhhdmlvclwiLFxuICAgICAgICAgICAgICAoT2pzLm9wdGlvbl90b19qcyBFbGVtZW50LmJlaGF2aW9yX3RvX2pzIHg1NTAuYmVoYXZpb3IpKXxdXG4gICAgbGV0IChzY3JvbGxfdG9fb3B0aW9ucyA6IHQgLT4gc2Nyb2xsX3RvX29wdGlvbnMgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NTU1IDogdCkgLT5cbiAgICAgICAgZnVuICh4NTU0IDogc2Nyb2xsX3RvX29wdGlvbnMpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDU1NSkgXCJzY3JvbGxUb1wiXG4gICAgICAgICAgICAgICBbfChzY3JvbGxfdG9fb3B0aW9uc190b19qcyB4NTU0KXxdKVxuICAgIGxldCAoaGlzdG9yeSA6IHQgLT4gSGlzdG9yeS50KSA9XG4gICAgICBmdW4gKHg1NTYgOiB0KSAtPlxuICAgICAgICBIaXN0b3J5LnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NTU2KSBcImhpc3RvcnlcIilcbiAgICBsZXQgKGxvY2F0aW9uIDogdCAtPiBMb2NhdGlvbi50KSA9XG4gICAgICBmdW4gKHg1NTcgOiB0KSAtPlxuICAgICAgICBMb2NhdGlvbi50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDU1NykgXCJsb2NhdGlvblwiKVxuICAgIGxldCAoZnJhbWVfZWxlbWVudCA6IHQgLT4gRWxlbWVudC50KSA9XG4gICAgICBmdW4gKHg1NTggOiB0KSAtPlxuICAgICAgICBFbGVtZW50LnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NTU4KSBcImZyYW1lRWxlbWVudFwiKVxuICAgIGxldCAoZ2V0X2NvbXB1dGVkX3N0eWxlIDogdCAtPiBFbGVtZW50LnQgLT4gU3R5bGUudCkgPVxuICAgICAgZnVuICh4NTYwIDogdCkgLT5cbiAgICAgICAgZnVuICh4NTU5IDogRWxlbWVudC50KSAtPlxuICAgICAgICAgIFN0eWxlLnRfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NTYwKSBcImdldENvbXB1dGVkU3R5bGVcIlxuICAgICAgICAgICAgICAgW3woRWxlbWVudC50X3RvX2pzIHg1NTkpfF0pXG4gICAgbGV0IChkZWNvZGVfVVJJX2NvbXBvbmVudCA6IHQgLT4gc3RyaW5nIC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4NTYyIDogdCkgLT5cbiAgICAgICAgZnVuICh4NTYxIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zdHJpbmdfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NTYyKSBcImRlY29kZVVSSUNvbXBvbmVudFwiXG4gICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHg1NjEpfF0pXG4gICAgbGV0IChldmVudF9zb3VyY2UgOiBFdmVudC50IC0+IHQpID1cbiAgICAgIGZ1biAoeDU2MyA6IEV2ZW50LnQpIC0+XG4gICAgICAgIHRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAoRXZlbnQudF90b19qcyB4NTYzKSBcInNvdXJjZVwiKVxuICAgIGxldCAocG9zdF9tZXNzYWdlIDogdCAtPiBPanMudCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NTY2IDogdCkgLT5cbiAgICAgICAgZnVuICh4NTY0IDogT2pzLnQpIC0+XG4gICAgICAgICAgZnVuICh4NTY1IDogc3RyaW5nKSAtPlxuICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NTY2KSBcInBvc3RNZXNzYWdlXCJcbiAgICAgICAgICAgICAgICAgW3x4NTY0OyhPanMuc3RyaW5nX3RvX2pzIHg1NjUpfF0pXG4gIGVuZFxubW9kdWxlIElGcmFtZSA9XG4gIHN0cnVjdFxuICAgIGxldCAoY29udGVudF93aW5kb3cgOiBFbGVtZW50LnQgLT4gV2luZG93LnQgb3B0aW9uKSA9XG4gICAgICBmdW4gKHg1NjcgOiBFbGVtZW50LnQpIC0+XG4gICAgICAgIE9qcy5vcHRpb25fb2ZfanMgV2luZG93LnRfb2ZfanNcbiAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpIChFbGVtZW50LnRfdG9fanMgeDU2NykgXCJjb250ZW50V2luZG93XCIpXG4gICAgbGV0IChjb250ZW50X2RvY3VtZW50IDogRWxlbWVudC50IC0+IERvY3VtZW50LnQgb3B0aW9uKSA9XG4gICAgICBmdW4gKHg1NjkgOiBFbGVtZW50LnQpIC0+XG4gICAgICAgIE9qcy5vcHRpb25fb2ZfanMgRG9jdW1lbnQudF9vZl9qc1xuICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKEVsZW1lbnQudF90b19qcyB4NTY5KSBcImNvbnRlbnREb2N1bWVudFwiKVxuICBlbmRcbm1vZHVsZSBKU09OID1cbiAgc3RydWN0XG4gICAgbGV0IChwYXJzZSA6IHN0cmluZyAtPiBPanMudCkgPVxuICAgICAgZnVuICh4NTcxIDogc3RyaW5nKSAtPlxuICAgICAgICBPanMuY2FsbCAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJKU09OXCIpIFwicGFyc2VcIlxuICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDU3MSl8XVxuICAgIGxldCAoc3RyaW5naWZ5IDogT2pzLnQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHg1NzIgOiBPanMudCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qc1xuICAgICAgICAgIChPanMuY2FsbCAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJKU09OXCIpIFwic3RyaW5naWZ5XCJcbiAgICAgICAgICAgICBbfHg1NzJ8XSlcbiAgZW5kXG5tb2R1bGUgRmlsZVJlYWRlciA9XG4gIHN0cnVjdFxuICAgIHR5cGUgc3RhdGUgPVxuICAgICAgfCBFbXB0eSBcbiAgICAgIHwgTG9hZGluZyBcbiAgICAgIHwgRG9uZSBcbiAgICBsZXQgcmVjIHN0YXRlX29mX2pzIDogT2pzLnQgLT4gc3RhdGUgPVxuICAgICAgZnVuICh4NTc0IDogT2pzLnQpIC0+XG4gICAgICAgIGxldCB4NTc1ID0geDU3NCBpblxuICAgICAgICBtYXRjaCBPanMuaW50X29mX2pzIHg1NzUgd2l0aFxuICAgICAgICB8IDAgLT4gRW1wdHlcbiAgICAgICAgfCAxIC0+IExvYWRpbmdcbiAgICAgICAgfCAyIC0+IERvbmVcbiAgICAgICAgfCBfIC0+IGFzc2VydCBmYWxzZVxuICAgIGFuZCBzdGF0ZV90b19qcyA6IHN0YXRlIC0+IE9qcy50ID1cbiAgICAgIGZ1biAoeDU3MyA6IHN0YXRlKSAtPlxuICAgICAgICBtYXRjaCB4NTczIHdpdGhcbiAgICAgICAgfCBFbXB0eSAtPiBPanMuaW50X3RvX2pzIDBcbiAgICAgICAgfCBMb2FkaW5nIC0+IE9qcy5pbnRfdG9fanMgMVxuICAgICAgICB8IERvbmUgLT4gT2pzLmludF90b19qcyAyXG4gICAgdHlwZSB0ID0gT2pzLnRcbiAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4NTc3IDogT2pzLnQpIC0+IHg1NzdcbiAgICBhbmQgdF90b19qcyA6IHQgLT4gT2pzLnQgPSBmdW4gKHg1NzYgOiBPanMudCkgLT4geDU3NlxuICAgIGxldCAoY3JlYXRlIDogdW5pdCAtPiB0KSA9XG4gICAgICBmdW4gKCkgLT5cbiAgICAgICAgdF9vZl9qc1xuICAgICAgICAgIChPanMubmV3X29iaiAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJGaWxlUmVhZGVyXCIpIFt8fF0pXG4gICAgbGV0IChyZWFkeV9zdGF0ZSA6IHQgLT4gc3RhdGUpID1cbiAgICAgIGZ1biAoeDU3OCA6IHQpIC0+XG4gICAgICAgIHN0YXRlX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDU3OCkgXCJyZWFkeVN0YXRlXCIpXG4gICAgbGV0IChyZXN1bHQgOiB0IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4NTc5IDogdCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg1NzkpIFwicmVzdWx0XCIpXG4gICAgbGV0IChzZXRfb25sb2FkIDogdCAtPiAodW5pdCAtPiB1bml0KSAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg1ODAgOiB0KSAtPlxuICAgICAgICBmdW4gKHg1ODEgOiB1bml0IC0+IHVuaXQpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg1ODApIFwib25sb2FkXCJcbiAgICAgICAgICAgIChPanMuZnVuX3RvX2pzIDEgKGZ1biBfIC0+IHg1ODEgKCkpKVxuICAgIGxldCAocmVhZF9hc19iaW5hcnlfc3RyaW5nIDogdCAtPiBGaWxlLnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NTgzIDogdCkgLT5cbiAgICAgICAgZnVuICh4NTgyIDogRmlsZS50KSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg1ODMpIFwicmVhZEFzQmluYXJ5U3RyaW5nXCJcbiAgICAgICAgICAgICAgIFt8KEZpbGUudF90b19qcyB4NTgyKXxdKVxuICAgIGxldCAocmVhZF9hc190ZXh0IDogdCAtPiBGaWxlLnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NTg1IDogdCkgLT5cbiAgICAgICAgZnVuICh4NTg0IDogRmlsZS50KSAtPlxuICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg1ODUpIFwicmVhZEFzVGV4dFwiIFt8KEZpbGUudF90b19qcyB4NTg0KXxdKVxuICAgIGxldCAocmVhZF9hc19kYXRhX3VybCA6IHQgLT4gRmlsZS50IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDU4NyA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDU4NiA6IEZpbGUudCkgLT5cbiAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NTg3KSBcInJlYWRBc0RhdGFVUkxcIiBbfChGaWxlLnRfdG9fanMgeDU4Nil8XSlcbiAgZW5kXG5tb2R1bGUgWEhSID1cbiAgc3RydWN0XG4gICAgdHlwZSB0ID0gT2pzLnRcbiAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4NTg5IDogT2pzLnQpIC0+IHg1ODlcbiAgICBhbmQgdF90b19qcyA6IHQgLT4gT2pzLnQgPSBmdW4gKHg1ODggOiBPanMudCkgLT4geDU4OFxuICAgIGxldCAoY3JlYXRlIDogdW5pdCAtPiB0KSA9XG4gICAgICBmdW4gKCkgLT5cbiAgICAgICAgdF9vZl9qc1xuICAgICAgICAgIChPanMubmV3X29iaiAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJYTUxIdHRwUmVxdWVzdFwiKSBbfHxdKVxuICAgIGxldCAob3Blbl8gOiB0IC0+IHN0cmluZyAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NTkyIDogdCkgLT5cbiAgICAgICAgZnVuICh4NTkwIDogc3RyaW5nKSAtPlxuICAgICAgICAgIGZ1biAoeDU5MSA6IHN0cmluZykgLT5cbiAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDU5MikgXCJvcGVuXCJcbiAgICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4NTkwKTsoT2pzLnN0cmluZ190b19qcyB4NTkxKXxdKVxuICAgIGxldCAoc2VuZCA6IHQgLT4gT2pzLnQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NTk0IDogdCkgLT5cbiAgICAgICAgZnVuICh4NTkzIDogT2pzLnQpIC0+XG4gICAgICAgICAgaWdub3JlIChPanMuY2FsbCAodF90b19qcyB4NTk0KSBcInNlbmRcIiBbfHg1OTN8XSlcbiAgICBsZXQgKHNldF9yZXF1ZXN0X2hlYWRlciA6IHQgLT4gc3RyaW5nIC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg1OTcgOiB0KSAtPlxuICAgICAgICBmdW4gKHg1OTUgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgZnVuICh4NTk2IDogc3RyaW5nKSAtPlxuICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NTk3KSBcInNldFJlcXVlc3RIZWFkZXJcIlxuICAgICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHg1OTUpOyhPanMuc3RyaW5nX3RvX2pzIHg1OTYpfF0pXG4gICAgbGV0IChnZXRfcmVzcG9uc2VfaGVhZGVyIDogdCAtPiBzdHJpbmcgLT4gc3RyaW5nIG9wdGlvbikgPVxuICAgICAgZnVuICh4NTk5IDogdCkgLT5cbiAgICAgICAgZnVuICh4NTk4IDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5vcHRpb25fb2ZfanMgT2pzLnN0cmluZ19vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsICh0X3RvX2pzIHg1OTkpIFwiZ2V0UmVzcG9uc2VIZWFkZXJcIlxuICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4NTk4KXxdKVxuICAgIGxldCAoZ2V0X2FsbF9yZXNwb25zZV9oZWFkZXJzIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDYwMSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanNcbiAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDYwMSkgXCJnZXRBbGxSZXNwb25zZUhlYWRlcnNcIiBbfHxdKVxuICAgIGxldCAoc2V0X3Jlc3BvbnNlX3R5cGUgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg2MDIgOiB0KSAtPlxuICAgICAgICBmdW4gKHg2MDMgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg2MDIpIFwicmVzcG9uc2VUeXBlXCJcbiAgICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHg2MDMpXG4gICAgbGV0IChvdmVycmlkZV9taW1lX3R5cGUgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg2MDUgOiB0KSAtPlxuICAgICAgICBmdW4gKHg2MDQgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDYwNSkgXCJvdmVycmlkZU1pbWVUeXBlXCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDYwNCl8XSlcbiAgICBsZXQgKHNldF93aXRoX2NyZWRlbnRpYWxzIDogdCAtPiBib29sIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDYwNiA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDYwNyA6IGJvb2wpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg2MDYpIFwid2l0aENyZWRlbnRpYWxzXCJcbiAgICAgICAgICAgIChPanMuYm9vbF90b19qcyB4NjA3KVxuICAgIHR5cGUgcmVhZHlfc3RhdGUgPVxuICAgICAgfCBVbnNlbnQgXG4gICAgICB8IE9wZW5lZCBcbiAgICAgIHwgSGVhZGVyc19yZWNlaXZlZCBcbiAgICAgIHwgTG9hZGluZyBcbiAgICAgIHwgRG9uZSBcbiAgICAgIHwgT3RoZXIgb2YgaW50IFxuICAgIGxldCByZWMgcmVhZHlfc3RhdGVfb2ZfanMgOiBPanMudCAtPiByZWFkeV9zdGF0ZSA9XG4gICAgICBmdW4gKHg2MTAgOiBPanMudCkgLT5cbiAgICAgICAgbGV0IHg2MTEgPSB4NjEwIGluXG4gICAgICAgIG1hdGNoIE9qcy5pbnRfb2ZfanMgeDYxMSB3aXRoXG4gICAgICAgIHwgMCAtPiBVbnNlbnRcbiAgICAgICAgfCAxIC0+IE9wZW5lZFxuICAgICAgICB8IDIgLT4gSGVhZGVyc19yZWNlaXZlZFxuICAgICAgICB8IDMgLT4gTG9hZGluZ1xuICAgICAgICB8IDQgLT4gRG9uZVxuICAgICAgICB8IHg2MTIgLT4gT3RoZXIgeDYxMlxuICAgIGFuZCByZWFkeV9zdGF0ZV90b19qcyA6IHJlYWR5X3N0YXRlIC0+IE9qcy50ID1cbiAgICAgIGZ1biAoeDYwOCA6IHJlYWR5X3N0YXRlKSAtPlxuICAgICAgICBtYXRjaCB4NjA4IHdpdGhcbiAgICAgICAgfCBVbnNlbnQgLT4gT2pzLmludF90b19qcyAwXG4gICAgICAgIHwgT3BlbmVkIC0+IE9qcy5pbnRfdG9fanMgMVxuICAgICAgICB8IEhlYWRlcnNfcmVjZWl2ZWQgLT4gT2pzLmludF90b19qcyAyXG4gICAgICAgIHwgTG9hZGluZyAtPiBPanMuaW50X3RvX2pzIDNcbiAgICAgICAgfCBEb25lIC0+IE9qcy5pbnRfdG9fanMgNFxuICAgICAgICB8IE90aGVyIHg2MDkgLT4gT2pzLmludF90b19qcyB4NjA5XG4gICAgbGV0IChzdGF0dXMgOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4NjEzIDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg2MTMpIFwic3RhdHVzXCIpXG4gICAgbGV0IChzdGF0dXNfdGV4dCA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHg2MTQgOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDYxNCkgXCJzdGF0dXNUZXh0XCIpXG4gICAgbGV0IChyZWFkeV9zdGF0ZSA6IHQgLT4gcmVhZHlfc3RhdGUpID1cbiAgICAgIGZ1biAoeDYxNSA6IHQpIC0+XG4gICAgICAgIHJlYWR5X3N0YXRlX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDYxNSkgXCJyZWFkeVN0YXRlXCIpXG4gICAgbGV0IChyZXNwb25zZV90eXBlIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDYxNiA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NjE2KSBcInJlc3BvbnNlVHlwZVwiKVxuICAgIGxldCAocmVzcG9uc2VfdGV4dCA6IHQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHg2MTcgOiB0KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDYxNykgXCJyZXNwb25zZVRleHRcIilcbiAgICBsZXQgKHJlc3BvbnNlIDogdCAtPiBPanMudCkgPVxuICAgICAgZnVuICh4NjE4IDogdCkgLT4gT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg2MTgpIFwicmVzcG9uc2VcIlxuICAgIGxldCAocmVzcG9uc2VfVVJMIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDYxOSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NjE5KSBcInJlc3BvbnNlVVJMXCIpXG4gICAgbGV0IChzZXRfb25yZWFkeXN0YXRlY2hhbmdlIDogdCAtPiAodW5pdCAtPiB1bml0KSAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg2MjAgOiB0KSAtPlxuICAgICAgICBmdW4gKHg2MjEgOiB1bml0IC0+IHVuaXQpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg2MjApIFwib25yZWFkeXN0YXRlY2hhbmdlXCJcbiAgICAgICAgICAgIChPanMuZnVuX3RvX2pzIDEgKGZ1biBfIC0+IHg2MjEgKCkpKVxuICBlbmRcbm1vZHVsZSBXZWJTb2NrZXQgPVxuICBzdHJ1Y3RcbiAgICB0eXBlIHQgPSBPanMudFxuICAgIGxldCByZWMgdF9vZl9qcyA6IE9qcy50IC0+IHQgPSBmdW4gKHg2MjMgOiBPanMudCkgLT4geDYyM1xuICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDYyMiA6IE9qcy50KSAtPiB4NjIyXG4gICAgdHlwZSByZWFkeV9zdGF0ZSA9XG4gICAgICB8IENvbm5lY3RpbmcgXG4gICAgICB8IE9wZW4gXG4gICAgICB8IENsb3NpbmcgXG4gICAgICB8IENsb3NlZCBcbiAgICBsZXQgcmVjIHJlYWR5X3N0YXRlX29mX2pzIDogT2pzLnQgLT4gcmVhZHlfc3RhdGUgPVxuICAgICAgZnVuICh4NjI1IDogT2pzLnQpIC0+XG4gICAgICAgIGxldCB4NjI2ID0geDYyNSBpblxuICAgICAgICBtYXRjaCBPanMuaW50X29mX2pzIHg2MjYgd2l0aFxuICAgICAgICB8IDAgLT4gQ29ubmVjdGluZ1xuICAgICAgICB8IDEgLT4gT3BlblxuICAgICAgICB8IDIgLT4gQ2xvc2luZ1xuICAgICAgICB8IDMgLT4gQ2xvc2VkXG4gICAgICAgIHwgXyAtPiBhc3NlcnQgZmFsc2VcbiAgICBhbmQgcmVhZHlfc3RhdGVfdG9fanMgOiByZWFkeV9zdGF0ZSAtPiBPanMudCA9XG4gICAgICBmdW4gKHg2MjQgOiByZWFkeV9zdGF0ZSkgLT5cbiAgICAgICAgbWF0Y2ggeDYyNCB3aXRoXG4gICAgICAgIHwgQ29ubmVjdGluZyAtPiBPanMuaW50X3RvX2pzIDBcbiAgICAgICAgfCBPcGVuIC0+IE9qcy5pbnRfdG9fanMgMVxuICAgICAgICB8IENsb3NpbmcgLT4gT2pzLmludF90b19qcyAyXG4gICAgICAgIHwgQ2xvc2VkIC0+IE9qcy5pbnRfdG9fanMgM1xuICAgIGxldCAoY3JlYXRlIDogc3RyaW5nIC0+ID9wcm90b2NvbHM6c3RyaW5nIGxpc3QgLT4gdW5pdCAtPiB0KSA9XG4gICAgICBmdW4gKHg2MjcgOiBzdHJpbmcpIC0+XG4gICAgICAgIGZ1biA/cHJvdG9jb2xzOih4NjI4IDogc3RyaW5nIGxpc3Qgb3B0aW9uKSAtPlxuICAgICAgICAgIGZ1biAoKSAtPlxuICAgICAgICAgICAgdF9vZl9qc1xuICAgICAgICAgICAgICAoT2pzLm5ld19vYmpfYXJyIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIldlYlNvY2tldFwiKVxuICAgICAgICAgICAgICAgICAobGV0IHg2MjkgPVxuICAgICAgICAgICAgICAgICAgICBPanMubmV3X29iaiAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJBcnJheVwiKSBbfHxdIGluXG4gICAgICAgICAgICAgICAgICBpZ25vcmUgKE9qcy5jYWxsIHg2MjkgXCJwdXNoXCIgW3woT2pzLnN0cmluZ190b19qcyB4NjI3KXxdKTtcbiAgICAgICAgICAgICAgICAgIChtYXRjaCB4NjI4IHdpdGhcbiAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDYzMCAtPlxuICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmNhbGwgeDYyOSBcInB1c2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt8KE9qcy5saXN0X3RvX2pzIE9qcy5zdHJpbmdfdG9fanMgeDYzMCl8XSlcbiAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgeDYyOSkpXG4gICAgbGV0IChzZW5kIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NjMzIDogdCkgLT5cbiAgICAgICAgZnVuICh4NjMyIDogc3RyaW5nKSAtPlxuICAgICAgICAgIGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDYzMykgXCJzZW5kXCIgW3woT2pzLnN0cmluZ190b19qcyB4NjMyKXxdKVxuICAgIGxldCAoY2xvc2UgOiB0IC0+ID9jb2RlOmludCAtPiA/cmVhc29uOnN0cmluZyAtPiB1bml0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDYzOSA6IHQpIC0+XG4gICAgICAgIGZ1biA/Y29kZTooeDYzNCA6IGludCBvcHRpb24pIC0+XG4gICAgICAgICAgZnVuID9yZWFzb246KHg2MzUgOiBzdHJpbmcgb3B0aW9uKSAtPlxuICAgICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAgIChsZXQgeDY0MCA9IHRfdG9fanMgeDYzOSBpblxuICAgICAgICAgICAgICAgICBPanMuY2FsbCAoT2pzLmdldF9wcm9wX2FzY2lpIHg2NDAgXCJjbG9zZVwiKSBcImFwcGx5XCJcbiAgICAgICAgICAgICAgICAgICBbfHg2NDA7KChsZXQgeDYzNiA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPanMubmV3X29ialxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJBcnJheVwiKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3x8XSBpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCB4NjM0IHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg2MzggLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmNhbGwgeDYzNiBcInB1c2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbfChPanMuaW50X3RvX2pzIHg2MzgpfF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hdGNoIHg2MzUgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDYzNyAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuY2FsbCB4NjM2IFwicHVzaFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDYzNyl8XSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4NjM2KSl8XSlcbiAgICBsZXQgKGJpbmFyeV90eXBlIDogdCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDY0MSA6IHQpIC0+XG4gICAgICAgIE9qcy5zdHJpbmdfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NjQxKSBcImJpbmFyeVR5cGVcIilcbiAgICBsZXQgKHNldF9iaW5hcnlfdHlwZSA6IHQgLT4gc3RyaW5nIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDY0MiA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDY0MyA6IHN0cmluZykgLT5cbiAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDY0MikgXCJiaW5hcnlUeXBlXCJcbiAgICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHg2NDMpXG4gICAgbGV0IChyZWFkeV9zdGF0ZSA6IHQgLT4gcmVhZHlfc3RhdGUpID1cbiAgICAgIGZ1biAoeDY0NCA6IHQpIC0+XG4gICAgICAgIHJlYWR5X3N0YXRlX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDY0NCkgXCJyZWFkeVN0YXRlXCIpXG4gICAgbGV0IChhZGRfZXZlbnRfbGlzdGVuZXIgOlxuICAgICAgdCAtPiBFdmVudC5raW5kIC0+IChFdmVudC50IC0+IHVuaXQpIC0+IGJvb2wgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NjQ5IDogdCkgLT5cbiAgICAgICAgZnVuICh4NjQ1IDogRXZlbnQua2luZCkgLT5cbiAgICAgICAgICBmdW4gKHg2NDYgOiBFdmVudC50IC0+IHVuaXQpIC0+XG4gICAgICAgICAgICBmdW4gKHg2NDggOiBib29sKSAtPlxuICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDY0OSkgXCJhZGRFdmVudExpc3RlbmVyXCJcbiAgICAgICAgICAgICAgICAgICBbfChFdmVudC5raW5kX3RvX2pzIHg2NDUpOyhPanMuZnVuX3RvX2pzIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW4gKHg2NDcgOiBPanMudCkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg2NDYgKEV2ZW50LnRfb2ZfanMgeDY0NykpKTsoXG4gICAgICAgICAgICAgICAgICAgICBPanMuYm9vbF90b19qcyB4NjQ4KXxdKVxuICAgIG1vZHVsZSBDbG9zZUV2ZW50ID1cbiAgICAgIHN0cnVjdFxuICAgICAgICB0eXBlIHQgPSBFdmVudC50XG4gICAgICAgIGxldCByZWMgdF9vZl9qcyA6IE9qcy50IC0+IHQgPVxuICAgICAgICAgIGZ1biAoeDY1MSA6IE9qcy50KSAtPiBFdmVudC50X29mX2pzIHg2NTFcbiAgICAgICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4NjUwIDogRXZlbnQudCkgLT4gRXZlbnQudF90b19qcyB4NjUwXG4gICAgICAgIGxldCAoY29kZSA6IHQgLT4gaW50KSA9XG4gICAgICAgICAgZnVuICh4NjUyIDogdCkgLT5cbiAgICAgICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NjUyKSBcImNvZGVcIilcbiAgICAgIGVuZFxuICBlbmRcbmxldCAod2luZG93IDogV2luZG93LnQpID1cbiAgV2luZG93LnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwid2luZG93XCIpXG5sZXQgKGRvY3VtZW50IDogRG9jdW1lbnQudCkgPVxuICBEb2N1bWVudC50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcImRvY3VtZW50XCIpXG5tb2R1bGUgQ2FudmFzID1cbiAgc3RydWN0XG4gICAgdHlwZSBjb250ZXh0ID0gT2pzLnRcbiAgICBsZXQgcmVjIGNvbnRleHRfb2ZfanMgOiBPanMudCAtPiBjb250ZXh0ID0gZnVuICh4NjU0IDogT2pzLnQpIC0+IHg2NTRcbiAgICBhbmQgY29udGV4dF90b19qcyA6IGNvbnRleHQgLT4gT2pzLnQgPSBmdW4gKHg2NTMgOiBPanMudCkgLT4geDY1M1xuICAgIHR5cGUgZ3JhZGllbnQgPSBPanMudFxuICAgIGxldCByZWMgZ3JhZGllbnRfb2ZfanMgOiBPanMudCAtPiBncmFkaWVudCA9IGZ1biAoeDY1NiA6IE9qcy50KSAtPiB4NjU2XG4gICAgYW5kIGdyYWRpZW50X3RvX2pzIDogZ3JhZGllbnQgLT4gT2pzLnQgPSBmdW4gKHg2NTUgOiBPanMudCkgLT4geDY1NVxuICAgIHR5cGUgY3NzX2NvbG9yID0gc3RyaW5nXG4gICAgbGV0IHJlYyBjc3NfY29sb3Jfb2ZfanMgOiBPanMudCAtPiBjc3NfY29sb3IgPVxuICAgICAgZnVuICh4NjU4IDogT2pzLnQpIC0+IE9qcy5zdHJpbmdfb2ZfanMgeDY1OFxuICAgIGFuZCBjc3NfY29sb3JfdG9fanMgOiBjc3NfY29sb3IgLT4gT2pzLnQgPVxuICAgICAgZnVuICh4NjU3IDogc3RyaW5nKSAtPiBPanMuc3RyaW5nX3RvX2pzIHg2NTdcbiAgICB0eXBlIGNvbnRleHRfYXR0cmlidXRlID0ge1xuICAgICAgYWxwaGE6IGJvb2wgfVxuICAgIGxldCByZWMgY29udGV4dF9hdHRyaWJ1dGVfb2ZfanMgOiBPanMudCAtPiBjb250ZXh0X2F0dHJpYnV0ZSA9XG4gICAgICBmdW4gKHg2NjAgOiBPanMudCkgLT5cbiAgICAgICAgeyBhbHBoYSA9IChPanMuYm9vbF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpIHg2NjAgXCJhbHBoYVwiKSkgfVxuICAgIGFuZCBjb250ZXh0X2F0dHJpYnV0ZV90b19qcyA6IGNvbnRleHRfYXR0cmlidXRlIC0+IE9qcy50ID1cbiAgICAgIGZ1biAoeDY1OSA6IGNvbnRleHRfYXR0cmlidXRlKSAtPlxuICAgICAgICBPanMub2JqIFt8KFwiYWxwaGFcIiwgKE9qcy5ib29sX3RvX2pzIHg2NTkuYWxwaGEpKXxdXG4gICAgbGV0IChnZXRfY29udGV4dF9pbnRlcm5hbCA6XG4gICAgICBFbGVtZW50LnQgLT4gc3RyaW5nIC0+IGNvbnRleHRfYXR0cmlidXRlIC0+IGNvbnRleHQgb3B0aW9uKSA9XG4gICAgICBmdW4gKHg2NjMgOiBFbGVtZW50LnQpIC0+XG4gICAgICAgIGZ1biAoeDY2MSA6IHN0cmluZykgLT5cbiAgICAgICAgICBmdW4gKHg2NjIgOiBjb250ZXh0X2F0dHJpYnV0ZSkgLT5cbiAgICAgICAgICAgIE9qcy5vcHRpb25fb2ZfanMgY29udGV4dF9vZl9qc1xuICAgICAgICAgICAgICAoT2pzLmNhbGwgKEVsZW1lbnQudF90b19qcyB4NjYzKSBcImdldENvbnRleHRcIlxuICAgICAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHg2NjEpOyhjb250ZXh0X2F0dHJpYnV0ZV90b19qcyB4NjYyKXxdKVxuICAgIGxldCBnZXRfY29udGV4dCA/KGFscGhhPSB0cnVlKSAgY2FudmFzID1cbiAgICAgIGdldF9jb250ZXh0X2ludGVybmFsIGNhbnZhcyBcIjJkXCIgeyBhbHBoYSB9XG4gICAgbGV0ICh0b19kYXRhX1VSTCA6IEVsZW1lbnQudCAtPiBzdHJpbmcpID1cbiAgICAgIGZ1biAoeDY2NSA6IEVsZW1lbnQudCkgLT5cbiAgICAgICAgT2pzLnN0cmluZ19vZl9qcyAoT2pzLmNhbGwgKEVsZW1lbnQudF90b19qcyB4NjY1KSBcInRvRGF0YVVSTFwiIFt8fF0pXG4gICAgbGV0IChzZXRfZmlsbF9zdHlsZSA6XG4gICAgICBjb250ZXh0IC0+IFsgYENvbG9yIG9mIGNzc19jb2xvciAgfCBgR3JhZGllbnQgb2YgZ3JhZGllbnQgXSAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg2NjYgOiBjb250ZXh0KSAtPlxuICAgICAgICBmdW4gKHg2NjcgOiBbIGBDb2xvciBvZiBjc3NfY29sb3IgIHwgYEdyYWRpZW50IG9mIGdyYWRpZW50IF0pIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIChjb250ZXh0X3RvX2pzIHg2NjYpIFwiZmlsbFN0eWxlXCJcbiAgICAgICAgICAgIChtYXRjaCB4NjY3IHdpdGhcbiAgICAgICAgICAgICB8IGBDb2xvciB4NjY4IC0+IGNzc19jb2xvcl90b19qcyB4NjY4XG4gICAgICAgICAgICAgfCBgR3JhZGllbnQgeDY2OSAtPiBncmFkaWVudF90b19qcyB4NjY5KVxuICAgIGxldCAoc2V0X3N0cm9rZV9zdHlsZSA6XG4gICAgICBjb250ZXh0IC0+IFsgYENvbG9yIG9mIGNzc19jb2xvciAgfCBgR3JhZGllbnQgb2YgZ3JhZGllbnQgXSAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg2NzAgOiBjb250ZXh0KSAtPlxuICAgICAgICBmdW4gKHg2NzEgOiBbIGBDb2xvciBvZiBjc3NfY29sb3IgIHwgYEdyYWRpZW50IG9mIGdyYWRpZW50IF0pIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIChjb250ZXh0X3RvX2pzIHg2NzApIFwic3Ryb2tlU3R5bGVcIlxuICAgICAgICAgICAgKG1hdGNoIHg2NzEgd2l0aFxuICAgICAgICAgICAgIHwgYENvbG9yIHg2NzIgLT4gY3NzX2NvbG9yX3RvX2pzIHg2NzJcbiAgICAgICAgICAgICB8IGBHcmFkaWVudCB4NjczIC0+IGdyYWRpZW50X3RvX2pzIHg2NzMpXG4gICAgbGV0IChzZXRfbGluZV93aWR0aCA6IGNvbnRleHQgLT4gZmxvYXQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4Njc0IDogY29udGV4dCkgLT5cbiAgICAgICAgZnVuICh4Njc1IDogZmxvYXQpIC0+XG4gICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIChjb250ZXh0X3RvX2pzIHg2NzQpIFwibGluZVdpZHRoXCJcbiAgICAgICAgICAgIChPanMuZmxvYXRfdG9fanMgeDY3NSlcbiAgICBsZXQgKGNyZWF0ZV9saW5lYXJfZ3JhZGllbnQgOlxuICAgICAgY29udGV4dCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBncmFkaWVudCkgPVxuICAgICAgZnVuICh4NjgwIDogY29udGV4dCkgLT5cbiAgICAgICAgZnVuICh4Njc2IDogZmxvYXQpIC0+XG4gICAgICAgICAgZnVuICh4Njc3IDogZmxvYXQpIC0+XG4gICAgICAgICAgICBmdW4gKHg2NzggOiBmbG9hdCkgLT5cbiAgICAgICAgICAgICAgZnVuICh4Njc5IDogZmxvYXQpIC0+XG4gICAgICAgICAgICAgICAgZ3JhZGllbnRfb2ZfanNcbiAgICAgICAgICAgICAgICAgIChPanMuY2FsbCAoY29udGV4dF90b19qcyB4NjgwKSBcImNyZWF0ZUxpbmVhckdyYWRpZW50XCJcbiAgICAgICAgICAgICAgICAgICAgIFt8KE9qcy5mbG9hdF90b19qcyB4Njc2KTsoT2pzLmZsb2F0X3RvX2pzIHg2NzcpOyhcbiAgICAgICAgICAgICAgICAgICAgICAgT2pzLmZsb2F0X3RvX2pzIHg2NzgpOyhPanMuZmxvYXRfdG9fanMgeDY3OSl8XSlcbiAgICBsZXQgKGFkZF9jb2xvcl9zdG9wIDogZ3JhZGllbnQgLT4gZmxvYXQgLT4gY3NzX2NvbG9yIC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDY4MyA6IGdyYWRpZW50KSAtPlxuICAgICAgICBmdW4gKHg2ODEgOiBmbG9hdCkgLT5cbiAgICAgICAgICBmdW4gKHg2ODIgOiBjc3NfY29sb3IpIC0+XG4gICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgKE9qcy5jYWxsIChncmFkaWVudF90b19qcyB4NjgzKSBcImFkZENvbG9yU3RvcFwiXG4gICAgICAgICAgICAgICAgIFt8KE9qcy5mbG9hdF90b19qcyB4NjgxKTsoY3NzX2NvbG9yX3RvX2pzIHg2ODIpfF0pXG4gICAgbGV0IChiZWdpbl9wYXRoIDogY29udGV4dCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg2ODQgOiBjb250ZXh0KSAtPlxuICAgICAgICBpZ25vcmUgKE9qcy5jYWxsIChjb250ZXh0X3RvX2pzIHg2ODQpIFwiYmVnaW5QYXRoXCIgW3x8XSlcbiAgICBsZXQgKGNsb3NlX3BhdGggOiBjb250ZXh0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDY4NSA6IGNvbnRleHQpIC0+XG4gICAgICAgIGlnbm9yZSAoT2pzLmNhbGwgKGNvbnRleHRfdG9fanMgeDY4NSkgXCJjbG9zZVBhdGhcIiBbfHxdKVxuICAgIGxldCAoYXJjIDogY29udGV4dCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiB1bml0KVxuICAgICAgPVxuICAgICAgZnVuICh4NjkxIDogY29udGV4dCkgLT5cbiAgICAgICAgZnVuICh4Njg2IDogZmxvYXQpIC0+XG4gICAgICAgICAgZnVuICh4Njg3IDogZmxvYXQpIC0+XG4gICAgICAgICAgICBmdW4gKHg2ODggOiBmbG9hdCkgLT5cbiAgICAgICAgICAgICAgZnVuICh4Njg5IDogZmxvYXQpIC0+XG4gICAgICAgICAgICAgICAgZnVuICh4NjkwIDogZmxvYXQpIC0+XG4gICAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgKE9qcy5jYWxsIChjb250ZXh0X3RvX2pzIHg2OTEpIFwiYXJjXCJcbiAgICAgICAgICAgICAgICAgICAgICAgW3woT2pzLmZsb2F0X3RvX2pzIHg2ODYpOyhPanMuZmxvYXRfdG9fanMgeDY4Nyk7KFxuICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5mbG9hdF90b19qcyB4Njg4KTsoT2pzLmZsb2F0X3RvX2pzIHg2ODkpOyhcbiAgICAgICAgICAgICAgICAgICAgICAgICBPanMuZmxvYXRfdG9fanMgeDY5MCl8XSlcbiAgICBsZXQgKG1vdmVfdG8gOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDY5NCA6IGNvbnRleHQpIC0+XG4gICAgICAgIGZ1biAoeDY5MiA6IGZsb2F0KSAtPlxuICAgICAgICAgIGZ1biAoeDY5MyA6IGZsb2F0KSAtPlxuICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgIChPanMuY2FsbCAoY29udGV4dF90b19qcyB4Njk0KSBcIm1vdmVUb1wiXG4gICAgICAgICAgICAgICAgIFt8KE9qcy5mbG9hdF90b19qcyB4NjkyKTsoT2pzLmZsb2F0X3RvX2pzIHg2OTMpfF0pXG4gICAgbGV0IChsaW5lX3RvIDogY29udGV4dCAtPiBmbG9hdCAtPiBmbG9hdCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg2OTcgOiBjb250ZXh0KSAtPlxuICAgICAgICBmdW4gKHg2OTUgOiBmbG9hdCkgLT5cbiAgICAgICAgICBmdW4gKHg2OTYgOiBmbG9hdCkgLT5cbiAgICAgICAgICAgIGlnbm9yZVxuICAgICAgICAgICAgICAoT2pzLmNhbGwgKGNvbnRleHRfdG9fanMgeDY5NykgXCJsaW5lVG9cIlxuICAgICAgICAgICAgICAgICBbfChPanMuZmxvYXRfdG9fanMgeDY5NSk7KE9qcy5mbG9hdF90b19qcyB4Njk2KXxdKVxuICAgIGxldCAoZmlsbCA6IGNvbnRleHQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4Njk4IDogY29udGV4dCkgLT5cbiAgICAgICAgaWdub3JlIChPanMuY2FsbCAoY29udGV4dF90b19qcyB4Njk4KSBcImZpbGxcIiBbfHxdKVxuICAgIGxldCAoc3Ryb2tlIDogY29udGV4dCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg2OTkgOiBjb250ZXh0KSAtPlxuICAgICAgICBpZ25vcmUgKE9qcy5jYWxsIChjb250ZXh0X3RvX2pzIHg2OTkpIFwic3Ryb2tlXCIgW3x8XSlcbiAgICBsZXQgKHN0cm9rZV9yZWN0IDogY29udGV4dCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg3MDQgOiBjb250ZXh0KSAtPlxuICAgICAgICBmdW4gKHg3MDAgOiBmbG9hdCkgLT5cbiAgICAgICAgICBmdW4gKHg3MDEgOiBmbG9hdCkgLT5cbiAgICAgICAgICAgIGZ1biAoeDcwMiA6IGZsb2F0KSAtPlxuICAgICAgICAgICAgICBmdW4gKHg3MDMgOiBmbG9hdCkgLT5cbiAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgIChPanMuY2FsbCAoY29udGV4dF90b19qcyB4NzA0KSBcInN0cm9rZVJlY3RcIlxuICAgICAgICAgICAgICAgICAgICAgW3woT2pzLmZsb2F0X3RvX2pzIHg3MDApOyhPanMuZmxvYXRfdG9fanMgeDcwMSk7KFxuICAgICAgICAgICAgICAgICAgICAgICBPanMuZmxvYXRfdG9fanMgeDcwMik7KE9qcy5mbG9hdF90b19qcyB4NzAzKXxdKVxuICAgIGxldCAoZmlsbF9yZWN0IDogY29udGV4dCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiBmbG9hdCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg3MDkgOiBjb250ZXh0KSAtPlxuICAgICAgICBmdW4gKHg3MDUgOiBmbG9hdCkgLT5cbiAgICAgICAgICBmdW4gKHg3MDYgOiBmbG9hdCkgLT5cbiAgICAgICAgICAgIGZ1biAoeDcwNyA6IGZsb2F0KSAtPlxuICAgICAgICAgICAgICBmdW4gKHg3MDggOiBmbG9hdCkgLT5cbiAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgIChPanMuY2FsbCAoY29udGV4dF90b19qcyB4NzA5KSBcImZpbGxSZWN0XCJcbiAgICAgICAgICAgICAgICAgICAgIFt8KE9qcy5mbG9hdF90b19qcyB4NzA1KTsoT2pzLmZsb2F0X3RvX2pzIHg3MDYpOyhcbiAgICAgICAgICAgICAgICAgICAgICAgT2pzLmZsb2F0X3RvX2pzIHg3MDcpOyhPanMuZmxvYXRfdG9fanMgeDcwOCl8XSlcbiAgICBsZXQgKHNldF9mb250IDogY29udGV4dCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NzEwIDogY29udGV4dCkgLT5cbiAgICAgICAgZnVuICh4NzExIDogc3RyaW5nKSAtPlxuICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAoY29udGV4dF90b19qcyB4NzEwKSBcImZvbnRcIlxuICAgICAgICAgICAgKE9qcy5zdHJpbmdfdG9fanMgeDcxMSlcbiAgICBsZXQgKGZpbGxfdGV4dCA6IGNvbnRleHQgLT4gc3RyaW5nIC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDcxNSA6IGNvbnRleHQpIC0+XG4gICAgICAgIGZ1biAoeDcxMiA6IHN0cmluZykgLT5cbiAgICAgICAgICBmdW4gKHg3MTMgOiBmbG9hdCkgLT5cbiAgICAgICAgICAgIGZ1biAoeDcxNCA6IGZsb2F0KSAtPlxuICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAoT2pzLmNhbGwgKGNvbnRleHRfdG9fanMgeDcxNSkgXCJmaWxsVGV4dFwiXG4gICAgICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4NzEyKTsoT2pzLmZsb2F0X3RvX2pzIHg3MTMpOyhcbiAgICAgICAgICAgICAgICAgICAgIE9qcy5mbG9hdF90b19qcyB4NzE0KXxdKVxuICAgIGxldCAoc3Ryb2tlX3RleHQgOiBjb250ZXh0IC0+IHN0cmluZyAtPiBmbG9hdCAtPiBmbG9hdCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg3MTkgOiBjb250ZXh0KSAtPlxuICAgICAgICBmdW4gKHg3MTYgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgZnVuICh4NzE3IDogZmxvYXQpIC0+XG4gICAgICAgICAgICBmdW4gKHg3MTggOiBmbG9hdCkgLT5cbiAgICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgICAgKE9qcy5jYWxsIChjb250ZXh0X3RvX2pzIHg3MTkpIFwic3Ryb2tlVGV4dFwiXG4gICAgICAgICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4NzE2KTsoT2pzLmZsb2F0X3RvX2pzIHg3MTcpOyhcbiAgICAgICAgICAgICAgICAgICAgIE9qcy5mbG9hdF90b19qcyB4NzE4KXxdKVxuICAgIG1vZHVsZSBUZXh0TWV0cmljcyA9XG4gICAgICBzdHJ1Y3RcbiAgICAgICAgdHlwZSB0ID0gT2pzLnRcbiAgICAgICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDcyMSA6IE9qcy50KSAtPiB4NzIxXG4gICAgICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDcyMCA6IE9qcy50KSAtPiB4NzIwXG4gICAgICAgIGxldCAod2lkdGggOiB0IC0+IGZsb2F0KSA9XG4gICAgICAgICAgZnVuICh4NzIyIDogdCkgLT5cbiAgICAgICAgICAgIE9qcy5mbG9hdF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg3MjIpIFwid2lkdGhcIilcbiAgICAgIGVuZFxuICAgIGxldCAobWVhc3VyZV90ZXh0IDogY29udGV4dCAtPiBzdHJpbmcgLT4gVGV4dE1ldHJpY3MudCkgPVxuICAgICAgZnVuICh4NzI0IDogY29udGV4dCkgLT5cbiAgICAgICAgZnVuICh4NzIzIDogc3RyaW5nKSAtPlxuICAgICAgICAgIFRleHRNZXRyaWNzLnRfb2ZfanNcbiAgICAgICAgICAgIChPanMuY2FsbCAoY29udGV4dF90b19qcyB4NzI0KSBcIm1lYXN1cmVUZXh0XCJcbiAgICAgICAgICAgICAgIFt8KE9qcy5zdHJpbmdfdG9fanMgeDcyMyl8XSlcbiAgICBsZXQgKHJvdGF0ZSA6IGNvbnRleHQgLT4gZmxvYXQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NzI2IDogY29udGV4dCkgLT5cbiAgICAgICAgZnVuICh4NzI1IDogZmxvYXQpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKGNvbnRleHRfdG9fanMgeDcyNikgXCJyb3RhdGVcIlxuICAgICAgICAgICAgICAgW3woT2pzLmZsb2F0X3RvX2pzIHg3MjUpfF0pXG4gICAgbGV0ICh0cmFuc2xhdGUgOiBjb250ZXh0IC0+IGZsb2F0IC0+IGZsb2F0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDcyOSA6IGNvbnRleHQpIC0+XG4gICAgICAgIGZ1biAoeDcyNyA6IGZsb2F0KSAtPlxuICAgICAgICAgIGZ1biAoeDcyOCA6IGZsb2F0KSAtPlxuICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgIChPanMuY2FsbCAoY29udGV4dF90b19qcyB4NzI5KSBcInRyYW5zbGF0ZVwiXG4gICAgICAgICAgICAgICAgIFt8KE9qcy5mbG9hdF90b19qcyB4NzI3KTsoT2pzLmZsb2F0X3RvX2pzIHg3MjgpfF0pXG4gICAgbGV0IChzY2FsZSA6IGNvbnRleHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NzMyIDogY29udGV4dCkgLT5cbiAgICAgICAgZnVuICh4NzMwIDogZmxvYXQpIC0+XG4gICAgICAgICAgZnVuICh4NzMxIDogZmxvYXQpIC0+XG4gICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgKE9qcy5jYWxsIChjb250ZXh0X3RvX2pzIHg3MzIpIFwic2NhbGVcIlxuICAgICAgICAgICAgICAgICBbfChPanMuZmxvYXRfdG9fanMgeDczMCk7KE9qcy5mbG9hdF90b19qcyB4NzMxKXxdKVxuICAgIGxldCAoY2xlYXJfcmVjdCA6IGNvbnRleHQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gZmxvYXQgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NzM3IDogY29udGV4dCkgLT5cbiAgICAgICAgZnVuICh4NzMzIDogZmxvYXQpIC0+XG4gICAgICAgICAgZnVuICh4NzM0IDogZmxvYXQpIC0+XG4gICAgICAgICAgICBmdW4gKHg3MzUgOiBmbG9hdCkgLT5cbiAgICAgICAgICAgICAgZnVuICh4NzM2IDogZmxvYXQpIC0+XG4gICAgICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgICAgICAoT2pzLmNhbGwgKGNvbnRleHRfdG9fanMgeDczNykgXCJjbGVhclJlY3RcIlxuICAgICAgICAgICAgICAgICAgICAgW3woT2pzLmZsb2F0X3RvX2pzIHg3MzMpOyhPanMuZmxvYXRfdG9fanMgeDczNCk7KFxuICAgICAgICAgICAgICAgICAgICAgICBPanMuZmxvYXRfdG9fanMgeDczNSk7KE9qcy5mbG9hdF90b19qcyB4NzM2KXxdKVxuICBlbmRcbm1vZHVsZSBQZXJmb3JtYW5jZSA9XG4gIHN0cnVjdFxuICAgIGxldCAobm93IDogdW5pdCAtPiBmbG9hdCkgPVxuICAgICAgZnVuICgpIC0+XG4gICAgICAgIE9qcy5mbG9hdF9vZl9qc1xuICAgICAgICAgIChPanMuY2FsbCAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJwZXJmb3JtYW5jZVwiKSBcIm5vd1wiIFt8fF0pXG4gIGVuZFxubW9kdWxlIENvbnNvbGUgPVxuICBzdHJ1Y3RcbiAgICB0eXBlIHQgPSBPanMudFxuICAgIGxldCByZWMgdF9vZl9qcyA6IE9qcy50IC0+IHQgPSBmdW4gKHg3MzkgOiBPanMudCkgLT4geDczOVxuICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDczOCA6IE9qcy50KSAtPiB4NzM4XG4gICAgbGV0IChsb2cgOiB0IC0+IE9qcy50IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDc0MSA6IHQpIC0+XG4gICAgICAgIGZ1biAoeDc0MCA6IE9qcy50KSAtPiBpZ25vcmUgKE9qcy5jYWxsICh0X3RvX2pzIHg3NDEpIFwibG9nXCIgW3x4NzQwfF0pXG4gICAgbGV0ICh0aW1lIDogdCAtPiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NzQzIDogdCkgLT5cbiAgICAgICAgZnVuICh4NzQyIDogc3RyaW5nKSAtPlxuICAgICAgICAgIGlnbm9yZSAoT2pzLmNhbGwgKHRfdG9fanMgeDc0MykgXCJ0aW1lXCIgW3woT2pzLnN0cmluZ190b19qcyB4NzQyKXxdKVxuICAgIGxldCAodGltZV9lbmQgOiB0IC0+IHN0cmluZyAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg3NDUgOiB0KSAtPlxuICAgICAgICBmdW4gKHg3NDQgOiBzdHJpbmcpIC0+XG4gICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDc0NSkgXCJ0aW1lRW5kXCIgW3woT2pzLnN0cmluZ190b19qcyB4NzQ0KXxdKVxuICBlbmRcbmxldCAoY29uc29sZSA6IENvbnNvbGUudCkgPVxuICBDb25zb2xlLnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwiY29uc29sZVwiKVxubW9kdWxlIFVpbnQ4QXJyYXkgPVxuICBzdHJ1Y3RcbiAgICB0eXBlIHQgPSBBcnJheUJ1ZmZlci50XG4gICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9XG4gICAgICBmdW4gKHg3NDcgOiBPanMudCkgLT4gQXJyYXlCdWZmZXIudF9vZl9qcyB4NzQ3XG4gICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID1cbiAgICAgIGZ1biAoeDc0NiA6IEFycmF5QnVmZmVyLnQpIC0+IEFycmF5QnVmZmVyLnRfdG9fanMgeDc0NlxuICAgIGxldCAoZnJvbV9idWZmZXIgOiBBcnJheUJ1ZmZlci50IC0+IHQpID1cbiAgICAgIGZ1biAoeDc0OCA6IEFycmF5QnVmZmVyLnQpIC0+XG4gICAgICAgIHRfb2ZfanNcbiAgICAgICAgICAoT2pzLm5ld19vYmogKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwiVWludDhBcnJheVwiKVxuICAgICAgICAgICAgIFt8KEFycmF5QnVmZmVyLnRfdG9fanMgeDc0OCl8XSlcbiAgICBsZXQgKGNyZWF0ZSA6IGludCAtPiB0KSA9XG4gICAgICBmdW4gKHg3NDkgOiBpbnQpIC0+XG4gICAgICAgIHRfb2ZfanNcbiAgICAgICAgICAoT2pzLm5ld19vYmogKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwiVWludDhBcnJheVwiKVxuICAgICAgICAgICAgIFt8KE9qcy5pbnRfdG9fanMgeDc0OSl8XSlcbiAgICBsZXQgKHNldCA6IHQgLT4gaW50IGFycmF5IC0+IGludCAtPiB1bml0KSA9XG4gICAgICBmdW4gKHg3NTMgOiB0KSAtPlxuICAgICAgICBmdW4gKHg3NTAgOiBpbnQgYXJyYXkpIC0+XG4gICAgICAgICAgZnVuICh4NzUyIDogaW50KSAtPlxuICAgICAgICAgICAgaWdub3JlXG4gICAgICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4NzUzKSBcInNldFwiXG4gICAgICAgICAgICAgICAgIFt8KE9qcy5hcnJheV90b19qcyBPanMuaW50X3RvX2pzIHg3NTApOyhPanMuaW50X3RvX2pzIHg3NTIpfF0pXG4gICAgbGV0IChsZW5ndGggOiB0IC0+IGludCkgPVxuICAgICAgZnVuICh4NzU0IDogdCkgLT5cbiAgICAgICAgT2pzLmludF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg3NTQpIFwibGVuZ3RoXCIpXG4gICAgbGV0IChyYW5kb20gOiB0IC0+IHVuaXQpID1cbiAgICAgIGZ1biAoeDc1NSA6IHQpIC0+XG4gICAgICAgIGlnbm9yZVxuICAgICAgICAgIChPanMuY2FsbFxuICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwid2luZG93XCIpXG4gICAgICAgICAgICAgICAgXCJjcnlwdG9cIikgXCJnZXRSYW5kb21WYWx1ZXNcIiBbfCh0X3RvX2pzIHg3NTUpfF0pXG4gICAgbGV0ICh0b19hcnJheSA6IHQgLT4gaW50IGFycmF5KSA9XG4gICAgICBmdW4gKHg3NTYgOiB0KSAtPiBPanMuYXJyYXlfb2ZfanMgT2pzLmludF9vZl9qcyAodF90b19qcyB4NzU2KVxuICAgIGxldCBnZXQgYSBpID0gT2pzLmludF9vZl9qcyAoT2pzLmFycmF5X2dldCAodF90b19qcyBhKSBpKVxuICAgIGxldCAoZnJvbSA6IE9qcy50IC0+IChPanMudCAtPiBpbnQpIC0+IHQpID1cbiAgICAgIGZ1biAoeDc1OCA6IE9qcy50KSAtPlxuICAgICAgICBmdW4gKHg3NTkgOiBPanMudCAtPiBpbnQpIC0+XG4gICAgICAgICAgdF9vZl9qc1xuICAgICAgICAgICAgKE9qcy5jYWxsIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIlVpbnQ4QXJyYXlcIikgXCJmcm9tXCJcbiAgICAgICAgICAgICAgIFt8eDc1ODsoT2pzLmZ1bl90b19qcyAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgKGZ1biAoeDc2MCA6IE9qcy50KSAtPiBPanMuaW50X3RvX2pzICh4NzU5IHg3NjApKSl8XSlcbiAgZW5kXG5tb2R1bGUgT2JqZWN0VVJMID1cbiAgc3RydWN0XG4gICAgbGV0IChvZl9ibG9iIDogQmxvYi50IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4NzYxIDogQmxvYi50KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzXG4gICAgICAgICAgKE9qcy5jYWxsIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIlVSTFwiKSBcImNyZWF0ZU9iamVjdFVSTFwiXG4gICAgICAgICAgICAgW3woQmxvYi50X3RvX2pzIHg3NjEpfF0pXG4gICAgbGV0IChvZl9maWxlIDogRmlsZS50IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4NzYyIDogRmlsZS50KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzXG4gICAgICAgICAgKE9qcy5jYWxsIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIlVSTFwiKSBcImNyZWF0ZU9iamVjdFVSTFwiXG4gICAgICAgICAgICAgW3woRmlsZS50X3RvX2pzIHg3NjIpfF0pXG4gICAgbGV0IChyZXZva2UgOiBzdHJpbmcgLT4gdW5pdCkgPVxuICAgICAgZnVuICh4NzYzIDogc3RyaW5nKSAtPlxuICAgICAgICBpZ25vcmVcbiAgICAgICAgICAoT2pzLmNhbGwgKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwiVVJMXCIpIFwicmV2b2tlT2JqZWN0VVJMXCJcbiAgICAgICAgICAgICBbfChPanMuc3RyaW5nX3RvX2pzIHg3NjMpfF0pXG4gIGVuZFxubW9kdWxlIFN2ZyA9XG4gIHN0cnVjdFxuICAgIG1vZHVsZSBMZW5ndGggPVxuICAgICAgc3RydWN0XG4gICAgICAgIHR5cGUgdCA9IE9qcy50XG4gICAgICAgIGxldCByZWMgdF9vZl9qcyA6IE9qcy50IC0+IHQgPSBmdW4gKHg3NjUgOiBPanMudCkgLT4geDc2NVxuICAgICAgICBhbmQgdF90b19qcyA6IHQgLT4gT2pzLnQgPSBmdW4gKHg3NjQgOiBPanMudCkgLT4geDc2NFxuICAgICAgICBsZXQgKHVuaXRfdHlwZSA6IHQgLT4gaW50KSA9XG4gICAgICAgICAgZnVuICh4NzY2IDogdCkgLT5cbiAgICAgICAgICAgIE9qcy5pbnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NzY2KSBcInVuaXRUeXBlXCIpXG4gICAgICAgIGxldCAodmFsdWUgOiB0IC0+IGZsb2F0KSA9XG4gICAgICAgICAgZnVuICh4NzY3IDogdCkgLT5cbiAgICAgICAgICAgIE9qcy5mbG9hdF9vZl9qcyAoT2pzLmdldF9wcm9wX2FzY2lpICh0X3RvX2pzIHg3NjcpIFwidmFsdWVcIilcbiAgICAgICAgbGV0ICh2YWx1ZV9hc19zdHJpbmcgOiB0IC0+IHN0cmluZykgPVxuICAgICAgICAgIGZ1biAoeDc2OCA6IHQpIC0+XG4gICAgICAgICAgICBPanMuc3RyaW5nX29mX2pzXG4gICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDc2OCkgXCJ2YWx1ZUFzU3RyaW5nXCIpXG4gICAgICAgIGxldCAodmFsdWVfaW5fc3BlY2lmaWVkX3VuaXRzIDogdCAtPiBmbG9hdCkgPVxuICAgICAgICAgIGZ1biAoeDc2OSA6IHQpIC0+XG4gICAgICAgICAgICBPanMuZmxvYXRfb2ZfanNcbiAgICAgICAgICAgICAgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NzY5KSBcInZhbHVlSW5TcGVjaWZpZWRVbml0c1wiKVxuICAgICAgZW5kXG4gICAgbW9kdWxlIEFuaW1hdGVkTGVuZ3RoID1cbiAgICAgIHN0cnVjdFxuICAgICAgICB0eXBlIHQgPSBPanMudFxuICAgICAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4NzcxIDogT2pzLnQpIC0+IHg3NzFcbiAgICAgICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4NzcwIDogT2pzLnQpIC0+IHg3NzBcbiAgICAgICAgbGV0IChhbmltX3ZhbCA6IHQgLT4gTGVuZ3RoLnQpID1cbiAgICAgICAgICBmdW4gKHg3NzIgOiB0KSAtPlxuICAgICAgICAgICAgTGVuZ3RoLnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NzcyKSBcImFuaW1WYWxcIilcbiAgICAgICAgbGV0IChiYXNlX3ZhbCA6IHQgLT4gTGVuZ3RoLnQpID1cbiAgICAgICAgICBmdW4gKHg3NzMgOiB0KSAtPlxuICAgICAgICAgICAgTGVuZ3RoLnRfb2ZfanMgKE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4NzczKSBcImJhc2VWYWxcIilcbiAgICAgIGVuZFxuICBlbmRcbm1vZHVsZSBCYXNlNjQgPVxuICBzdHJ1Y3RcbiAgICBsZXQgKGVuY29kZSA6IEpzU3RyaW5nLnQgLT4gc3RyaW5nKSA9XG4gICAgICBmdW4gKHg3NzQgOiBKc1N0cmluZy50KSAtPlxuICAgICAgICBPanMuc3RyaW5nX29mX2pzXG4gICAgICAgICAgKE9qcy5jYWxsIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIndpbmRvd1wiKSBcImJ0b2FcIlxuICAgICAgICAgICAgIFt8KEpzU3RyaW5nLnRfdG9fanMgeDc3NCl8XSlcbiAgICBsZXQgKGRlY29kZSA6IHN0cmluZyAtPiBKc1N0cmluZy50KSA9XG4gICAgICBmdW4gKHg3NzUgOiBzdHJpbmcpIC0+XG4gICAgICAgIEpzU3RyaW5nLnRfb2ZfanNcbiAgICAgICAgICAoT2pzLmNhbGwgKE9qcy5nZXRfcHJvcF9hc2NpaSBPanMuZ2xvYmFsIFwid2luZG93XCIpIFwiYXRvYlwiXG4gICAgICAgICAgICAgW3woT2pzLnN0cmluZ190b19qcyB4Nzc1KXxdKVxuICBlbmRcbm1vZHVsZSBGZXRjaFJlc3BvbnNlID1cbiAgc3RydWN0XG4gICAgdHlwZSB0ID0gT2pzLnRcbiAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4Nzc3IDogT2pzLnQpIC0+IHg3NzdcbiAgICBhbmQgdF90b19qcyA6IHQgLT4gT2pzLnQgPSBmdW4gKHg3NzYgOiBPanMudCkgLT4geDc3NlxuICAgIGxldCAoYmxvYiA6IHQgLT4gT2pzLnQgUHJvbWlzZS50KSA9XG4gICAgICBmdW4gKHg3NzggOiB0KSAtPlxuICAgICAgICBQcm9taXNlLnRfb2ZfanMgKGZ1biAoeDc3OSA6IE9qcy50KSAtPiB4Nzc5KVxuICAgICAgICAgIChPanMuY2FsbCAodF90b19qcyB4Nzc4KSBcImJsb2JcIiBbfHxdKVxuICBlbmRcbmxldCAoZmV0Y2ggOiBzdHJpbmcgLT4gRmV0Y2hSZXNwb25zZS50IFByb21pc2UudCkgPVxuICBmdW4gKHg3ODAgOiBzdHJpbmcpIC0+XG4gICAgUHJvbWlzZS50X29mX2pzIEZldGNoUmVzcG9uc2UudF9vZl9qc1xuICAgICAgKE9qcy5jYWxsIE9qcy5nbG9iYWwgXCJmZXRjaFwiIFt8KE9qcy5zdHJpbmdfdG9fanMgeDc4MCl8XSlcbm1vZHVsZSBUZXh0RGVjb2RlciA9XG4gIHN0cnVjdFxuICAgIHR5cGUgdCA9IE9qcy50XG4gICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDc4MyA6IE9qcy50KSAtPiB4NzgzXG4gICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4NzgyIDogT2pzLnQpIC0+IHg3ODJcbiAgICBsZXQgKGNyZWF0ZSA6ID9sYWJlbDpzdHJpbmcgLT4gdW5pdCAtPiB0KSA9XG4gICAgICBmdW4gP2xhYmVsOih4Nzg0IDogc3RyaW5nIG9wdGlvbikgLT5cbiAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgdF9vZl9qc1xuICAgICAgICAgICAgKE9qcy5uZXdfb2JqX2FyciAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJUZXh0RGVjb2RlclwiKVxuICAgICAgICAgICAgICAgKGxldCB4Nzg1ID1cbiAgICAgICAgICAgICAgICAgIE9qcy5uZXdfb2JqIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIkFycmF5XCIpIFt8fF0gaW5cbiAgICAgICAgICAgICAgICAobWF0Y2ggeDc4NCB3aXRoXG4gICAgICAgICAgICAgICAgIHwgU29tZSB4Nzg2IC0+XG4gICAgICAgICAgICAgICAgICAgICBpZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgKE9qcy5jYWxsIHg3ODUgXCJwdXNoXCIgW3woT2pzLnN0cmluZ190b19qcyB4Nzg2KXxdKVxuICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgIHg3ODUpKVxuICAgIGxldCAoZGVjb2RlIDogdCAtPiBBcnJheUJ1ZmZlci50IC0+IHN0cmluZykgPVxuICAgICAgZnVuICh4Nzg4IDogdCkgLT5cbiAgICAgICAgZnVuICh4Nzg3IDogQXJyYXlCdWZmZXIudCkgLT5cbiAgICAgICAgICBPanMuc3RyaW5nX29mX2pzXG4gICAgICAgICAgICAoT2pzLmNhbGwgKHRfdG9fanMgeDc4OCkgXCJkZWNvZGVcIiBbfChBcnJheUJ1ZmZlci50X3RvX2pzIHg3ODcpfF0pXG4gIGVuZFxubW9kdWxlIE5hdmlnYXRvciA9XG4gIHN0cnVjdFxuICAgIG1vZHVsZSBBdXRoZW50aWNhdG9yQXR0ZXN0YXRpb25SZXNwb25zZSA9XG4gICAgICBzdHJ1Y3RcbiAgICAgICAgdHlwZSB0ID0gT2pzLnRcbiAgICAgICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDc5MCA6IE9qcy50KSAtPiB4NzkwXG4gICAgICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDc4OSA6IE9qcy50KSAtPiB4Nzg5XG4gICAgICAgIGxldCAoY2xpZW50X2RhdGFfanNvbiA6IHQgLT4gQXJyYXlCdWZmZXIudCkgPVxuICAgICAgICAgIGZ1biAoeDc5MSA6IHQpIC0+XG4gICAgICAgICAgICBBcnJheUJ1ZmZlci50X29mX2pzXG4gICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDc5MSkgXCJjbGllbnREYXRhSlNPTlwiKVxuICAgICAgICBsZXQgKGF0dGVzdGF0aW9uX29iamVjdCA6IHQgLT4gQXJyYXlCdWZmZXIudCkgPVxuICAgICAgICAgIGZ1biAoeDc5MiA6IHQpIC0+XG4gICAgICAgICAgICBBcnJheUJ1ZmZlci50X29mX2pzXG4gICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDc5MikgXCJhdHRlc3RhdGlvbk9iamVjdFwiKVxuICAgICAgZW5kXG4gICAgbW9kdWxlIEF1dGhlbnRpY2F0b3JBc3NlcnRpb25SZXNwb25zZSA9XG4gICAgICBzdHJ1Y3RcbiAgICAgICAgdHlwZSB0ID0gT2pzLnRcbiAgICAgICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDc5NCA6IE9qcy50KSAtPiB4Nzk0XG4gICAgICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDc5MyA6IE9qcy50KSAtPiB4NzkzXG4gICAgICAgIGxldCAoY2xpZW50X2RhdGFfanNvbiA6IHQgLT4gQXJyYXlCdWZmZXIudCkgPVxuICAgICAgICAgIGZ1biAoeDc5NSA6IHQpIC0+XG4gICAgICAgICAgICBBcnJheUJ1ZmZlci50X29mX2pzXG4gICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDc5NSkgXCJjbGllbnREYXRhSlNPTlwiKVxuICAgICAgICBsZXQgKGF1dGhlbnRpY2F0b3JfZGF0YSA6IHQgLT4gQXJyYXlCdWZmZXIudCkgPVxuICAgICAgICAgIGZ1biAoeDc5NiA6IHQpIC0+XG4gICAgICAgICAgICBBcnJheUJ1ZmZlci50X29mX2pzXG4gICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDc5NikgXCJhdXRoZW50aWNhdG9yRGF0YVwiKVxuICAgICAgICBsZXQgKHNpZ25hdHVyZSA6IHQgLT4gQXJyYXlCdWZmZXIudCkgPVxuICAgICAgICAgIGZ1biAoeDc5NyA6IHQpIC0+XG4gICAgICAgICAgICBBcnJheUJ1ZmZlci50X29mX2pzXG4gICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDc5NykgXCJzaWduYXR1cmVcIilcbiAgICAgICAgbGV0ICh1c2VyX2hhbmRsZSA6IHQgLT4gQXJyYXlCdWZmZXIudCkgPVxuICAgICAgICAgIGZ1biAoeDc5OCA6IHQpIC0+XG4gICAgICAgICAgICBBcnJheUJ1ZmZlci50X29mX2pzXG4gICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDc5OCkgXCJ1c2VySGFuZGxlXCIpXG4gICAgICBlbmRcbiAgICBtb2R1bGUgUHVibGljS2V5Q3JlZGVudGlhbCA9XG4gICAgICBzdHJ1Y3RcbiAgICAgICAgdHlwZSB0ID0gT2pzLnRcbiAgICAgICAgbGV0IHJlYyB0X29mX2pzIDogT2pzLnQgLT4gdCA9IGZ1biAoeDgwMCA6IE9qcy50KSAtPiB4ODAwXG4gICAgICAgIGFuZCB0X3RvX2pzIDogdCAtPiBPanMudCA9IGZ1biAoeDc5OSA6IE9qcy50KSAtPiB4Nzk5XG4gICAgICAgIGxldCAodHlwZV8gOiB0IC0+IHN0cmluZykgPVxuICAgICAgICAgIGZ1biAoeDgwMSA6IHQpIC0+XG4gICAgICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDgwMSkgXCJ0eXBlXCIpXG4gICAgICAgIGxldCAoaWQgOiB0IC0+IHN0cmluZykgPVxuICAgICAgICAgIGZ1biAoeDgwMiA6IHQpIC0+XG4gICAgICAgICAgICBPanMuc3RyaW5nX29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDgwMikgXCJpZFwiKVxuICAgICAgICBsZXQgKHJhd19pZCA6IHQgLT4gQXJyYXlCdWZmZXIudCkgPVxuICAgICAgICAgIGZ1biAoeDgwMyA6IHQpIC0+XG4gICAgICAgICAgICBBcnJheUJ1ZmZlci50X29mX2pzIChPanMuZ2V0X3Byb3BfYXNjaWkgKHRfdG9fanMgeDgwMykgXCJyYXdJZFwiKVxuICAgICAgICBsZXQgKHJlc3BvbnNlIDogdCAtPiBPanMudCkgPVxuICAgICAgICAgIGZ1biAoeDgwNCA6IHQpIC0+IE9qcy5nZXRfcHJvcF9hc2NpaSAodF90b19qcyB4ODA0KSBcInJlc3BvbnNlXCJcbiAgICAgIGVuZFxuICAgIG1vZHVsZSBDcmVkZW50aWFsID1cbiAgICAgIHN0cnVjdFxuICAgICAgICB0eXBlIHQgPSBPanMudFxuICAgICAgICBsZXQgcmVjIHRfb2ZfanMgOiBPanMudCAtPiB0ID0gZnVuICh4ODA2IDogT2pzLnQpIC0+IHg4MDZcbiAgICAgICAgYW5kIHRfdG9fanMgOiB0IC0+IE9qcy50ID0gZnVuICh4ODA1IDogT2pzLnQpIC0+IHg4MDVcbiAgICAgICAgdHlwZSBycF9vcHRpb25zID0gT2pzLnRcbiAgICAgICAgbGV0IHJlYyBycF9vcHRpb25zX29mX2pzIDogT2pzLnQgLT4gcnBfb3B0aW9ucyA9XG4gICAgICAgICAgZnVuICh4ODA4IDogT2pzLnQpIC0+IHg4MDhcbiAgICAgICAgYW5kIHJwX29wdGlvbnNfdG9fanMgOiBycF9vcHRpb25zIC0+IE9qcy50ID1cbiAgICAgICAgICBmdW4gKHg4MDcgOiBPanMudCkgLT4geDgwN1xuICAgICAgICBsZXQgKHJwX29wdGlvbnMgOiA/aWQ6c3RyaW5nIC0+ID9uYW1lOnN0cmluZyAtPiB1bml0IC0+IHJwX29wdGlvbnMpID1cbiAgICAgICAgICBmdW4gP2lkOih4ODA5IDogc3RyaW5nIG9wdGlvbikgLT5cbiAgICAgICAgICAgIGZ1biA/bmFtZTooeDgxMCA6IHN0cmluZyBvcHRpb24pIC0+XG4gICAgICAgICAgICAgIGZ1biAoKSAtPlxuICAgICAgICAgICAgICAgIGxldCB4ODExID0gT2pzLmVtcHR5X29iaiAoKSBpblxuICAgICAgICAgICAgICAgIChtYXRjaCB4ODA5IHdpdGhcbiAgICAgICAgICAgICAgICAgfCBTb21lIHg4MTMgLT5cbiAgICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODExIFwiaWRcIiAoT2pzLnN0cmluZ190b19qcyB4ODEzKVxuICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgIChtYXRjaCB4ODEwIHdpdGhcbiAgICAgICAgICAgICAgICAgfCBTb21lIHg4MTIgLT5cbiAgICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODExIFwibmFtZVwiIChPanMuc3RyaW5nX3RvX2pzIHg4MTIpXG4gICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgcnBfb3B0aW9uc19vZl9qcyB4ODExXG4gICAgICAgIHR5cGUgdXNlcl9vcHRpb25zID0gT2pzLnRcbiAgICAgICAgbGV0IHJlYyB1c2VyX29wdGlvbnNfb2ZfanMgOiBPanMudCAtPiB1c2VyX29wdGlvbnMgPVxuICAgICAgICAgIGZ1biAoeDgxNSA6IE9qcy50KSAtPiB4ODE1XG4gICAgICAgIGFuZCB1c2VyX29wdGlvbnNfdG9fanMgOiB1c2VyX29wdGlvbnMgLT4gT2pzLnQgPVxuICAgICAgICAgIGZ1biAoeDgxNCA6IE9qcy50KSAtPiB4ODE0XG4gICAgICAgIGxldCAodXNlcl9vcHRpb25zIDpcbiAgICAgICAgICA/aWQ6QXJyYXlCdWZmZXIudCAtPlxuICAgICAgICAgICAgP25hbWU6c3RyaW5nIC0+ID9kaXNwbGF5X25hbWU6c3RyaW5nIC0+IHVuaXQgLT4gdXNlcl9vcHRpb25zKVxuICAgICAgICAgID1cbiAgICAgICAgICBmdW4gP2lkOih4ODE2IDogQXJyYXlCdWZmZXIudCBvcHRpb24pIC0+XG4gICAgICAgICAgICBmdW4gP25hbWU6KHg4MTcgOiBzdHJpbmcgb3B0aW9uKSAtPlxuICAgICAgICAgICAgICBmdW4gP2Rpc3BsYXlfbmFtZTooeDgxOCA6IHN0cmluZyBvcHRpb24pIC0+XG4gICAgICAgICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICAgICAgICBsZXQgeDgxOSA9IE9qcy5lbXB0eV9vYmogKCkgaW5cbiAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODE2IHdpdGhcbiAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDgyMiAtPlxuICAgICAgICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDgxOSBcImlkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAoQXJyYXlCdWZmZXIudF90b19qcyB4ODIyKVxuICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAobWF0Y2ggeDgxNyB3aXRoXG4gICAgICAgICAgICAgICAgICAgfCBTb21lIHg4MjEgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4MTkgXCJuYW1lXCIgKE9qcy5zdHJpbmdfdG9fanMgeDgyMSlcbiAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgKG1hdGNoIHg4MTggd2l0aFxuICAgICAgICAgICAgICAgICAgIHwgU29tZSB4ODIwIC0+XG4gICAgICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODE5IFwiZGlzcGxheU5hbWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHg4MjApXG4gICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgIHVzZXJfb3B0aW9uc19vZl9qcyB4ODE5XG4gICAgICAgIHR5cGUga2V5X3BhcmFtID0gT2pzLnRcbiAgICAgICAgbGV0IHJlYyBrZXlfcGFyYW1fb2ZfanMgOiBPanMudCAtPiBrZXlfcGFyYW0gPVxuICAgICAgICAgIGZ1biAoeDgyNCA6IE9qcy50KSAtPiB4ODI0XG4gICAgICAgIGFuZCBrZXlfcGFyYW1fdG9fanMgOiBrZXlfcGFyYW0gLT4gT2pzLnQgPSBmdW4gKHg4MjMgOiBPanMudCkgLT4geDgyM1xuICAgICAgICBsZXQgKGtleV9wYXJhbSA6ID90eXBlXzpzdHJpbmcgLT4gP2FsZzppbnQgLT4gdW5pdCAtPiBrZXlfcGFyYW0pID1cbiAgICAgICAgICBmdW4gP3R5cGVfOih4ODI1IDogc3RyaW5nIG9wdGlvbikgLT5cbiAgICAgICAgICAgIGZ1biA/YWxnOih4ODI2IDogaW50IG9wdGlvbikgLT5cbiAgICAgICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICAgICAgbGV0IHg4MjcgPSBPanMuZW1wdHlfb2JqICgpIGluXG4gICAgICAgICAgICAgICAgKG1hdGNoIHg4MjUgd2l0aFxuICAgICAgICAgICAgICAgICB8IFNvbWUgeDgyOSAtPlxuICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4MjcgXCJ0eXBlXCIgKE9qcy5zdHJpbmdfdG9fanMgeDgyOSlcbiAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAobWF0Y2ggeDgyNiB3aXRoXG4gICAgICAgICAgICAgICAgIHwgU29tZSB4ODI4IC0+XG4gICAgICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDgyNyBcImFsZ1wiIChPanMuaW50X3RvX2pzIHg4MjgpXG4gICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAga2V5X3BhcmFtX29mX2pzIHg4MjdcbiAgICAgICAgdHlwZSBhdXRoZW50aWNhdG9yX29wdGlvbnMgPSBPanMudFxuICAgICAgICBsZXQgcmVjIGF1dGhlbnRpY2F0b3Jfb3B0aW9uc19vZl9qcyA6IE9qcy50IC0+IGF1dGhlbnRpY2F0b3Jfb3B0aW9uc1xuICAgICAgICAgID0gZnVuICh4ODMxIDogT2pzLnQpIC0+IHg4MzFcbiAgICAgICAgYW5kIGF1dGhlbnRpY2F0b3Jfb3B0aW9uc190b19qcyA6IGF1dGhlbnRpY2F0b3Jfb3B0aW9ucyAtPiBPanMudCA9XG4gICAgICAgICAgZnVuICh4ODMwIDogT2pzLnQpIC0+IHg4MzBcbiAgICAgICAgbGV0IChhdXRoZW50aWNhdG9yX29wdGlvbnMgOlxuICAgICAgICAgID9hdXRoZW50aWNhdG9yX2F0dGFjaG1lbnQ6c3RyaW5nIC0+XG4gICAgICAgICAgICA/cmVzaWRlbnRfa2V5OnN0cmluZyAtPlxuICAgICAgICAgICAgICA/cmVxdWlyZV9yZXNpZGVudF9rZXk6Ym9vbCAtPlxuICAgICAgICAgICAgICAgID91c2VyX3ZlcmlmaWNhdGlvbjpzdHJpbmcgLT4gdW5pdCAtPiBhdXRoZW50aWNhdG9yX29wdGlvbnMpXG4gICAgICAgICAgPVxuICAgICAgICAgIGZ1biA/YXV0aGVudGljYXRvcl9hdHRhY2htZW50Oih4ODMyIDogc3RyaW5nIG9wdGlvbikgLT5cbiAgICAgICAgICAgIGZ1biA/cmVzaWRlbnRfa2V5Oih4ODMzIDogc3RyaW5nIG9wdGlvbikgLT5cbiAgICAgICAgICAgICAgZnVuID9yZXF1aXJlX3Jlc2lkZW50X2tleTooeDgzNCA6IGJvb2wgb3B0aW9uKSAtPlxuICAgICAgICAgICAgICAgIGZ1biA/dXNlcl92ZXJpZmljYXRpb246KHg4MzUgOiBzdHJpbmcgb3B0aW9uKSAtPlxuICAgICAgICAgICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICAgICAgICAgIGxldCB4ODM2ID0gT2pzLmVtcHR5X29iaiAoKSBpblxuICAgICAgICAgICAgICAgICAgICAobWF0Y2ggeDgzMiB3aXRoXG4gICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDg0MCAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODM2IFwiYXV0aGVudGljYXRvckF0dGFjaG1lbnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKE9qcy5zdHJpbmdfdG9fanMgeDg0MClcbiAgICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODMzIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgIHwgU29tZSB4ODM5IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4MzYgXCJyZXNpZGVudEtleVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLnN0cmluZ190b19qcyB4ODM5KVxuICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgKG1hdGNoIHg4MzQgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg4MzggLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDgzNiBcInJlcXVpcmVSZXNpZGVudEtleVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmJvb2xfdG9fanMgeDgzOClcbiAgICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODM1IHdpdGhcbiAgICAgICAgICAgICAgICAgICAgIHwgU29tZSB4ODM3IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4MzYgXCJ1c2VyVmVyaWZpY2F0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHg4MzcpXG4gICAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdG9yX29wdGlvbnNfb2ZfanMgeDgzNlxuICAgICAgICB0eXBlIHB1YmxpY19rZXlfb3B0aW9ucyA9IE9qcy50XG4gICAgICAgIGxldCByZWMgcHVibGljX2tleV9vcHRpb25zX29mX2pzIDogT2pzLnQgLT4gcHVibGljX2tleV9vcHRpb25zID1cbiAgICAgICAgICBmdW4gKHg4NDIgOiBPanMudCkgLT4geDg0MlxuICAgICAgICBhbmQgcHVibGljX2tleV9vcHRpb25zX3RvX2pzIDogcHVibGljX2tleV9vcHRpb25zIC0+IE9qcy50ID1cbiAgICAgICAgICBmdW4gKHg4NDEgOiBPanMudCkgLT4geDg0MVxuICAgICAgICBsZXQgKHB1YmxpY19rZXlfb3B0aW9ucyA6XG4gICAgICAgICAgP3JwOnJwX29wdGlvbnMgLT5cbiAgICAgICAgICAgID91c2VyOnVzZXJfb3B0aW9ucyAtPlxuICAgICAgICAgICAgICA/Y2hhbGxlbmdlOkFycmF5QnVmZmVyLnQgLT5cbiAgICAgICAgICAgICAgICA/cHViX2tleV9jcmVkX3BhcmFtczprZXlfcGFyYW0gbGlzdCAtPlxuICAgICAgICAgICAgICAgICAgP3RpbWVvdXQ6aW50IC0+XG4gICAgICAgICAgICAgICAgICAgID9leGNsdWRlX2NyZWRlbnRpYWxzOk9qcy50IGxpc3QgLT5cbiAgICAgICAgICAgICAgICAgICAgICA/YXV0aGVudGljYXRvcl9zZWxlY3Rpb246YXV0aGVudGljYXRvcl9vcHRpb25zIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICA/YXR0ZXN0YXRpb246c3RyaW5nIC0+IHVuaXQgLT4gcHVibGljX2tleV9vcHRpb25zKVxuICAgICAgICAgID1cbiAgICAgICAgICBmdW4gP3JwOih4ODQzIDogcnBfb3B0aW9ucyBvcHRpb24pIC0+XG4gICAgICAgICAgICBmdW4gP3VzZXI6KHg4NDQgOiB1c2VyX29wdGlvbnMgb3B0aW9uKSAtPlxuICAgICAgICAgICAgICBmdW4gP2NoYWxsZW5nZTooeDg0NSA6IEFycmF5QnVmZmVyLnQgb3B0aW9uKSAtPlxuICAgICAgICAgICAgICAgIGZ1biA/cHViX2tleV9jcmVkX3BhcmFtczooeDg0NiA6IGtleV9wYXJhbSBsaXN0IG9wdGlvbikgLT5cbiAgICAgICAgICAgICAgICAgIGZ1biA/dGltZW91dDooeDg0NyA6IGludCBvcHRpb24pIC0+XG4gICAgICAgICAgICAgICAgICAgIGZ1biA/ZXhjbHVkZV9jcmVkZW50aWFsczooeDg0OCA6IE9qcy50IGxpc3Qgb3B0aW9uKSAtPlxuICAgICAgICAgICAgICAgICAgICAgIGZ1blxuICAgICAgICAgICAgICAgICAgICAgICAgP2F1dGhlbnRpY2F0b3Jfc2VsZWN0aW9uOih4ODQ5IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0b3Jfb3B0aW9uc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuID9hdHRlc3RhdGlvbjooeDg1MCA6IHN0cmluZyBvcHRpb24pIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZ1biAoKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB4ODUxID0gT2pzLmVtcHR5X29iaiAoKSBpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODQzIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg4NjEgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODUxIFwicnBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocnBfb3B0aW9uc190b19qcyB4ODYxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODQ0IHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg4NjAgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODUxIFwidXNlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1c2VyX29wdGlvbnNfdG9fanMgeDg2MClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWF0Y2ggeDg0NSB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU29tZSB4ODU5IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDg1MSBcImNoYWxsZW5nZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBcnJheUJ1ZmZlci50X3RvX2pzIHg4NTkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hdGNoIHg4NDYgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDg1NyAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4NTEgXCJwdWJLZXlDcmVkUGFyYW1zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE9qcy5saXN0X3RvX2pzIGtleV9wYXJhbV90b19qcyB4ODU3KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODQ3IHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg4NTYgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODUxIFwidGltZW91dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuaW50X3RvX2pzIHg4NTYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG1hdGNoIHg4NDggd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDg1NCAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4NTEgXCJleGNsdWRlQ3JlZGVudGlhbHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLmxpc3RfdG9fanNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1biAoeDg1NSA6IE9qcy50KSAtPiB4ODU1KSB4ODU0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODQ5IHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg4NTMgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODUxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXV0aGVudGljYXRvclNlbGVjdGlvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhdXRoZW50aWNhdG9yX29wdGlvbnNfdG9fanMgeDg1MylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWF0Y2ggeDg1MCB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU29tZSB4ODUyIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDg1MSBcImF0dGVzdGF0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE9qcy5zdHJpbmdfdG9fanMgeDg1MilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWNfa2V5X29wdGlvbnNfb2ZfanMgeDg1MVxuICAgICAgICB0eXBlIGNyZWF0ZV9vcHRpb25zID0gT2pzLnRcbiAgICAgICAgbGV0IHJlYyBjcmVhdGVfb3B0aW9uc19vZl9qcyA6IE9qcy50IC0+IGNyZWF0ZV9vcHRpb25zID1cbiAgICAgICAgICBmdW4gKHg4NjMgOiBPanMudCkgLT4geDg2M1xuICAgICAgICBhbmQgY3JlYXRlX29wdGlvbnNfdG9fanMgOiBjcmVhdGVfb3B0aW9ucyAtPiBPanMudCA9XG4gICAgICAgICAgZnVuICh4ODYyIDogT2pzLnQpIC0+IHg4NjJcbiAgICAgICAgbGV0IChjcmVhdGVfb3B0aW9ucyA6XG4gICAgICAgICAgP3B1YmxpY19rZXk6cHVibGljX2tleV9vcHRpb25zIC0+IHVuaXQgLT4gY3JlYXRlX29wdGlvbnMpID1cbiAgICAgICAgICBmdW4gP3B1YmxpY19rZXk6KHg4NjQgOiBwdWJsaWNfa2V5X29wdGlvbnMgb3B0aW9uKSAtPlxuICAgICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICAgIGxldCB4ODY1ID0gT2pzLmVtcHR5X29iaiAoKSBpblxuICAgICAgICAgICAgICAobWF0Y2ggeDg2NCB3aXRoXG4gICAgICAgICAgICAgICB8IFNvbWUgeDg2NiAtPlxuICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODY1IFwicHVibGljS2V5XCJcbiAgICAgICAgICAgICAgICAgICAgIChwdWJsaWNfa2V5X29wdGlvbnNfdG9fanMgeDg2NilcbiAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgIGNyZWF0ZV9vcHRpb25zX29mX2pzIHg4NjVcbiAgICAgICAgbGV0IChjcmVhdGUgOiBjcmVhdGVfb3B0aW9ucyAtPiBPanMudCBQcm9taXNlLnQpID1cbiAgICAgICAgICBmdW4gKHg4NjcgOiBjcmVhdGVfb3B0aW9ucykgLT5cbiAgICAgICAgICAgIFByb21pc2UudF9vZl9qcyAoZnVuICh4ODY4IDogT2pzLnQpIC0+IHg4NjgpXG4gICAgICAgICAgICAgIChPanMuY2FsbFxuICAgICAgICAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpXG4gICAgICAgICAgICAgICAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgT2pzLmdsb2JhbCBcIm5hdmlnYXRvclwiKSBcImNyZWRlbnRpYWxzXCIpXG4gICAgICAgICAgICAgICAgIFwiY3JlYXRlXCIgW3woY3JlYXRlX29wdGlvbnNfdG9fanMgeDg2Nyl8XSlcbiAgICAgICAgdHlwZSBjcmVkZW50aWFsX2Rlc2NyaXB0b3IgPSBPanMudFxuICAgICAgICBsZXQgcmVjIGNyZWRlbnRpYWxfZGVzY3JpcHRvcl9vZl9qcyA6IE9qcy50IC0+IGNyZWRlbnRpYWxfZGVzY3JpcHRvclxuICAgICAgICAgID0gZnVuICh4ODcwIDogT2pzLnQpIC0+IHg4NzBcbiAgICAgICAgYW5kIGNyZWRlbnRpYWxfZGVzY3JpcHRvcl90b19qcyA6IGNyZWRlbnRpYWxfZGVzY3JpcHRvciAtPiBPanMudCA9XG4gICAgICAgICAgZnVuICh4ODY5IDogT2pzLnQpIC0+IHg4NjlcbiAgICAgICAgbGV0IChjcmVkZW50aWFsX2Rlc2NyaXB0b3IgOlxuICAgICAgICAgID90eXBlXzpzdHJpbmcgLT5cbiAgICAgICAgICAgID9pZDpBcnJheUJ1ZmZlci50IC0+XG4gICAgICAgICAgICAgID90cmFuc3BvcnRzOk9qcy50IC0+IHVuaXQgLT4gY3JlZGVudGlhbF9kZXNjcmlwdG9yKVxuICAgICAgICAgID1cbiAgICAgICAgICBmdW4gP3R5cGVfOih4ODcxIDogc3RyaW5nIG9wdGlvbikgLT5cbiAgICAgICAgICAgIGZ1biA/aWQ6KHg4NzIgOiBBcnJheUJ1ZmZlci50IG9wdGlvbikgLT5cbiAgICAgICAgICAgICAgZnVuID90cmFuc3BvcnRzOih4ODczIDogT2pzLnQgb3B0aW9uKSAtPlxuICAgICAgICAgICAgICAgIGZ1biAoKSAtPlxuICAgICAgICAgICAgICAgICAgbGV0IHg4NzQgPSBPanMuZW1wdHlfb2JqICgpIGluXG4gICAgICAgICAgICAgICAgICAobWF0Y2ggeDg3MSB3aXRoXG4gICAgICAgICAgICAgICAgICAgfCBTb21lIHg4NzcgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4NzQgXCJ0eXBlXCIgKE9qcy5zdHJpbmdfdG9fanMgeDg3NylcbiAgICAgICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICAgICAgKG1hdGNoIHg4NzIgd2l0aFxuICAgICAgICAgICAgICAgICAgIHwgU29tZSB4ODc2IC0+XG4gICAgICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODc0IFwiaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgIChBcnJheUJ1ZmZlci50X3RvX2pzIHg4NzYpXG4gICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODczIHdpdGhcbiAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDg3NSAtPiBPanMuc2V0X3Byb3BfYXNjaWkgeDg3NCBcInRyYW5zcG9ydHNcIiB4ODc1XG4gICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxfZGVzY3JpcHRvcl9vZl9qcyB4ODc0XG4gICAgICAgIHR5cGUgZ2V0X3B1YmxpY19rZXlfb3B0aW9ucyA9IE9qcy50XG4gICAgICAgIGxldCByZWMgZ2V0X3B1YmxpY19rZXlfb3B0aW9uc19vZl9qcyA6XG4gICAgICAgICAgT2pzLnQgLT4gZ2V0X3B1YmxpY19rZXlfb3B0aW9ucyA9IGZ1biAoeDg3OSA6IE9qcy50KSAtPiB4ODc5XG4gICAgICAgIGFuZCBnZXRfcHVibGljX2tleV9vcHRpb25zX3RvX2pzIDogZ2V0X3B1YmxpY19rZXlfb3B0aW9ucyAtPiBPanMudCA9XG4gICAgICAgICAgZnVuICh4ODc4IDogT2pzLnQpIC0+IHg4NzhcbiAgICAgICAgbGV0IChnZXRfcHVibGljX2tleV9vcHRpb25zIDpcbiAgICAgICAgICA/Y2hhbGxlbmdlOkFycmF5QnVmZmVyLnQgLT5cbiAgICAgICAgICAgID90aW1lb3V0OmludCAtPlxuICAgICAgICAgICAgICA/cnBfaWQ6c3RyaW5nIC0+XG4gICAgICAgICAgICAgICAgP2FsbG93X2NyZWRlbnRpYWxzOmNyZWRlbnRpYWxfZGVzY3JpcHRvciBsaXN0IC0+XG4gICAgICAgICAgICAgICAgICA/dXNlcl92ZXJpZmljYXRpb246c3RyaW5nIC0+XG4gICAgICAgICAgICAgICAgICAgID9leHRlbnNpb25zOk9qcy50IC0+IHVuaXQgLT4gZ2V0X3B1YmxpY19rZXlfb3B0aW9ucylcbiAgICAgICAgICA9XG4gICAgICAgICAgZnVuID9jaGFsbGVuZ2U6KHg4ODAgOiBBcnJheUJ1ZmZlci50IG9wdGlvbikgLT5cbiAgICAgICAgICAgIGZ1biA/dGltZW91dDooeDg4MSA6IGludCBvcHRpb24pIC0+XG4gICAgICAgICAgICAgIGZ1biA/cnBfaWQ6KHg4ODIgOiBzdHJpbmcgb3B0aW9uKSAtPlxuICAgICAgICAgICAgICAgIGZ1blxuICAgICAgICAgICAgICAgICAgP2FsbG93X2NyZWRlbnRpYWxzOih4ODgzIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxfZGVzY3JpcHRvciBsaXN0IG9wdGlvbilcbiAgICAgICAgICAgICAgICAgIC0+XG4gICAgICAgICAgICAgICAgICBmdW4gP3VzZXJfdmVyaWZpY2F0aW9uOih4ODg0IDogc3RyaW5nIG9wdGlvbikgLT5cbiAgICAgICAgICAgICAgICAgICAgZnVuID9leHRlbnNpb25zOih4ODg1IDogT2pzLnQgb3B0aW9uKSAtPlxuICAgICAgICAgICAgICAgICAgICAgIGZ1biAoKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHg4ODYgPSBPanMuZW1wdHlfb2JqICgpIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAobWF0Y2ggeDg4MCB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg4OTMgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4ODYgXCJjaGFsbGVuZ2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBcnJheUJ1ZmZlci50X3RvX2pzIHg4OTMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODgxIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDg5MiAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDg4NiBcInRpbWVvdXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuaW50X3RvX2pzIHg4OTIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODgyIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDg5MSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDg4NiBcInJwSWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMuc3RyaW5nX3RvX2pzIHg4OTEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgfCBOb25lIC0+ICgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIChtYXRjaCB4ODgzIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICB8IFNvbWUgeDg4OSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgeDg4NiBcImFsbG93Q3JlZGVudGlhbHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChPanMubGlzdF90b19qcyBjcmVkZW50aWFsX2Rlc2NyaXB0b3JfdG9fanNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ODg5KVxuICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAobWF0Y2ggeDg4NCB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg4ODggLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4ODYgXCJ1c2VyVmVyaWZpY2F0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoT2pzLnN0cmluZ190b19qcyB4ODg4KVxuICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAobWF0Y2ggeDg4NSB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgfCBTb21lIHg4ODcgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2pzLnNldF9wcm9wX2FzY2lpIHg4ODYgXCJleHRlbnNpb25zXCIgeDg4N1xuICAgICAgICAgICAgICAgICAgICAgICAgIHwgTm9uZSAtPiAoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRfcHVibGljX2tleV9vcHRpb25zX29mX2pzIHg4ODZcbiAgICAgICAgdHlwZSBnZXRfb3B0aW9ucyA9IE9qcy50XG4gICAgICAgIGxldCByZWMgZ2V0X29wdGlvbnNfb2ZfanMgOiBPanMudCAtPiBnZXRfb3B0aW9ucyA9XG4gICAgICAgICAgZnVuICh4ODk1IDogT2pzLnQpIC0+IHg4OTVcbiAgICAgICAgYW5kIGdldF9vcHRpb25zX3RvX2pzIDogZ2V0X29wdGlvbnMgLT4gT2pzLnQgPVxuICAgICAgICAgIGZ1biAoeDg5NCA6IE9qcy50KSAtPiB4ODk0XG4gICAgICAgIGxldCAoZ2V0X29wdGlvbnMgOlxuICAgICAgICAgID9wdWJsaWNfa2V5OmdldF9wdWJsaWNfa2V5X29wdGlvbnMgLT4gdW5pdCAtPiBnZXRfb3B0aW9ucykgPVxuICAgICAgICAgIGZ1biA/cHVibGljX2tleTooeDg5NiA6IGdldF9wdWJsaWNfa2V5X29wdGlvbnMgb3B0aW9uKSAtPlxuICAgICAgICAgICAgZnVuICgpIC0+XG4gICAgICAgICAgICAgIGxldCB4ODk3ID0gT2pzLmVtcHR5X29iaiAoKSBpblxuICAgICAgICAgICAgICAobWF0Y2ggeDg5NiB3aXRoXG4gICAgICAgICAgICAgICB8IFNvbWUgeDg5OCAtPlxuICAgICAgICAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSB4ODk3IFwicHVibGljS2V5XCJcbiAgICAgICAgICAgICAgICAgICAgIChnZXRfcHVibGljX2tleV9vcHRpb25zX3RvX2pzIHg4OTgpXG4gICAgICAgICAgICAgICB8IE5vbmUgLT4gKCkpO1xuICAgICAgICAgICAgICBnZXRfb3B0aW9uc19vZl9qcyB4ODk3XG4gICAgICAgIGxldCAoZ2V0IDogZ2V0X29wdGlvbnMgLT4gT2pzLnQgUHJvbWlzZS50KSA9XG4gICAgICAgICAgZnVuICh4ODk5IDogZ2V0X29wdGlvbnMpIC0+XG4gICAgICAgICAgICBQcm9taXNlLnRfb2ZfanMgKGZ1biAoeDkwMCA6IE9qcy50KSAtPiB4OTAwKVxuICAgICAgICAgICAgICAoT2pzLmNhbGxcbiAgICAgICAgICAgICAgICAgKE9qcy5nZXRfcHJvcF9hc2NpaVxuICAgICAgICAgICAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpIE9qcy5nbG9iYWwgXCJuYXZpZ2F0b3JcIikgXCJjcmVkZW50aWFsc1wiKVxuICAgICAgICAgICAgICAgICBcImdldFwiIFt8KGdldF9vcHRpb25zX3RvX2pzIHg4OTkpfF0pXG4gICAgICBlbmRcbiAgZW5kXG4iLCIoKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgb2NhbWwtdmRvbSBwYWNrYWdlLCByZWxlYXNlZCB1bmRlciB0aGUgdGVybXMgb2YgYW4gTUlULWxpa2UgbGljZW5zZS4gICAgICopXG4oKiBTZWUgdGhlIGF0dGFjaGVkIExJQ0VOU0UgZmlsZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG4oKiBDb3B5cmlnaHQgKEMpIDIwMDAtMjAyMyBMZXhpRmkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICopXG5cblxub3BlbiBKc19icm93c2VyXG5vcGVuIFZkb21cblxubGV0IGRlYnVnID0gZmFsc2VcblxudHlwZSBWZG9tLmpzX29iamVjdCArPSBPanMgb2YgT2pzLnRcblxubW9kdWxlIEJEZWNvZGVyID0gc3RydWN0XG5cbiAgdHlwZSBzdGVwID1cbiAgICB8IE50aCBvZiBpbnRcbiAgICB8IEtleSBvZiBzdHJpbmdcblxuICB0eXBlIHR5cCA9XG4gICAgfCBUeUxpc3RcbiAgICB8IFR5U3RyaW5nXG4gICAgfCBUeUJvb2xcbiAgICB8IFR5SW50XG4gICAgfCBUeUZsb2F0XG5cbiAgdHlwZSBwYXRoID0gc3RlcCBsaXN0XG5cbiAgdHlwZSBlcnJvcl9raW5kID1cbiAgICB8IEtleV91bmJvdW5kIG9mIHN0cmluZ1xuICAgIHwgTWV0aG9kX3VuYm91bmQgb2Ygc3RyaW5nXG4gICAgfCBNc2cgb2Ygc3RyaW5nXG4gICAgfCBUeXBlX2Vycm9yIG9mIHR5cCAqIHN0cmluZ1xuXG4gIHR5cGUgZXJyb3IgPVxuICAgIHBhdGggKiBlcnJvcl9raW5kXG5cbiAgbGV0IHN0cmluZ19vZl90eXAgPSBmdW5jdGlvblxuICAgIHwgVHlMaXN0IC0+IFwibGlzdFwiXG4gICAgfCBUeVN0cmluZyAtPiBcInN0cmluZ1wiXG4gICAgfCBUeUJvb2wgLT4gXCJib29sZWFuXCJcbiAgICB8IFR5SW50IC0+IFwiaW50XCJcbiAgICB8IFR5RmxvYXQgLT4gXCJmbG9hdFwiXG5cbiAgbGV0IHN0cmluZ19vZl9zdGVwID0gZnVuY3Rpb25cbiAgICB8IE50aCBuIC0+IHN0cmluZ19vZl9pbnQgblxuICAgIHwgS2V5IHMgLT4gc1xuXG4gIGxldCBzdHJpbmdfb2ZfcGF0aCBwYXRoID1cbiAgICBTdHJpbmcuY29uY2F0IFwiLlwiIChMaXN0LnJldl9tYXAgc3RyaW5nX29mX3N0ZXAgcGF0aClcblxuICBsZXQgc3RyaW5nX29mX2Vycm9yX2tpbmQgPSBmdW5jdGlvblxuICAgIHwgS2V5X3VuYm91bmQgcyAtPiBQcmludGYuc3ByaW50ZiBcInVuYm91bmQgZmllbGQ6ICVTXCIgc1xuICAgIHwgTWV0aG9kX3VuYm91bmQgcyAtPiBQcmludGYuc3ByaW50ZiBcInVuYm91bmQgbWV0aG9kIChvciB3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzKTogJVNcIiBzXG4gICAgfCBNc2cgcyAtPiBzXG4gICAgfCBUeXBlX2Vycm9yIChleHBlY3RlZCwgZ290KSAtPiBQcmludGYuc3ByaW50ZiBcImNhbm5vdCBjb252ZXJ0ICVzIHRvICVzXCIgZ290IChzdHJpbmdfb2ZfdHlwIGV4cGVjdGVkKVxuXG4gIGxldCBzdHJpbmdfb2ZfZXJyb3IgPSBmdW5jdGlvblxuICAgIHwgW10sIGVycmsgLT5cbiAgICAgICAgc3RyaW5nX29mX2Vycm9yX2tpbmQgZXJya1xuICAgIHwgKF8gOjogXyBhcyBwYXRoKSwgZXJyayAtPlxuICAgICAgICBcIkF0IHBhdGggW1wiIF4gc3RyaW5nX29mX3BhdGggcGF0aCBeIFwiXTogXCIgXiBzdHJpbmdfb2ZfZXJyb3Jfa2luZCBlcnJrXG5cbiAgdHlwZSBvID0geyBwYXRoOiBwYXRoOyBvYmo6IE9qcy50IH1cblxuICB0eXBlICdhIHQgPSBvIC0+ICgnYSwgZXJyb3IpIHJlc3VsdFxuXG5cbiAgbGV0IGZpZWxkIGtleSBkIG8gPVxuICAgIGxldCByZWMgYXV4IG8gPSBmdW5jdGlvblxuICAgICAgfCBbXSAtPiBPayBvXG4gICAgICB8IGtleSA6OiBrZXlzIC0+XG4gICAgICAgICAgbGV0IG9iaiA9IE9qcy5nZXRfcHJvcF9hc2NpaSBvLm9iaiBrZXkgaW5cbiAgICAgICAgICBpZiBvYmogPSBPanMudW5pdF90b19qcyAoKSB0aGVuXG4gICAgICAgICAgICBFcnJvciAoby5wYXRoLCBLZXlfdW5ib3VuZCBrZXkpXG4gICAgICAgICAgZWxzZSBhdXgge3BhdGggPSAoS2V5IGtleSA6OiBvLnBhdGgpOyBvYmp9IGtleXNcbiAgICBpblxuICAgIGxldCBrZXlzID0gU3RyaW5nLnNwbGl0X29uX2NoYXIgJy4nIGtleSBpblxuICAgIFJlc3VsdC5iaW5kIChhdXggbyBrZXlzKSBkXG5cbiAgbGV0IG1ldGhvZF8gbmFtZSBhcmcgZCBvID1cbiAgICBsZXQgYXJnID1cbiAgICAgIExpc3QubWFwIChmdW5jdGlvblxuICAgICAgICAgIHwgRGVjb2Rlci5TdHJpbmdBcmcgcyAtPiBPanMuc3RyaW5nX3RvX2pzIHNcbiAgICAgICAgICB8IEJvb2xBcmcgYiAtPiBPanMuYm9vbF90b19qcyBiXG4gICAgICAgICAgfCBGbG9hdEFyZyBmIC0+IE9qcy5mbG9hdF90b19qcyBmXG4gICAgICAgICAgfCBJbnRBcmcgaSAtPiBPanMuaW50X3RvX2pzIGlcbiAgICAgICAgKSBhcmdcbiAgICBpblxuICAgIGxldCBhcmcgPSBBcnJheS5vZl9saXN0IGFyZyBpblxuICAgIHRyeVxuICAgICAgbGV0IG9iaiA9IE9qcy5jYWxsIG8ub2JqIG5hbWUgYXJnIGluXG4gICAgICBkIHtwYXRoID0gKEtleSBuYW1lIDo6IG8ucGF0aCk7IG9ian1cbiAgICB3aXRoXG4gICAgICBPanNfZXhuLkVycm9yIF8gLT4gRXJyb3IgKG8ucGF0aCwgTWV0aG9kX3VuYm91bmQgbmFtZSlcblxuXG4gIGxldCBiaW5kIChmIDogJ2EgLT4gJ2IgdCkgKGQgOiAnYSB0KSBvID1cbiAgICBtYXRjaCBkIG8gd2l0aFxuICAgIHwgT2sgeCAtPiBmIHggb1xuICAgIHwgRXJyb3IgZXJyIC0+IEVycm9yIGVyclxuXG4gIGxldCBjb25zdCBtc2cgX28gPSBPayBtc2dcblxuICBsZXQgZmFpbCBtc2cge3BhdGg7IF99ID1cbiAgICBFcnJvciAocGF0aCwgTXNnIG1zZylcblxuICBsZXQgdHJ5XyBkIG8gPVxuICAgIG1hdGNoIGQgbyB3aXRoXG4gICAgfCBPayB4IC0+IE9rIChTb21lIHgpXG4gICAgfCBFcnJvciBfIC0+IE9rIE5vbmVcblxuICBsZXQgZmFjdG9yIChmIDogKCdhIC0+ICdiIHQpKSBvID1cbiAgICBPayAoZnVuIHggLT4gUmVzdWx0Lm1hcF9lcnJvciBzdHJpbmdfb2ZfZXJyb3IgKGYgeCBvKSlcblxuICBsZXQgdHlwZXJyIHR5IHBhdGggZ290ID1cbiAgICBFcnJvciAocGF0aCwgVHlwZV9lcnJvciAodHksIGdvdCkpXG5cbiAgbGV0IHN0cmluZyB7cGF0aDsgb2JqfSA9XG4gICAgbWF0Y2ggT2pzLnR5cGVfb2Ygb2JqIHdpdGhcbiAgICB8IFwic3RyaW5nXCIgLT4gT2sgKE9qcy5zdHJpbmdfb2ZfanMgb2JqKVxuICAgIHwgdHkgLT4gdHlwZXJyIFR5U3RyaW5nIHBhdGggdHlcblxuICBsZXQgaW50IHtwYXRoOyBvYmp9ID1cbiAgICBtYXRjaCBPanMudHlwZV9vZiBvYmogd2l0aFxuICAgIHwgXCJudW1iZXJcIiAtPiBPayAoT2pzLmludF9vZl9qcyBvYmopXG4gICAgfCB0eSAtPiB0eXBlcnIgVHlJbnQgcGF0aCB0eVxuXG4gIGxldCBmbG9hdCB7cGF0aDsgb2JqfSA9XG4gICAgbWF0Y2ggT2pzLnR5cGVfb2Ygb2JqIHdpdGhcbiAgICB8IFwibnVtYmVyXCIgLT4gT2sgKE9qcy5mbG9hdF9vZl9qcyBvYmopXG4gICAgfCB0eSAtPiB0eXBlcnIgVHlGbG9hdCBwYXRoIHR5XG5cbiAgbGV0IGJvb2wge3BhdGg7IG9ian0gPVxuICAgIG1hdGNoIE9qcy50eXBlX29mIG9iaiB3aXRoXG4gICAgfCBcImJvb2xlYW5cIiAtPiBPayAoT2pzLmJvb2xfb2ZfanMgb2JqKVxuICAgIHwgdHkgLT4gdHlwZXJyIFR5Qm9vbCBwYXRoIHR5XG5cbiAgbGV0IG9iamVjdF8ge3BhdGg9Xzsgb2JqfSA9IE9rIChPanMgb2JqKVxuXG4gIGxldCBtYXBpX2xpc3RfcmVzdWx0IGYgbCA9XG4gICAgbGV0IHJlYyBsb29wIGkgYWNjID0gZnVuY3Rpb25cbiAgICAgIHwgW10gLT4gT2sgKExpc3QucmV2IGFjYylcbiAgICAgIHwgeCA6OiB4cyAtPiBSZXN1bHQuYmluZCAoZiBpIHgpIChmdW4geCAtPiBsb29wIChpICsgMSkgKHggOjogYWNjKSB4cylcbiAgICBpblxuICAgIGxvb3AgMCBbXSBsXG5cbiAgbGV0IGxpc3QgZCBvID1cbiAgICBtYXRjaCBPanMudHlwZV9vZiBvLm9iaiB3aXRoXG4gICAgfCBcIm9iamVjdFwiIC0+XG4gICAgICAgIG1hcGlfbGlzdF9yZXN1bHRcbiAgICAgICAgICAoZnVuIGkgb2JqIC0+IGQge3BhdGggPSBOdGggaSA6OiBvLnBhdGg7IG9ian0pXG4gICAgICAgICAgKE9qcy5saXN0X29mX2pzIEZ1bi5pZCBvLm9iailcbiAgICB8IHR5IC0+IHR5cGVyciBUeUxpc3Qgby5wYXRoIHR5XG5cbiAgbGV0IHJ1biBkIG9iaiA9XG4gICAgbWF0Y2ggZCB7cGF0aCA9IFtdOyBvYmp9IHdpdGhcbiAgICB8IE9rIHggLT4gT2sgeFxuICAgIHwgRXJyb3IgZXJyIC0+IEVycm9yIChzdHJpbmdfb2ZfZXJyb3IgZXJyKVxuXG4gIGxldCByZWMgZXZhbCA6IHR5cGUgYS4gP2V4dHJhX2ZpZWxkczooc3RyaW5nICogT2pzLnQpIGxpc3QgLT4gYSBEZWNvZGVyLnQgLT4gYSB0ID0gZnVuID8oZXh0cmFfZmllbGRzID0gW10pIC0+IGZ1bmN0aW9uXG4gICAgfCBGaWVsZCAoa2V5LCBkKSAtPlxuICAgICAgICBiZWdpbiBtYXRjaCBMaXN0LmFzc29jX29wdCBrZXkgZXh0cmFfZmllbGRzIHdpdGhcbiAgICAgICAgfCBTb21lIG9iaiAtPlxuICAgICAgICAgICAgZnVuIG8gLT4gKChldmFsIGQpIHtwYXRoID0gKEtleSBrZXkgOjogby5wYXRoKTsgb2JqfSlcbiAgICAgICAgfCBOb25lIC0+XG4gICAgICAgICAgICBmaWVsZCBrZXkgKGV2YWwgZClcbiAgICAgICAgZW5kXG4gICAgfCBNZXRob2QgKG5hbWUsIGFyZywgZCkgLT4gbWV0aG9kXyBuYW1lIGFyZyAoZXZhbCBkKVxuICAgIHwgQmluZCAoZiwgZCkgLT4gYmluZCAoZnVuIGEgLT4gZXZhbCB+ZXh0cmFfZmllbGRzIChmIGEpKSAoZXZhbCB+ZXh0cmFfZmllbGRzIGQpXG4gICAgfCBGYWN0b3IgZiAtPiBmYWN0b3IgKGZ1biBhIC0+IGV2YWwgfmV4dHJhX2ZpZWxkcyAoZiBhKSlcbiAgICB8IENvbnN0IG1zZyAtPiBjb25zdCBtc2dcbiAgICB8IFN0cmluZyAtPiBzdHJpbmdcbiAgICB8IEludCAtPiBpbnRcbiAgICB8IEZsb2F0IC0+IGZsb2F0XG4gICAgfCBCb29sIC0+IGJvb2xcbiAgICB8IE9iamVjdCAtPiBvYmplY3RfXG4gICAgfCBMaXN0IGQgLT4gbGlzdCAoZXZhbCBkKVxuICAgIHwgRmFpbCBtc2cgLT4gZmFpbCBtc2dcbiAgICB8IFRyeSBkIC0+IHRyeV8gKGV2YWwgfmV4dHJhX2ZpZWxkcyBkKVxuXG4gIGxldCBkZWNvZGUgPyhleHRyYV9maWVsZHMgPSBbXSkgZCA9IHJ1biAoZXZhbCB+ZXh0cmFfZmllbGRzIGQpXG5cbiAgbGV0IGRlY29kZV9mYWlsID8oZXh0cmFfZmllbGRzID0gW10pIGQgbyA9XG4gICAgbWF0Y2ggZGVjb2RlIH5leHRyYV9maWVsZHMgZCBvIHdpdGhcbiAgICB8IE9rIHJlcyAtPiByZXNcbiAgICB8IEVycm9yIGVyciAtPiBmYWlsd2l0aCBlcnJcbmVuZFxuXG5tb2R1bGUgRW5jb2RlciA9IHN0cnVjdFxuXG4gIHR5cGUgYXJnX3ZhbHVlID1cbiAgICB8IFN0cmluZ0FyZyBvZiBzdHJpbmdcbiAgICB8IEJvb2xBcmcgb2YgYm9vbFxuICAgIHwgRmxvYXRBcmcgb2YgZmxvYXRcblxuICB0eXBlIHQgPVxuICAgIHwgVW5pdFxuICAgIHwgU3RyaW5nIG9mIHN0cmluZ1xuICAgIHwgSW50IG9mIGludFxuICAgIHwgRmxvYXQgb2YgZmxvYXRcbiAgICB8IEJvb2wgb2YgYm9vbFxuICAgIHwgTGlzdCBvZiB0IGxpc3RcbiAgICB8IE9iaiBvZiAoc3RyaW5nICogdCkgbGlzdFxuICAgIHwgRnVuIG9mIChhcmdfdmFsdWUgbGlzdCAtPiB0KVxuXG4gIGxldCBjb252ZXJ0X2FyZyBvID1cbiAgICBtYXRjaCBPanMudHlwZV9vZiBvIHdpdGhcbiAgICB8IFwic3RyaW5nXCIgLT4gU3RyaW5nQXJnIChPanMuc3RyaW5nX29mX2pzIG8pXG4gICAgfCBcImJvb2xlYW5cIiAtPiBCb29sQXJnIChPanMuYm9vbF9vZl9qcyBvKVxuICAgIHwgXCJudW1iZXJcIiAtPiBGbG9hdEFyZyAoT2pzLmZsb2F0X29mX2pzIG8pXG4gICAgfCB0eSAtPiBmYWlsd2l0aCAoXCJFbmNvZGVkIGZ1bmN0aW9uIHJlY2VpdmVkIGFuIGFyZ3VtZW50IHdpdGggdW5zdXBwb3J0ZWQgdHlwZTogXCIgXiB0eSlcblxuICBsZXQgcmVjIGVuY29kZSA9IGZ1bmN0aW9uXG4gICAgfCBVbml0IC0+IE9qcy51bml0X3RvX2pzICgpXG4gICAgfCBTdHJpbmcgcyAtPiBPanMuc3RyaW5nX3RvX2pzIHNcbiAgICB8IEludCBpIC0+IE9qcy5pbnRfdG9fanMgaVxuICAgIHwgRmxvYXQgZiAtPiBPanMuZmxvYXRfdG9fanMgZlxuICAgIHwgQm9vbCBiIC0+IE9qcy5ib29sX3RvX2pzIGJcbiAgICB8IExpc3QgbCAtPiBPanMubGlzdF90b19qcyBlbmNvZGUgbFxuICAgIHwgT2JqIGwgLT4gT2pzLm9iaiAoQXJyYXkub2ZfbGlzdCAoTGlzdC5tYXAgKGZ1biAocywgZSkgLT4gKHMsIGVuY29kZSBlKSkgbCkpXG4gICAgfCBGdW4gZiAtPiBPanMuZnVuX3RvX2pzX2FyZ3MgKGZ1biBvIC0+IGVuY29kZSAoZiAoT2pzLmxpc3Rfb2ZfanMgY29udmVydF9hcmcgbykpKVxuXG5lbmRcblxuXG5tb2R1bGUgQ21kID0gc3RydWN0XG4gIHR5cGUgJ21zZyBjdHggPVxuICAgIHtcbiAgICAgIGNvbnRhaW5lcjogSnNfYnJvd3Nlci5FbGVtZW50LnQ7XG4gICAgICBzZW5kX21zZzogKCdtc2cgLT4gdW5pdCk7XG4gICAgICBhZnRlcl9yZWRyYXc6ICh1bml0IC0+IHVuaXQpIC0+IHVuaXQ7XG4gICAgfVxuXG4gIGxldCBjb250YWluZXIgY3R4ID0gY3R4LmNvbnRhaW5lclxuXG4gIGxldCBzZW5kX21zZyBjdHggPSBjdHguc2VuZF9tc2dcblxuICBsZXQgYWZ0ZXJfcmVkcmF3IGN0eCA9IGN0eC5hZnRlcl9yZWRyYXdcblxuICB0eXBlIGhhbmRsZXIgPSB7ZjogJ21zZy4gJ21zZyBjdHggLT4gJ21zZyBWZG9tLkNtZC50IC0+IGJvb2x9XG5cbiAgbGV0IHJlYyBydW46IHR5cGUgdC4gKCh1bml0IC0+IHVuaXQpIC0+IHVuaXQpIC0+IGhhbmRsZXIgbGlzdCAtPiAodCAtPiB1bml0KSAtPiBKc19icm93c2VyLkVsZW1lbnQudCAtPiB0IENtZC50IC0+IHVuaXQgPVxuICAgIGZ1biBhZnRlciBoIHAgZWx0IC0+IGZ1bmN0aW9uXG4gICAgICB8IENtZC5FY2hvIG1zZyAtPiBwIG1zZ1xuICAgICAgfCBDbWQuQmF0Y2ggbCAtPiBMaXN0Lml0ZXIgKHJ1biBhZnRlciBoIHAgZWx0KSBsXG4gICAgICB8IENtZC5NYXAgKGYsIGNtZCkgLT4gcnVuIGFmdGVyIGggKGZ1biB4IC0+IHAgKGYgeCkpIGVsdCBjbWRcbiAgICAgIHwgQ21kLkJpbmQgKGNtZCwgZikgLT4gcnVuIGFmdGVyIGggKGZ1biB4IC0+IHJ1biBhZnRlciBoIHAgZWx0IChmIHgpKSBlbHQgY21kXG4gICAgICB8IHggLT5cbiAgICAgICAgICBsZXQgY3R4ID0ge3NlbmRfbXNnID0gcDsgY29udGFpbmVyID0gZWx0OyBhZnRlcl9yZWRyYXcgPSBhZnRlcn0gaW5cbiAgICAgICAgICBsZXQgcmVjIGxvb3AgPSBmdW5jdGlvblxuICAgICAgICAgICAgfCBbXSAtPiBQcmludGYua3NwcmludGYgZmFpbHdpdGggXCJObyBjb21tYW5kIGhhbmRsZXIgZm91bmQhICglcylcIiAoT2JqLkV4dGVuc2lvbl9jb25zdHJ1Y3Rvci5uYW1lIChPYmouRXh0ZW5zaW9uX2NvbnN0cnVjdG9yLm9mX3ZhbCB4KSlcbiAgICAgICAgICAgIHwgaGQgOjogdGwgLT5cbiAgICAgICAgICAgICAgICBpZiBoZC5mIGN0eCB4IHRoZW4gKClcbiAgICAgICAgICAgICAgICBlbHNlIGxvb3AgdGxcbiAgICAgICAgICBpblxuICAgICAgICAgIGxvb3AgaFxuZW5kXG5cbm1vZHVsZSBDdXN0b20gPSBzdHJ1Y3RcbiAgdHlwZSB0ID1cbiAgICB7XG4gICAgICBkb206IEpzX2Jyb3dzZXIuRWxlbWVudC50O1xuICAgICAgc3luYzogKFZkb20uQ3VzdG9tLnQgLT4gYm9vbCk7XG4gICAgICBkaXNwb3NlOiAodW5pdCAtPiB1bml0KTtcbiAgICB9XG5cbiAgdHlwZSBldmVudCA9XG4gICAgfCBDdXN0b20gb2YgQ3VzdG9tLmV2ZW50XG4gICAgfCBFbmNvZGVkIG9mIHsgZXZlbnRfdHlwZTogc3RyaW5nOyBlbmNvZGVyOiBFbmNvZGVyLnQgfVxuXG4gIGxldCBibHVyX2V2ZW50ID0gRW5jb2RlZCB7ZXZlbnRfdHlwZSA9IFwiYmx1clwiOyBlbmNvZGVyID0gT2JqIFtdfVxuICBsZXQgaW5wdXRfZXZlbnQgcyA9IEVuY29kZWQge2V2ZW50X3R5cGUgPSBcImlucHV0XCI7IGVuY29kZXIgPSBPYmogW1widGFyZ2V0XCIsIE9iaiBbXCJ2YWx1ZVwiLCBTdHJpbmcgc11dfVxuICBsZXQgY2hlY2tlZF9ldmVudCBiID0gRW5jb2RlZCB7ZXZlbnRfdHlwZSA9IFwiY2xpY2tcIjsgZW5jb2RlciA9IE9iaiBbXCJ0YXJnZXRcIiwgT2JqIFtcImNoZWNrZWRcIiwgQm9vbCBiXV19XG4gIGxldCBjaGFuZ2VfZXZlbnQgcyA9IEVuY29kZWQge2V2ZW50X3R5cGUgPSBcImNoYW5nZVwiOyBlbmNvZGVyID0gT2JqIFtcInRhcmdldFwiLCBPYmogW1widmFsdWVcIiwgU3RyaW5nIHNdXX1cbiAgbGV0IGNoYW5nZV9pbmRleF9ldmVudCBpID0gRW5jb2RlZCB7ZXZlbnRfdHlwZSA9IFwiY2hhbmdlXCI7IGVuY29kZXIgPSBPYmogW1widGFyZ2V0XCIsIE9iaiBbXCJzZWxlY3RlZEluZGV4XCIsIEludCBpXV19XG4gIGxldCBjdXN0b21fZXZlbnQgZSA9IEN1c3RvbSBlXG5cbiAgdHlwZSBjdHggPVxuICAgIHtcbiAgICAgIHBhcmVudDogSnNfYnJvd3Nlci5FbGVtZW50LnQ7XG4gICAgICBzZW5kX2V2ZW50OiAoZXZlbnQgLT4gdW5pdCk7XG4gICAgICBhZnRlcl9yZWRyYXc6ICgodW5pdCAtPiB1bml0KSAtPiB1bml0KTtcbiAgICB9XG5cbiAgdHlwZSBoYW5kbGVyID0gY3R4IC0+IFZkb20uQ3VzdG9tLnQgLT4gdCBvcHRpb25cblxuICBsZXQgbWFrZSA/KGRpc3Bvc2UgPSBpZ25vcmUpIH5zeW5jIGRvbSA9XG4gICAge2RvbTsgc3luYzsgZGlzcG9zZX1cblxuICBsZXQgcGFyZW50IGN0eCA9IGN0eC5wYXJlbnRcblxuICBsZXQgc2VuZF9ldmVudCBjdHggPSBjdHguc2VuZF9ldmVudFxuXG4gIGxldCBhZnRlcl9yZWRyYXcgY3R4ID0gY3R4LmFmdGVyX3JlZHJhd1xuXG4gIGxldCByZWMgZmluZF9oYW5kbGVyIGN0eCB4ID0gZnVuY3Rpb25cbiAgICB8IFtdIC0+IGZhaWx3aXRoIFwiVmRvbV9ibGl0OiBubyBjdXN0b20gZWxlbWVudCBoYW5kbGVyIGZvdW5kXCJcbiAgICB8IGhkIDo6IHRsIC0+XG4gICAgICAgIGJlZ2luIG1hdGNoIGhkIGN0eCB4IHdpdGhcbiAgICAgICAgfCBTb21lIGYgLT4gZlxuICAgICAgICB8IE5vbmUgLT4gZmluZF9oYW5kbGVyIGN0eCB4IHRsXG4gICAgICAgIGVuZFxuXG4gIGxldCBsb29rdXAgfnBhcmVudCB+cHJvY2Vzc19jdXN0b20gfmFmdGVyX3JlZHJhdyBlbHQgaGFuZGxlcnMgPVxuICAgIGxldCByZWMgZG9tID0gbGF6eSAoKExhenkuZm9yY2UgZWwpLmRvbSlcbiAgICBhbmQgc2VuZF9ldmVudCBlID0gcHJvY2Vzc19jdXN0b20gKExhenkuZm9yY2UgZG9tKSBlXG4gICAgYW5kIGVsID0gbGF6eSAoZmluZF9oYW5kbGVyIHtwYXJlbnQ7IHNlbmRfZXZlbnQ7IGFmdGVyX3JlZHJhd30gZWx0IGhhbmRsZXJzKSBpblxuICAgIExhenkuZm9yY2UgZWxcbmVuZFxuXG5cbigqIFJlbmRlcmluZyAoVkRPTSAtPiBET00pICopXG5cbnR5cGUgJ21zZyBjdHJsID1cbiAgfCBCVGV4dCBvZiB7dmRvbTogJ21zZyB2ZG9tOyBkb206IEVsZW1lbnQudH1cbiAgfCBCRnJhZ21lbnQgb2Yge3Zkb206ICdtc2cgdmRvbTsgZG9tczogRWxlbWVudC50IGxpc3Q7IGNoaWxkcmVuOiAnbXNnIGN0cmwgbGlzdH1cbiAgfCBCRWxlbWVudCBvZiB7dmRvbTogJ21zZyB2ZG9tOyBkb206IEVsZW1lbnQudDsgY2hpbGRyZW46ICdtc2cgY3RybCBsaXN0fVxuICB8IEJNYXA6IHt2ZG9tOiAnbXNnIHZkb207IGRvbXM6IEVsZW1lbnQudCBsaXN0OyBmOiAoJ3N1Ym1zZyAtPiAnbXNnKTsgY2hpbGQ6ICdzdWJtc2cgY3RybH0gLT4gJ21zZyBjdHJsXG4gIHwgQk1lbW86IHt2ZG9tOiAnbXNnIHZkb207IGRvbXM6IEVsZW1lbnQudCBsaXN0OyBjaGlsZDogJ21zZyBjdHJsfSAtPiAnbXNnIGN0cmxcbiAgfCBCQ3VzdG9tIG9mIHt2ZG9tOiAnbXNnIHZkb207IGVsdDogQ3VzdG9tLnQ7IG5zOiBzdHJpbmc7IHByb3BhZ2F0ZV9ldmVudHM6IGJvb2x9XG5cbmxldCBnZXRfZG9tcyA9IGZ1bmN0aW9uXG4gIHwgQlRleHQgeCAtPiBbeC5kb21dXG4gIHwgQkZyYWdtZW50IHggLT4geC5kb21zXG4gIHwgQkVsZW1lbnQgeCAtPiBbeC5kb21dXG4gIHwgQk1hcCB4IC0+IHguZG9tc1xuICB8IEJNZW1vIHggLT4geC5kb21zXG4gIHwgQkN1c3RvbSB4IC0+IFt4LmVsdC5kb21dXG5cbmxldCBnZXRfdmRvbSA9IGZ1bmN0aW9uXG4gIHwgQlRleHQgeCAtPiB4LnZkb21cbiAgfCBCRnJhZ21lbnQgeCAtPiB4LnZkb21cbiAgfCBCRWxlbWVudCB4IC0+IHgudmRvbVxuICB8IEJNYXAgeCAtPiB4LnZkb21cbiAgfCBCTWVtbyB4IC0+IHgudmRvbVxuICB8IEJDdXN0b20geCAtPiB4LnZkb21cblxubGV0IGtleV9vZl92ZG9tID0gZnVuY3Rpb25cbiAgfCBUZXh0IHtrZXk7IF99XG4gIHwgRnJhZ21lbnQge2tleTsgX31cbiAgfCBFbGVtZW50IHtrZXk7IF99XG4gIHwgTWFwIHtrZXk7IF99XG4gIHwgTWVtbyB7a2V5OyBffVxuICB8IEN1c3RvbSB7a2V5OyBffSAtPlxuICAgICAga2V5XG5cblxubGV0IGV2YWxfcHJvcCA9IGZ1bmN0aW9uXG4gIHwgU3RyaW5nIHggLT4gT2pzLnN0cmluZ190b19qcyB4XG4gIHwgSW50IHggLT4gT2pzLmludF90b19qcyB4XG4gIHwgQm9vbCB4IC0+IE9qcy5ib29sX3RvX2pzIHhcbiAgfCBGbG9hdCB4IC0+IE9qcy5mbG9hdF90b19qcyB4XG5cbmxldCBzdHJpbmdfb2ZfcHJvcCA9IGZ1bmN0aW9uXG4gIHwgU3RyaW5nIHMgLT4gc1xuICB8IEludCB4IC0+IHN0cmluZ19vZl9pbnQgeFxuICB8IEJvb2wgeCAtPiBzdHJpbmdfb2ZfYm9vbCB4XG4gIHwgRmxvYXQgeCAtPiBzdHJpbmdfb2ZfZmxvYXQgeFxuXG5sZXQgc2FtZV9wcm9wIHYxIHYyID1cbiAgdjEgPT0gdjIgfHxcbiAgbWF0Y2ggdjEsIHYyIHdpdGhcbiAgfCBTdHJpbmcgeDEsIFN0cmluZyB4MiAtPiB4MSA9IHgyXG4gIHwgSW50IHgxLCBJbnQgeDIgLT4geDEgPSB4MlxuICB8IEJvb2wgeDEsIEJvb2wgeDIgLT4geDEgPSB4MlxuICB8IEZsb2F0IHgxLCBGbG9hdCB4MiAtPiB4MSA9IHgyXG4gIHwgXyAtPiBmYWxzZVxuXG5sZXQgYm1lbW8gdmRvbSBjaGlsZCA9XG4gIEJNZW1vIHt2ZG9tOyBkb21zID0gZ2V0X2RvbXMgY2hpbGQ7IGNoaWxkfVxuXG5sZXQgaXNfdmlzaWJsZSBkb20gPVxuICBsZXQgYm91bmRpbmcgPSBFbGVtZW50LmdldF9ib3VuZGluZ19jbGllbnRfcmVjdCBkb20gaW5cbiAgbGV0IHRvcCA9IFJlY3QudG9wIGJvdW5kaW5nIGluXG4gIGxldCBib3R0b20gPSBSZWN0LmJvdHRvbSBib3VuZGluZyBpblxuICB0b3AgPj0gMC4wICYmIGJvdHRvbSA8PSBXaW5kb3cuaW5uZXJfaGVpZ2h0IHdpbmRvd1xuXG5sZXQgY3VzdG9tX2F0dHJpYnV0ZSBwcm9wID1cbiAgbWF0Y2ggcHJvcCB3aXRoXG4gIHwgXCJzY3JvbGwtdG8tc2hvd1wiIC0+XG4gICAgICBTb21lXG4gICAgICAgIChmdW4gZG9tIHYgLT5cbiAgICAgICAgICAgdHJ5XG4gICAgICAgICAgICAgbGV0IGFsaWduX3RvcCA9XG4gICAgICAgICAgICAgICBtYXRjaCB2IHdpdGhcbiAgICAgICAgICAgICAgIHwgQm9vbCBmYWxzZSAtPiBmYWxzZVxuICAgICAgICAgICAgICAgfCBfIC0+IHRydWVcbiAgICAgICAgICAgICBpblxuICAgICAgICAgICAgIGlmIG5vdCAoaXNfdmlzaWJsZSBkb20pIHRoZW5cbiAgICAgICAgICAgICAgIEVsZW1lbnQuc2Nyb2xsX2ludG9fdmlldyBkb20gYWxpZ25fdG9wO1xuICAgICAgICAgICB3aXRoIGV4biAtPiBQcmludGYucHJpbnRmIFwic2Nyb2xsOiAlc1xcbiUhXCIgKFByaW50ZXhjLnRvX3N0cmluZyBleG4pXG4gICAgICAgIClcblxuICB8IFwiYXV0b2ZvY3VzXCIgLT5cbiAgICAgIFNvbWVcbiAgICAgICAgKGZ1biBkb20gdiAtPlxuICAgICAgICAgICBsZXQgZG9fZm9jdXMgPVxuICAgICAgICAgICAgIG1hdGNoIHYgd2l0aFxuICAgICAgICAgICAgIHwgU3RyaW5nIFwiaWYtdmlzaWJsZVwiIC0+IGlzX3Zpc2libGUgZG9tXG4gICAgICAgICAgICAgfCBfIC0+IHRydWVcbiAgICAgICAgICAgaW5cbiAgICAgICAgICAgaWYgZG9fZm9jdXMgdGhlbiBFbGVtZW50LmZvY3VzIGRvbVxuICAgICAgICApXG5cbiAgfCBcInNlbGVjdFwiIC0+XG4gICAgICBTb21lIChmdW4gZG9tIF8gLT4gRWxlbWVudC5zZWxlY3QgZG9tKVxuXG4gIHwgXCJhdXRvc3VibWl0XCIgLT5cbiAgICAgIFNvbWUgKGZ1biBkb20gXyAtPiBFbGVtZW50LnN1Ym1pdCBkb20pXG5cbiAgfCBfIC0+IE5vbmVcblxuXG5sZXQgYXN5bmMgZiA9XG4gIGlnbm9yZSAoV2luZG93LnNldF90aW1lb3V0IHdpbmRvdyBmIDApXG5cbmxldCBhcHBseV9lZmZlY3RfcHJvcCBkb20gcHJvcCB2YWx1ZSA9XG4gIG1hdGNoIGN1c3RvbV9hdHRyaWJ1dGUgcHJvcCB3aXRoXG4gIHwgTm9uZSAtPiBmYWxzZVxuICB8IFNvbWUgZiAtPiBhc3luYyAoZnVuICgpIC0+IGYgZG9tIHZhbHVlKTsgdHJ1ZVxuXG5sZXQgc2V0X3N0eWxlIGRvbSBrIHYgPVxuICBpZiBTdHJpbmcubGVuZ3RoIGsgPiAwICYmIGsuWzBdID0gJy0nIHRoZW5cbiAgICBPanMuY2FsbFxuICAgICAgKE9qcy5nZXRfcHJvcF9hc2NpaSAoRWxlbWVudC50X3RvX2pzIGRvbSkgXCJzdHlsZVwiKVxuICAgICAgXCJzZXRQcm9wZXJ0eVwiXG4gICAgICBbfCBPanMuc3RyaW5nX3RvX2pzIGs7IHYgfF0gfD4gaWdub3JlXG4gIGVsc2VcbiAgICBPanMuc2V0X3Byb3BfYXNjaWlcbiAgICAgIChPanMuZ2V0X3Byb3BfYXNjaWkgKEVsZW1lbnQudF90b19qcyBkb20pIFwic3R5bGVcIilcbiAgICAgIGtcbiAgICAgIHZcblxubGV0IGFwcGx5X3NwZWNpYWxfcHJvcCBucyBkb20gayB2ID1cbiAgbWF0Y2ggbnMsIGssIHYgd2l0aFxuICB8IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJjbGFzc05hbWVcIiwgU3RyaW5nIHMgLT5cbiAgICAgIGxldCBjbGFzc19vYmogPSBPanMuZ2V0X3Byb3BfYXNjaWkgKEVsZW1lbnQudF90b19qcyBkb20pIFwiY2xhc3NOYW1lXCIgaW5cbiAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSBjbGFzc19vYmogXCJiYXNlVmFsXCIgKE9qcy5zdHJpbmdfdG9fanMgcyk7XG4gICAgICB0cnVlXG4gIHwgXyAtPiBmYWxzZVxuXG5sZXQganNfZW1wdHlfc3RyaW5nID0gT2pzLnN0cmluZ190b19qcyBcIlwiXG5cbmxldCBjbGVhcl9zcGVjaWFsX3Byb3AgbnMgZG9tIGsgPVxuICBtYXRjaCBucywgayB3aXRoXG4gIHwgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImNsYXNzTmFtZVwiIC0+XG4gICAgICBsZXQgY2xhc3Nfb2JqID0gT2pzLmdldF9wcm9wX2FzY2lpIChFbGVtZW50LnRfdG9fanMgZG9tKSBcImNsYXNzTmFtZVwiIGluXG4gICAgICBPanMuc2V0X3Byb3BfYXNjaWkgY2xhc3Nfb2JqIFwiYmFzZVZhbFwiIGpzX2VtcHR5X3N0cmluZztcbiAgICAgIHRydWVcbiAgfCBfIC0+IGZhbHNlXG5cbnR5cGUgZW52ID1cbiAge1xuICAgIGNtZHM6IENtZC5oYW5kbGVyIGxpc3Q7XG4gICAgY3VzdG9tczogQ3VzdG9tLmhhbmRsZXIgbGlzdDtcbiAgfVxuXG5sZXQgZW1wdHkgPSB7Y21kcyA9IFtdOyBjdXN0b21zID0gW119XG5sZXQgY21kIGggPSB7ZW1wdHkgd2l0aCBjbWRzID0gW2hdfVxubGV0IGN1c3RvbSBoID0ge2VtcHR5IHdpdGggY3VzdG9tcyA9IFtoXX1cbmxldCBtZXJnZSBlbnZzID1cbiAge1xuICAgIGNtZHMgPSBMaXN0LmNvbmNhdCAoTGlzdC5tYXAgKGZ1biBlIC0+IGUuY21kcykgZW52cyk7XG4gICAgY3VzdG9tcyA9IExpc3QuY29uY2F0IChMaXN0Lm1hcCAoZnVuIGUgLT4gZS5jdXN0b21zKSBlbnZzKTtcbiAgfVxuXG5sZXQgZ2xvYmFsID0gcmVmIGVtcHR5XG5cbmxldCByZWdpc3RlciBlID0gZ2xvYmFsIDo9IG1lcmdlIFtlOyAhZ2xvYmFsXVxuXG50eXBlIGN0eCA9XG4gIHtcbiAgICBwcm9jZXNzX2N1c3RvbTogKEVsZW1lbnQudCAtPiBDdXN0b20uZXZlbnQgLT4gdW5pdCk7XG4gICAgY3VzdG9tX2hhbmRsZXJzOiBDdXN0b20uaGFuZGxlciBsaXN0O1xuICAgIGFmdGVyX3JlZHJhdzogKCh1bml0IC0+IHVuaXQpIC0+IHVuaXQpO1xuICAgIGFkZF9saXN0ZW5lcjogc3RyaW5nIC0+IHVuaXQ7XG4gIH1cblxubGV0IGFwcGx5X2F0dHJpYnV0ZXMgY3R4IG5zIGRvbSBhdHRyaWJ1dGVzID1cbiAgTGlzdC5pdGVyXG4gICAgKGZ1bmN0aW9uXG4gICAgICB8IFByb3BlcnR5IChrLCB2KSAtPlxuICAgICAgICAgIGlmIG5vdCAoYXBwbHlfc3BlY2lhbF9wcm9wIG5zIGRvbSBrIHYpIHRoZW5cbiAgICAgICAgICAgIGlmIG5vdCAoYXBwbHlfZWZmZWN0X3Byb3AgZG9tIGsgdikgdGhlblxuICAgICAgICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKEVsZW1lbnQudF90b19qcyBkb20pIGsgKGV2YWxfcHJvcCB2KVxuXG4gICAgICB8IFN0eWxlIChrLCB2KSAtPiBzZXRfc3R5bGUgZG9tIGsgKE9qcy5zdHJpbmdfdG9fanMgdilcblxuICAgICAgfCBBdHRyaWJ1dGUgKGssIHYpIC0+XG4gICAgICAgICAgRWxlbWVudC5zZXRfYXR0cmlidXRlIGRvbSBrIHZcblxuICAgICAgfCBIYW5kbGVyIERlY29kZXIge2V2ZW50X3R5cGU7IF99IC0+IGN0eC5hZGRfbGlzdGVuZXIgZXZlbnRfdHlwZVxuXG4gICAgICB8IEhhbmRsZXIgQ3VzdG9tRXZlbnQgXyAtPiAoKVxuICAgIClcbiAgICBhdHRyaWJ1dGVzXG5cbmxldCByZWMgYmxpdCA6ICdtc2cuIHBhcmVudDpfIC0+IGN0eCAtPiAnbXNnIHZkb20gLT4gJ21zZyBjdHJsID1cbiAgZnVuIH5wYXJlbnQgY3R4IHZkb20gLT5cbiAgbWF0Y2ggdmRvbSB3aXRoXG4gIHwgVGV4dCB7dHh0OyBrZXkgPSBffSAtPlxuICAgICAgQlRleHQge3Zkb207IGRvbSA9IERvY3VtZW50LmNyZWF0ZV90ZXh0X25vZGUgZG9jdW1lbnQgdHh0fVxuXG4gIHwgRnJhZ21lbnQge2NoaWxkcmVuOyBrZXkgPSBffSAtPlxuICAgICAgbGV0IGNoaWxkcmVuID0gTGlzdC5tYXAgKGJsaXQgfnBhcmVudCBjdHgpIGNoaWxkcmVuIGluXG4gICAgICBsZXQgZG9tcyA9IExpc3QuY29uY2F0X21hcCBnZXRfZG9tcyBjaGlsZHJlbiBpblxuICAgICAgQkZyYWdtZW50IHt2ZG9tOyBkb21zOyBjaGlsZHJlbiB9XG5cbiAgfCBNYXAge2Y7IGNoaWxkOyBrZXkgPSBffSAtPlxuICAgICAgbGV0IGNoaWxkID0gYmxpdCB+cGFyZW50IGN0eCBjaGlsZCBpblxuICAgICAgQk1hcCB7dmRvbTsgZG9tcyA9IGdldF9kb21zIGNoaWxkOyBmOyBjaGlsZH1cblxuICB8IE1lbW8ge2Y7IGFyZzsga2V5ID0gX30gLT5cbiAgICAgIGJtZW1vIHZkb20gKGJsaXQgfnBhcmVudCBjdHggKGYgYXJnKSlcblxuICB8IEN1c3RvbSB7ZWx0OyBhdHRyaWJ1dGVzOyBrZXkgPSBfOyBwcm9wYWdhdGVfZXZlbnRzfSAtPlxuICAgICAgbGV0IGVsdCA9XG4gICAgICAgIHRyeSBDdXN0b20ubG9va3VwIH5wYXJlbnQgfnByb2Nlc3NfY3VzdG9tOmN0eC5wcm9jZXNzX2N1c3RvbSB+YWZ0ZXJfcmVkcmF3OmN0eC5hZnRlcl9yZWRyYXcgZWx0IChjdHguY3VzdG9tX2hhbmRsZXJzIEAgKCFnbG9iYWwpLmN1c3RvbXMpO1xuICAgICAgICB3aXRoIGV4biAtPlxuICAgICAgICAgIFByaW50Zi5wcmludGYgXCJFcnJvciBkdXJpbmcgdmRvbSBDdXN0b20gJXMgbG9va3VwOiAlc1xcbiUhXCJcbiAgICAgICAgICAgIChPYmouRXh0ZW5zaW9uX2NvbnN0cnVjdG9yLm5hbWUgKE9iai5FeHRlbnNpb25fY29uc3RydWN0b3Iub2ZfdmFsIGVsdCkpXG4gICAgICAgICAgICAoUHJpbnRleGMudG9fc3RyaW5nIGV4bik7XG4gICAgICAgICAgcmFpc2UgZXhuXG4gICAgICBpblxuICAgICAgbGV0IG5zID1cbiAgICAgICAgT2pzLm9wdGlvbl9vZl9qc1xuICAgICAgICAgIE9qcy5zdHJpbmdfb2ZfanNcbiAgICAgICAgICAoT2pzLmdldF9wcm9wX2FzY2lpIChFbGVtZW50LnRfdG9fanMgZWx0LmRvbSkgXCJuYW1lc3BhY2VVUklcIilcbiAgICAgICAgfD4gT3B0aW9uLnZhbHVlIH5kZWZhdWx0OlwiXCJcbiAgICAgIGluXG4gICAgICBhcHBseV9hdHRyaWJ1dGVzIGN0eCBucyBlbHQuZG9tIGF0dHJpYnV0ZXM7XG4gICAgICBCQ3VzdG9tIHt2ZG9tOyBlbHQ7IG5zOyBwcm9wYWdhdGVfZXZlbnRzfVxuXG4gIHwgRWxlbWVudCB7bnM7IHRhZzsgY2hpbGRyZW47IGF0dHJpYnV0ZXM7IGtleSA9IF99IC0+XG4gICAgICBpZiBkZWJ1ZyB0aGVuIFByaW50Zi5wcmludGYgXCJjcmVhdGUgPCVzPlxcbiUhXCIgdGFnO1xuICAgICAgbGV0IGRvbSA9XG4gICAgICAgIGlmIG5zID0gXCJcIiB0aGVuIERvY3VtZW50LmNyZWF0ZV9lbGVtZW50IGRvY3VtZW50IHRhZ1xuICAgICAgICBlbHNlIERvY3VtZW50LmNyZWF0ZV9lbGVtZW50X25zIGRvY3VtZW50IG5zIHRhZ1xuICAgICAgaW5cbiAgICAgIGxldCBjaGlsZHJlbiA9IExpc3QubWFwIChibGl0IH5wYXJlbnQ6ZG9tIGN0eCkgY2hpbGRyZW4gaW5cbiAgICAgIExpc3QuaXRlciAoZnVuIGMgLT4gTGlzdC5pdGVyIChFbGVtZW50LmFwcGVuZF9jaGlsZCBkb20pIChnZXRfZG9tcyBjKSkgY2hpbGRyZW47XG4gICAgICBhcHBseV9hdHRyaWJ1dGVzIGN0eCBucyBkb20gYXR0cmlidXRlcztcbiAgICAgIEJFbGVtZW50IHt2ZG9tOyBkb207IGNoaWxkcmVufVxuXG5sZXQgYmxpdCB+cGFyZW50IGN0eCB2ZG9tID1cbiAgdHJ5IGJsaXQgfnBhcmVudCBjdHggdmRvbVxuICB3aXRoIGV4biAtPlxuICAgIFByaW50Zi5wcmludGYgXCJFcnJvciBkdXJpbmcgdmRvbSBibGl0OiAlc1xcbiUhXCIgKFByaW50ZXhjLnRvX3N0cmluZyBleG4pO1xuICAgIHJhaXNlIGV4blxuXG5sZXQgc3luY19wcm9wcyB0b19zdHJpbmcgc2FtZSBzZXQgY2xlYXIgbDEgbDIgPVxuICBsZXQgc29ydCA9IExpc3Quc29ydCAoZnVuIChrMSwgXykgKGsyLCBfKSAtPiBTdHJpbmcuY29tcGFyZSBrMSBrMikgaW5cbiAgbGV0IGwxID0gc29ydCBsMSBhbmQgbDIgPSBzb3J0IGwyIGluXG4gIGxldCByZWMgbG9vcCBsMSBsMiA9XG4gICAgbWF0Y2ggbDEsIGwyIHdpdGhcbiAgICB8IFtdLCBbXSAtPiAoKVxuXG4gICAgfCAoazEsIHYxKSA6OiB0bDEsIChrMiwgXykgOjogXyB3aGVuIGsxIDwgazIgLT5cbiAgICAgICAgaWYgZGVidWcgdGhlbiBQcmludGYucHJpbnRmIFwiUHJvcGVydHkgJXMgdW5zZXQgJXMgPT5cXG4lIVwiIGsxICh0b19zdHJpbmcgdjEpO1xuICAgICAgICBjbGVhciBrMSB2MTtcbiAgICAgICAgbG9vcCB0bDEgbDJcbiAgICB8IChrMSwgdjEpIDo6IHRsMSwgW10gLT5cbiAgICAgICAgaWYgZGVidWcgdGhlbiBQcmludGYucHJpbnRmIFwiUHJvcGVydHkgJXMgdW5zZXQgJXMgPT5cXG4lIVwiIGsxICh0b19zdHJpbmcgdjEpO1xuICAgICAgICBjbGVhciBrMSB2MTtcbiAgICAgICAgbG9vcCB0bDEgW11cblxuICAgIHwgKGsxLCBfKSA6OiBfLCAoazIsIHYyKSA6OiB0bDIgd2hlbiBrMiA8IGsxIC0+XG4gICAgICAgIGlmIGRlYnVnIHRoZW4gUHJpbnRmLnByaW50ZiBcIlByb3BlcnR5ICVzIHNldCA9PiAlc1xcbiUhXCIgazIgKHRvX3N0cmluZyB2Mik7XG4gICAgICAgIHNldCBrMiB2MjtcbiAgICAgICAgbG9vcCBsMSB0bDJcbiAgICB8IFtdLCAoazIsIHYyKSA6OiB0bDIgLT5cbiAgICAgICAgaWYgZGVidWcgdGhlbiBQcmludGYucHJpbnRmIFwiUHJvcGVydHkgJXMgc2V0ID0+ICVzXFxuJSFcIiBrMiAodG9fc3RyaW5nIHYyKTtcbiAgICAgICAgc2V0IGsyIHYyO1xuICAgICAgICBsb29wIFtdIHRsMlxuXG4gICAgfCAoX2sxLCB2MSkgOjogdGwxLCAoazIsIHYyKSA6OiB0bDIgLT5cbiAgICAgICAgKCogazEgPSBrMiAqKVxuICAgICAgICBpZiBub3QgKHNhbWUgdjEgdjIpIHRoZW4gYmVnaW5cbiAgICAgICAgICBpZiBkZWJ1ZyB0aGVuIFByaW50Zi5wcmludGYgXCJQcm9wZXJ0eSAlcyBjaGFuZ2VkICVzID0+ICVzXFxuJSFcIiBrMiAodG9fc3RyaW5nIHYxKSAodG9fc3RyaW5nIHYyKTtcbiAgICAgICAgICBzZXQgazIgdjI7XG4gICAgICAgIGVuZDtcbiAgICAgICAgbG9vcCB0bDEgdGwyXG4gIGluXG4gIGxvb3AgbDEgbDJcblxubGV0IHJlYyBjaG9vc2UgZiA9IGZ1bmN0aW9uXG4gIHwgW10gLT4gW11cbiAgfCBoZCA6OiB0bCAtPlxuICAgICAgbWF0Y2ggZiBoZCB3aXRoXG4gICAgICB8IE5vbmUgLT4gY2hvb3NlIGYgdGxcbiAgICAgIHwgU29tZSB4IC0+IHggOjogY2hvb3NlIGYgdGxcblxubGV0IGpzX3plcm8gPSBPanMuaW50X3RvX2pzIDBcbmxldCBqc19mYWxzZSA9IE9qcy5ib29sX3RvX2pzIGZhbHNlXG5cbmxldCBoYXNfb3duX3Byb3BlcnR5IG8geCA9XG4gIGxldCBvcGVuIE9qcyBpblxuICBib29sX29mX2pzIChjYWxsIG8gXCJoYXNPd25Qcm9wZXJ0eVwiIFt8IHN0cmluZ190b19qcyB4IHxdKVxuXG5sZXQgc3luY19hdHRyaWJ1dGVzIGN0eCBucyBkb20gYTEgYTIgPVxuICBsZXQgcHJvcHMgPSBmdW5jdGlvbiBQcm9wZXJ0eSAoaywgdikgLT4gU29tZSAoaywgdikgfCBTdHlsZSBfIHwgSGFuZGxlciBfIHwgQXR0cmlidXRlIF8gLT4gTm9uZSBpblxuICBsZXQgc2V0IGsgdiA9XG4gICAgbWF0Y2ggaywgdiB3aXRoXG4gICAgfCBcInZhbHVlXCIsIFN0cmluZyBzIHdoZW4gcyA9IEVsZW1lbnQudmFsdWUgZG9tIC0+ICgpXG4gICAgfCBfIC0+XG4gICAgICAgIGlmIG5vdCAoYXBwbHlfc3BlY2lhbF9wcm9wIG5zIGRvbSBrIHYpIHRoZW5cbiAgICAgICAgICBpZiBub3QgKGFwcGx5X2VmZmVjdF9wcm9wIGRvbSBrIHYpIHRoZW5cbiAgICAgICAgICAgIE9qcy5zZXRfcHJvcF9hc2NpaSAoRWxlbWVudC50X3RvX2pzIGRvbSkgayAoZXZhbF9wcm9wIHYpXG4gIGluXG4gIGxldCBjbGVhciBrIHYgPVxuICAgIGlmIGN1c3RvbV9hdHRyaWJ1dGUgayA9IE5vbmUgdGhlblxuICAgICAgaWYgaGFzX293bl9wcm9wZXJ0eSAoRWxlbWVudC50X3RvX2pzIGRvbSkgayB0aGVuXG4gICAgICAgIE9qcy5kZWxldGVfcHJvcF9hc2NpaSAoRWxlbWVudC50X3RvX2pzIGRvbSkga1xuICAgICAgZWxzZSBpZiBub3QgKGNsZWFyX3NwZWNpYWxfcHJvcCBucyBkb20gaykgdGhlblxuICAgICAgICBPanMuc2V0X3Byb3BfYXNjaWkgKEVsZW1lbnQudF90b19qcyBkb20pIGtcbiAgICAgICAgICBiZWdpbiBtYXRjaCB2IHdpdGhcbiAgICAgICAgICB8IFN0cmluZyBfIC0+IGpzX2VtcHR5X3N0cmluZ1xuXG4gICAgICAgICAgfCBJbnQgXyB8IEZsb2F0IF8gLT4ganNfemVyb1xuICAgICAgICAgIHwgQm9vbCBfIC0+IGpzX2ZhbHNlXG4gICAgICAgICAgZW5kXG4gIGluXG4gIHN5bmNfcHJvcHNcbiAgICBzdHJpbmdfb2ZfcHJvcFxuICAgIHNhbWVfcHJvcFxuICAgIHNldCBjbGVhclxuICAgIChjaG9vc2UgcHJvcHMgYTEpXG4gICAgKGNob29zZSBwcm9wcyBhMik7XG5cbiAgbGV0IHN0eWxlcyA9IGZ1bmN0aW9uIFN0eWxlIChrLCB2KSAtPiBTb21lIChrLCBTdHJpbmcgdikgfCBQcm9wZXJ0eSBfIHwgSGFuZGxlciBfIHwgQXR0cmlidXRlIF8gLT4gTm9uZSBpblxuICBsZXQgc2V0IGsgdiA9IHNldF9zdHlsZSBkb20gayAoZXZhbF9wcm9wIHYpaW5cbiAgbGV0IGNsZWFyIGsgXyA9IHNldF9zdHlsZSBkb20gayBqc19lbXB0eV9zdHJpbmcgaW5cbiAgc3luY19wcm9wc1xuICAgIHN0cmluZ19vZl9wcm9wXG4gICAgc2FtZV9wcm9wXG4gICAgc2V0IGNsZWFyXG4gICAgKGNob29zZSBzdHlsZXMgYTEpXG4gICAgKGNob29zZSBzdHlsZXMgYTIpO1xuXG4gIGxldCBhdHRycyA9IGZ1bmN0aW9uIEF0dHJpYnV0ZSAoaywgdikgLT4gU29tZSAoaywgdikgfCBTdHlsZSBfIHwgUHJvcGVydHkgXyB8IEhhbmRsZXIgXyAtPiBOb25lIGluXG4gIGxldCBzZXQgayB2ID0gRWxlbWVudC5zZXRfYXR0cmlidXRlIGRvbSBrIHYgaW5cbiAgbGV0IGNsZWFyIGsgXyA9IEVsZW1lbnQucmVtb3ZlX2F0dHJpYnV0ZSBkb20gayBpblxuICBzeW5jX3Byb3BzXG4gICAgRnVuLmlkXG4gICAgKGZ1biAoczE6IHN0cmluZykgczIgLT4gczEgPSBzMilcbiAgICBzZXQgY2xlYXJcbiAgICAoY2hvb3NlIGF0dHJzIGExKVxuICAgIChjaG9vc2UgYXR0cnMgYTIpO1xuXG4gIExpc3QuaXRlclxuICAgIChmdW5jdGlvbiB8IEhhbmRsZXIgRGVjb2RlciB7ZXZlbnRfdHlwZTsgX30gLT4gY3R4LmFkZF9saXN0ZW5lciBldmVudF90eXBlXG4gICAgICAgICAgICAgIHwgXyAtPiAoKSlcbiAgICBhMlxuXG5sZXQgcmVjIGRpc3Bvc2UgOiB0eXBlIG1zZy4gbXNnIGN0cmwgLT4gdW5pdCA9IGZ1biBjdHJsIC0+XG4gIG1hdGNoIGN0cmwgd2l0aFxuICB8IEJUZXh0IF8gLT4gKClcbiAgfCBCQ3VzdG9tIHtlbHQ7IF99IC0+IGVsdC5kaXNwb3NlICgpXG4gIHwgQkZyYWdtZW50IHtjaGlsZHJlbjsgX31cbiAgfCBCRWxlbWVudCB7Y2hpbGRyZW47IF99IC0+IExpc3QuaXRlciBkaXNwb3NlIGNoaWxkcmVuXG4gIHwgQk1hcCB7Y2hpbGQ7IF99IC0+IGRpc3Bvc2UgY2hpbGRcbiAgfCBCTWVtbyB7Y2hpbGQ7IF99IC0+IGRpc3Bvc2UgY2hpbGRcblxubGV0IHByaW50X2VsZW1lbnQgbm9kZSA9XG4gIGlmIEVsZW1lbnQubnVsbCA9PSBub2RlIHRoZW5cbiAgICBcIm51bGxcIlxuICBlbHNlXG4gICAgbWF0Y2ggRWxlbWVudC5ub2RlX3R5cGUgbm9kZSB3aXRoXG4gICAgfCBFbGVtZW50LkVMRU1FTlRfTk9ERSAtPiBFbGVtZW50Lm91dGVyX0hUTUwgbm9kZVxuICAgIHwgRWxlbWVudC5URVhUX05PREUgLT4gRWxlbWVudC5ub2RlX3ZhbHVlIG5vZGVcbiAgICB8IF8gLT4gXCI/P1wiXG5cbmxldCByZW1vdmVfY2hpbGQgcGFyZW50IGNoaWxkID1cbiAgaWYgZGVidWcgdGhlblxuICAgIFByaW50Zi5wcmludGYgXCJyZW1vdmVfY2hpbGQoJXMsICVzKVxcblwiIChwcmludF9lbGVtZW50IHBhcmVudCkgKHByaW50X2VsZW1lbnQgY2hpbGQpO1xuICBFbGVtZW50LnJlbW92ZV9jaGlsZCBwYXJlbnQgY2hpbGRcblxubGV0IHJlcGxhY2VfY2hpbGQgcGFyZW50IG4gbyA9XG4gIGlmIGRlYnVnIHRoZW5cbiAgICBQcmludGYucHJpbnRmIFwicmVwbGFjZV9jaGlsZCglcywgJXMsICVzKVxcblwiIChwcmludF9lbGVtZW50IHBhcmVudCkgKHByaW50X2VsZW1lbnQgbikgKHByaW50X2VsZW1lbnQgbyk7XG4gIEVsZW1lbnQucmVwbGFjZV9jaGlsZCBwYXJlbnQgbiBvXG5cbmxldCBpbnNlcnRfYmVmb3JlIHBhcmVudCBvIG4gPVxuICBpZiBkZWJ1ZyB0aGVuXG4gICAgUHJpbnRmLnByaW50ZiBcImluc2VydF9iZWZvcmUoJXMsICVzLCAlcylcXG5cIiAocHJpbnRfZWxlbWVudCBwYXJlbnQpIChwcmludF9lbGVtZW50IG8pIChwcmludF9lbGVtZW50IG4pO1xuICBFbGVtZW50Lmluc2VydF9iZWZvcmUgcGFyZW50IG8gblxuXG5sZXQgcmVjIHN5bmMgOiB0eXBlIG9sZF9tc2cgbXNnLiBjdHggLT4gRWxlbWVudC50IC0+IGJvb2wgLT4gRWxlbWVudC50IC0+IG9sZF9tc2cgY3RybCAtPiBtc2cgdmRvbSAtPiBtc2cgY3RybCA9XG4gIGZ1biBjdHggcGFyZW50IHByZXZfbW92ZSBuZXh0IG9sZCB2ZG9tIC0+XG5cbiAgbWF0Y2ggb2xkLCB2ZG9tIHdpdGhcbiAgfCBfIHdoZW4gKHZkb20gOiBtc2cgdmRvbSkgPT0gKE9iai5tYWdpYyAoZ2V0X3Zkb20gb2xkIDogb2xkX21zZyB2ZG9tKSkgLT5cbiAgICAgICgqIElmIG9sZCBhbmQgbmV3IHZkb20gYXJlIHBoeXNpY2FsbHkgaWRlbnRpY2FsLCBpdCBpcyBzYWZlIHRvIHJldXNlIHRoZSBvbGQgY3RybC4gKilcbiAgICAgIChPYmoubWFnaWMgKG9sZCA6IG9sZF9tc2cgY3RybCkgOiBtc2cgY3RybClcbiAgfCBCVGV4dCB7dmRvbSA9IFRleHQge3R4dCA9IHMxOyBrZXkgPSBffTsgZG9tfSwgVGV4dCB7dHh0ID0gczI7IGtleSA9IF99IC0+XG4gICAgICBpZiBzMSA8PiBzMiB0aGVuIEVsZW1lbnQuc2V0X25vZGVfdmFsdWUgZG9tIHMyO1xuICAgICAgQlRleHQge3Zkb207IGRvbX1cblxuICB8IEJNYXAge2NoaWxkID0gYzE7IF99LCBNYXAge2Y7IGNoaWxkID0gYzI7IGtleSA9IF99IC0+XG4gICAgICBsZXQgY2hpbGQgPSBzeW5jIGN0eCBwYXJlbnQgcHJldl9tb3ZlIG5leHQgYzEgYzIgaW5cbiAgICAgIEJNYXAge3Zkb207IGRvbXMgPSBnZXRfZG9tcyBjaGlsZDsgY2hpbGQ7IGZ9XG5cbiAgfCBCTWVtbyB7Y2hpbGQgPSBjMTsgdmRvbSA9IE1lbW8ge2YgPSBmMTsgYXJnID0gYTE7IGtleSA9IF99OyBffSwgTWVtbyB7ZiA9IGYyOyBhcmcgPSBhMjsga2V5ID0gX30gLT5cbiAgICAgICgqIElzIHRoaXMgc2FmZSAhPyAqKVxuICAgICAgaWYgT2JqLm1hZ2ljIGYxID09IGYyICYmIE9iai5tYWdpYyBhMSA9PSBhMiB0aGVuXG4gICAgICAgIGJtZW1vIHZkb20gKE9iai5tYWdpYyAoYzEgOiBvbGRfbXNnIGN0cmwpIDogbXNnIGN0cmwpXG4gICAgICBlbHNlXG4gICAgICAgIGJtZW1vIHZkb20gKHN5bmMgY3R4IHBhcmVudCBwcmV2X21vdmUgbmV4dCBjMSAoZjIgYTIpKVxuXG4gIHwgQkN1c3RvbSB7dmRvbSA9IEN1c3RvbSB7a2V5PWtleTE7IGVsdD1hcmcxOyBhdHRyaWJ1dGVzPWExOyBwcm9wYWdhdGVfZXZlbnRzID0gX307IHByb3BhZ2F0ZV9ldmVudHMgPSBfOyBlbHQ7IG5zfSwgQ3VzdG9tIHtrZXk9a2V5MjsgZWx0PWFyZzI7IGF0dHJpYnV0ZXM9YTI7IHByb3BhZ2F0ZV9ldmVudHN9XG4gICAgd2hlbiBrZXkxID0ga2V5MiAmJiAoYXJnMSA9PSBhcmcyIHx8IGVsdC5zeW5jIGFyZzIpIC0+XG4gICAgICBzeW5jX2F0dHJpYnV0ZXMgY3R4IG5zIGVsdC5kb20gYTEgYTI7XG4gICAgICBCQ3VzdG9tIHt2ZG9tOyBlbHQ7IG5zOyBwcm9wYWdhdGVfZXZlbnRzfVxuXG4gIHwgQkZyYWdtZW50IHt2ZG9tID0gRnJhZ21lbnQgZTE7IGNoaWxkcmVuOyBffSwgRnJhZ21lbnQgZTIgd2hlbiBlMS5rZXkgPSBlMi5rZXkgLT5cbiAgICAgIGxldCBjaGlsZHJlbiA9IHN5bmNfY2hpbGRyZW4gY3R4IHBhcmVudCBwcmV2X21vdmUgbmV4dCBjaGlsZHJlbiBlMi5jaGlsZHJlbiBpblxuICAgICAgbGV0IGRvbXMgPSBMaXN0LmNvbmNhdF9tYXAgZ2V0X2RvbXMgY2hpbGRyZW4gaW5cbiAgICAgIEJGcmFnbWVudCB7dmRvbTsgZG9tczsgY2hpbGRyZW4gfVxuXG4gIHwgQkVsZW1lbnQge3Zkb20gPSBFbGVtZW50IGUxOyBkb207IGNoaWxkcmVufSwgRWxlbWVudCBlMiB3aGVuIGUxLnRhZyA9IGUyLnRhZyAmJiBlMS5ucyA9IGUyLm5zICYmIGUxLmtleSA9IGUyLmtleSAtPlxuICAgICAgbGV0IGNoaWxkcmVuID0gc3luY19jaGlsZHJlbiBjdHggZG9tIGZhbHNlIEVsZW1lbnQubnVsbCBjaGlsZHJlbiBlMi5jaGlsZHJlbiBpblxuICAgICAgKCogc3luY2hyb25pemUgcHJvcGVydGllcyAmIHN0eWxlcyAqKVxuICAgICAgc3luY19hdHRyaWJ1dGVzIGN0eCBlMS5ucyBkb20gZTEuYXR0cmlidXRlcyBlMi5hdHRyaWJ1dGVzO1xuICAgICAgQkVsZW1lbnQge3Zkb207IGRvbTsgY2hpbGRyZW59XG5cbiAgfCBfIC0+XG4gICAgICBsZXQgeCA9IGJsaXQgfnBhcmVudCBjdHggdmRvbSBpblxuICAgICAgbGV0IHJlYyBsb29wIGwxIGwyID1cbiAgICAgICAgbWF0Y2ggbDEsIGwyIHdpdGhcbiAgICAgICAgfCBoMTo6dDEsIGgyOjp0MiAtPlxuICAgICAgICAgICAgcmVwbGFjZV9jaGlsZCBwYXJlbnQgaDEgaDI7XG4gICAgICAgICAgICBsb29wIHQxIHQyXG4gICAgICAgIHwgW10sIGwgLT5cbiAgICAgICAgICAgIExpc3QuaXRlciAocmVtb3ZlX2NoaWxkIHBhcmVudCkgbFxuICAgICAgICB8IGwsIFtdIC0+XG4gICAgICAgICAgICBMaXN0Lml0ZXIgKGZ1biBjIC0+IGluc2VydF9iZWZvcmUgcGFyZW50IGMgbmV4dCkgbFxuICAgICAgaW5cbiAgICAgIGxvb3AgKGdldF9kb21zIHgpIChnZXRfZG9tcyBvbGQpO1xuICAgICAgZGlzcG9zZSBvbGQ7XG4gICAgICB4XG5cbmFuZCBzeW5jX2NoaWxkcmVuIDogdHlwZSBvbGRfbXNnIG1zZy4gY3R4IC0+IEVsZW1lbnQudCAtPiBib29sIC0+IEVsZW1lbnQudCAtPiBvbGRfbXNnIGN0cmwgbGlzdCAtPiBtc2cgdmRvbSBsaXN0IC0+IG1zZyBjdHJsIGxpc3QgPVxuICBmdW4gY3R4IGRvbSBwcmV2X21vdmUgbmV4dCBvbGRfY2hpbGRyZW4gbmV3X2NoaWxkcmVuIC0+XG4gICgqIFRPRE86XG4gICAgIC0gYWRkIGEgZmFzdC1wYXRoIHRvIGRlYWwgd2l0aCBwcmVmaXhlcyBhbmQgc3VmZml4ZXMgb2Ygb2xkL25ldyBjaGlsZHJlbiB3aXRoIGlkZW50aWNhbFxuICAgICAgIGtleXMsIGF2b2lkaW5nIGEgbG90IG9mIGFsbG9jYXRpb25zLlxuICAgICAtIHVzZSBhIEpTIG9iamVjdCAobWFwKSBpbnN0ZWFkIG9mIGFuIE9DYW1sIEhhc2h0Ymw/XG4gICopXG5cbiAgKCogc3luY2hyb25pemUgY2hpbGRyZW4gKilcblxuICBsZXQgb2xkX2NoaWxkcmVuID0gQXJyYXkub2ZfbGlzdCBvbGRfY2hpbGRyZW4gaW5cbiAgbGV0IG5ld19jaGlsZHJlbiA9IEFycmF5Lm9mX2xpc3QgbmV3X2NoaWxkcmVuIGluXG5cbiAgKCogZm9yIGVhY2gga2V5LCBnZXQgYSBsaXN0IG9mIGluZGljZXMgaW4gb2xkX2NoaWxkcmVuICopXG4gIGxldCBieV9rZXkgPSBIYXNodGJsLmNyZWF0ZSA4IGluXG4gIGZvciBpID0gQXJyYXkubGVuZ3RoIG9sZF9jaGlsZHJlbiAtIDEgZG93bnRvIDAgZG9cbiAgICBsZXQgayA9IGtleV9vZl92ZG9tIChnZXRfdmRvbSBvbGRfY2hpbGRyZW4uKGkpKSBpblxuICAgIEhhc2h0YmwuYWRkIGJ5X2tleSBrIGlcbiAgICAoKiBlYXJseSBlbGVtZW50cyBhcmUgaW5zZXJ0ZWQgbGFzdDogZm91bmQgZmlyc3QhICopXG4gIGRvbmU7XG5cbiAgKCogYnVpbGQgYW4gYXJyYXkgdGVsbGluZyB1cywgZm9yIGVhY2ggcG9zaXRpb24gaW4gdGhlIFwibmV3XCIgc2VxdWVuY2UsXG4gICAgIHdoZXJlIHRvIHBpY2sgaXQgZnJvbSB0aGUgXCJvbGRcIiBzZXF1ZW5jZS4gKilcbiAgbGV0IGluZGljZXMgPSBBcnJheS5tYWtlIChBcnJheS5sZW5ndGggbmV3X2NoaWxkcmVuKSAoLTEpIGluXG4gIGZvciBpID0gMCB0byBBcnJheS5sZW5ndGggaW5kaWNlcyAtIDEgZG9cbiAgICBsZXQgayA9IGtleV9vZl92ZG9tIG5ld19jaGlsZHJlbi4oaSkgaW5cbiAgICBtYXRjaCBIYXNodGJsLmZpbmQgYnlfa2V5IGsgd2l0aFxuICAgIHwgZXhjZXB0aW9uIE5vdF9mb3VuZCAtPiAoKSAoKiBrZWVwICgtMSkgPT0gbmVlZCB0byBidWlsZCBmcm9tIHNjcmF0Y2ggKilcbiAgICB8IGlkeCAtPlxuICAgICAgICBpbmRpY2VzLihpKSA8LSBpZHg7XG4gICAgICAgIEhhc2h0YmwucmVtb3ZlIGJ5X2tleSBrO1xuICBkb25lO1xuXG4gIEhhc2h0YmwuaXRlclxuICAgIChmdW4gXyBpIC0+XG4gICAgICAgaWYgZGVidWcgdGhlbiBQcmludGYucHJpbnRmIFwicmVtb3ZlICVpXFxuJSFcIiBpO1xuICAgICAgIGxldCB0b19yZW1vdmUgPSBvbGRfY2hpbGRyZW4uKGkpIGluXG4gICAgICAgTGlzdC5pdGVyIChyZW1vdmVfY2hpbGQgZG9tKSAoZ2V0X2RvbXMgdG9fcmVtb3ZlKTtcbiAgICAgICBkaXNwb3NlIHRvX3JlbW92ZVxuICAgIClcbiAgICBieV9rZXk7XG5cbiAgKCogcHJvZHVjZSB0aGUgbmV3IHNlcXVlbmNlLCBmcm9tIHJpZ2h0LXRvLWxlZnQsIGNyZWF0aW5nIGFuZCBwaWNraW5nK3N5bmNpbmMgbm9kZXMgKilcbiAgbGV0IGN0cmxzID0gcmVmIFtdIGluXG4gIGxldCBwcmV2X21vdmUgPSByZWYgcHJldl9tb3ZlIGluXG4gIGxldCBuZXh0ID0gcmVmIG5leHQgaW5cbiAgZm9yIGkgPSBBcnJheS5sZW5ndGggbmV3X2NoaWxkcmVuIC0gMSBkb3dudG8gMCBkb1xuICAgIGxldCBpZHggPSBpbmRpY2VzLihpKSBpblxuICAgIGlmIGRlYnVnIHRoZW4gUHJpbnRmLnByaW50ZiBcIm9sZCA9ICVpOyBuZXcgPSAlaTogXCIgaWR4IGk7XG5cbiAgICBsZXQgYyA9XG4gICAgICBpZiBpZHggPCAwIHRoZW4gYmVnaW5cbiAgICAgICAgKCogY3JlYXRlICopXG4gICAgICAgIGlmIGRlYnVnIHRoZW4gUHJpbnRmLnByaW50ZiBcImNyZWF0ZVxcbiUhXCI7XG4gICAgICAgIGJsaXQgfnBhcmVudDpkb20gY3R4IG5ld19jaGlsZHJlbi4oaSlcbiAgICAgIGVuZFxuICAgICAgZWxzZSBiZWdpblxuICAgICAgICBpZiBkZWJ1ZyB0aGVuIFByaW50Zi5wcmludGYgXCJzeW5jJm1vdmVcXG4lIVwiO1xuICAgICAgICAoKiBub3RlOiB0aGUgc3luYyBjb3VsZCBsZWFkIHRvIGEgRE9NIHJlcGxhY2UsXG4gICAgICAgICAgIGZvbGxvd2luZyBieSBhIG1vdmUgYmVsb3c7IGluIHRoYXQgY2FzZSxcbiAgICAgICAgICAgb25lIHNob3VsZCBqdXN0IGRlbGV0ZSBvbGQgKyBpbnNlcnQgbmV3ICopXG4gICAgICAgIHN5bmMgY3R4IGRvbSAhcHJldl9tb3ZlICFuZXh0IG9sZF9jaGlsZHJlbi4oaWR4KSBuZXdfY2hpbGRyZW4uKGkpXG4gICAgICBlbmRcbiAgICBpblxuICAgICgqIHdoZW4gbmV4dCA9PSBudWxsLCBpbnNlcnQgYXQgdGhlIGVuZCAqKVxuXG4gICAgKCogV2UgdHJ5IHRvIGF2b2lkIHVzZWxlc3MgbW92ZXMgYXMgbXVjaCBhcyBwb3NzaWJsZSwgbm90IG9ubHkgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbixcbiAgICAgICBidXQgYWxzbyBiZWNhdXNlIGl0IGNhdXNlcyB0aGUgbG9zcyBvZiBmb2N1cyBvbiBpbnB1dCBmaWVsZHMuXG5cbiAgICAgICBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvaW5jcmVtZW50YWwtZG9tL2lzc3Vlcy8yMzdcblxuICAgICAgIEJldHRlciBzb2x1dGlvbnM6XG4gICAgICAgLSBSZXN0b3JlIHRoZSBmb2N1cyBhZnRlciB0aGUgZW50aXJlIHN5bmNocm9uaXphdGlvbiAoUmVhY3Qgc2VlbXMgdG8gZG8gdGhhdCkuXG4gICAgICAgLSBOZXZlciBtb3ZlIGEgZm9jdXNlZCB3aWRnZXQgb3Igb25lIG9mIGl0cyBhbmNlc3RvcnMgKHJlcXVpcmUgYSBsZXNzIHJlZ3VsYXJcbiAgICAgICAgIGFsZ29yaXRobSB0byBhcHBseSB0aGUgZGVzaXJlZCBwZXJtdXRhdGlvbikuXG4gICAgKilcbiAgICBsZXQgZG9tcyA9IGdldF9kb21zIGMgaW5cbiAgICBsZXQgcmVjIGxhc3QgPSBmdW5jdGlvblxuICAgICAgfCBbXSAtPiBOb25lXG4gICAgICB8IFsgY19kb20gXSAtPiBTb21lIGNfZG9tXG4gICAgICB8IF8gOjogdGwgLT4gbGFzdCB0bFxuICAgIGluXG4gICAgbWF0Y2ggbGFzdCBkb21zIHdpdGhcbiAgICB8IE5vbmUgLT4gKClcbiAgICB8IFNvbWUgcmlnaHRfbW9zdCAtPlxuICAgICAgICBiZWdpblxuICAgICAgICAgIGxldCBtb3ZlID1cbiAgICAgICAgICAgIGlkeCA8IDAgfHxcbiAgICAgICAgICAgICgoaWYgaSA9IEFycmF5Lmxlbmd0aCBuZXdfY2hpbGRyZW4gLSAxIHRoZW4gaWR4IDw+IEFycmF5Lmxlbmd0aCBvbGRfY2hpbGRyZW4gLSAxXG4gICAgICAgICAgICAgIGVsc2UgIXByZXZfbW92ZSB8fCBpbmRpY2VzLihpICsgMSkgPD4gaWR4ICsgMSlcbiAgICAgICAgICAgICAmJiBFbGVtZW50Lm5leHRfc2libGluZyByaWdodF9tb3N0ICE9ICFuZXh0KSgqIGNvdWxkIGF2b2lkIHJlYWRpbmcgZnJvbSB0aGUgRE9NLi4uICopXG4gICAgICAgICAgaW5cbiAgICAgICAgICBpZiBtb3ZlIHRoZW4gYmVnaW5cbiAgICAgICAgICAgIGlmIGRlYnVnIHRoZW4gUHJpbnRmLnByaW50ZiBcInJlYWxseSBtb3ZlXFxuJSFcIjtcbiAgICAgICAgICAgIExpc3QuaXRlciAoZnVuIGNfZG9tIC0+XG4gICAgICAgICAgICAgICAgaW5zZXJ0X2JlZm9yZSBkb20gY19kb20gIW5leHQpIGRvbXM7XG4gICAgICAgICAgZW5kO1xuICAgICAgICAgIHByZXZfbW92ZSA6PSBtb3ZlO1xuICAgICAgICAgIG5leHQgOj0gTGlzdC5oZCBkb21zO1xuICAgICAgICBlbmQ7XG4gICAgICAgIGN0cmxzIDo9IGMgOjogIWN0cmxzXG4gIGRvbmU7XG4gICFjdHJsc1xuXG5sZXQgc3luYyBjdHggcGFyZW50IG9sZCB2ZG9tID1cbiAgdHJ5IHN5bmMgY3R4IHBhcmVudCBvbGQgdmRvbVxuICB3aXRoIGV4biAtPlxuICAgIFByaW50Zi5wcmludGYgXCJFcnJvciBkdXJpbmcgdmRvbSBzeW5jOiAlc1xcbiUhXCIgKFByaW50ZXhjLnRvX3N0cmluZyBleG4pO1xuICAgIHJhaXNlIGV4blxuXG50eXBlICdtc2cgZmluZCA9XG4gIHwgTm90Rm91bmRcbiAgfCBGb3VuZDoge21hcHBlcjogKCdpbm5lcl9tc2cgLT4gJ21zZyk7IGlubmVyOiAnaW5uZXJfbXNnIGN0cmw7IHBhcmVudDogJ21zZyBmaW5kfSAtPiAnbXNnIGZpbmRcblxubGV0IHJlYyBmb3VuZDogdHlwZSBpbm5lcl9tc2cgbXNnLiAoaW5uZXJfbXNnIC0+IG1zZykgLT4gbXNnIGZpbmQgLT4gRWxlbWVudC50IC0+IGlubmVyX21zZyBjdHJsIC0+IG1zZyBmaW5kID1cbiAgZnVuIG1hcHBlciBwYXJlbnQgZG9tIC0+IGZ1bmN0aW9uXG4gICAgfCBCRWxlbWVudCBfIHwgQlRleHQgXyB8IEJDdXN0b20gXyBhcyBpbm5lciAtPiBGb3VuZCB7bWFwcGVyOyBpbm5lcjsgcGFyZW50fVxuICAgIHwgQkZyYWdtZW50IHtjaGlsZHJlbjsgX30gLT5cbiAgICAgICAgYmVnaW4gbWF0Y2ggTGlzdC5maW5kIChmdW4gYyAtPiBMaXN0Lm1lbXEgZG9tIChnZXRfZG9tcyBjKSkgY2hpbGRyZW4gd2l0aFxuICAgICAgICB8IGV4Y2VwdGlvbiBOb3RfZm91bmQgLT4gYXNzZXJ0IGZhbHNlXG4gICAgICAgIHwgYyAtPiBmb3VuZCBtYXBwZXIgcGFyZW50IGRvbSBjXG4gICAgICAgIGVuZFxuICAgIHwgQk1hcCB7ZjsgY2hpbGQ7IF99IC0+IGZvdW5kIChmdW4geCAtPiBtYXBwZXIgKGYgeCkpIHBhcmVudCBkb20gY2hpbGRcbiAgICB8IEJNZW1vIHtjaGlsZDsgX30gLT4gZm91bmQgbWFwcGVyIHBhcmVudCBkb20gY2hpbGRcblxuKCogRmluZCBhIGN0cmwgYXNzb2NpYXRlZCB0byBhIERPTSBlbGVtZW50LlxuICAgTm9ybWFsaXplIGJ5IHRyYXZlcnNpbmcgTWFwIG5vZGUsIGFuZCBhbHNvIHJldHVybiB0aGUgY29tcG9zaXRpb24gb2YgYWxsIHN1Y2ggbWFwcGVyc1xuICAgZnJvbSB0aGUgcm9vdCB0byB0aGUgY3RybC4gKilcblxubGV0IHJlYyB2ZG9tX29mX2RvbTogdHlwZSBtc2cuIG1zZyBjdHJsIC0+IEVsZW1lbnQudCAtPiBtc2cgZmluZCA9IGZ1biByb290IGRvbSAtPlxuICAoKiBoYWNrIHRvIGNoZWNrIGRvbSA9PSBudWxsPyAgIFNob3VsZCBtb3ZlIHRoYXQgdG8gT2pzLiAqKVxuICBtYXRjaCBPanMub3B0aW9uX29mX2pzIEVsZW1lbnQudF9vZl9qcyAoRWxlbWVudC50X3RvX2pzIGRvbSkgd2l0aFxuICB8IE5vbmUgLT4gTm90Rm91bmRcbiAgfCBTb21lIGRvbSB3aGVuIExpc3QubWVtcSBkb20gKGdldF9kb21zIHJvb3QpIC0+XG4gICAgICBmb3VuZCBGdW4uaWQgTm90Rm91bmQgZG9tIHJvb3RcbiAgfCBTb21lIGRvbSAtPlxuICAgICAgYmVnaW4gbWF0Y2ggdmRvbV9vZl9kb20gcm9vdCAoRWxlbWVudC5wYXJlbnRfbm9kZSBkb20pIHdpdGhcbiAgICAgIHwgTm90Rm91bmQgLT4gTm90Rm91bmRcbiAgICAgIHwgRm91bmQge21hcHBlcjsgaW5uZXIgPSBCRWxlbWVudCB7Y2hpbGRyZW47IF99OyBffSBhcyBwYXJlbnQgLT5cbiAgICAgICAgICBiZWdpbiBtYXRjaCBMaXN0LmZpbmQgKGZ1biBjIC0+IExpc3QubWVtcSBkb20gKGdldF9kb21zIGMpKSBjaGlsZHJlbiB3aXRoXG4gICAgICAgICAgfCBleGNlcHRpb24gTm90X2ZvdW5kIC0+IE5vdEZvdW5kXG4gICAgICAgICAgfCBjIC0+IGZvdW5kIG1hcHBlciBwYXJlbnQgZG9tIGNcbiAgICAgICAgICBlbmRcbiAgICAgIHwgRm91bmQge21hcHBlcjsgaW5uZXIgPSBCQ3VzdG9tIHtwcm9wYWdhdGVfZXZlbnRzOyBffSBhcyBpbm5lcjsgcGFyZW50fSAtPlxuICAgICAgICAgIGlmIHByb3BhZ2F0ZV9ldmVudHMgdGhlblxuICAgICAgICAgICAgZm91bmQgbWFwcGVyIHBhcmVudCBkb20gaW5uZXJcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBOb3RGb3VuZFxuICAgICAgfCBfIC0+IGFzc2VydCBmYWxzZVxuICAgICAgZW5kXG5cbnR5cGUgKCdtb2RlbCwgJ21zZykgYXBwID0ge1xuICBkb206IEpzX2Jyb3dzZXIuRWxlbWVudC50O1xuICBwcm9jZXNzOiAoJ21zZyAtPiB1bml0KTtcbiAgZ2V0OiAodW5pdCAtPiAnbW9kZWwpO1xuICBhZnRlcl9yZWRyYXc6ICh1bml0IC0+IHVuaXQpIC0+IHVuaXQ7XG4gIGRpc3Bvc2U6ICh1bml0IC0+IHVuaXQpO1xufVxuXG5sZXQgZG9tIHggPSB4LmRvbVxubGV0IHByb2Nlc3MgeCA9IHgucHJvY2Vzc1xubGV0IGdldCB4ID0geC5nZXQgKClcbmxldCBhZnRlcl9yZWRyYXcgeCA9IHguYWZ0ZXJfcmVkcmF3XG5cblxubGV0IHJ1biAodHlwZSBtc2cgbW9kZWwpID8oZW52ID0gZW1wdHkpID9jb250YWluZXJcbiAgICAoe2luaXQgPSAobW9kZWwwLCBjbWQwKTsgdXBkYXRlOyB2aWV3fSA6IChtb2RlbCwgbXNnKSBWZG9tLmFwcCkgPVxuICBsZXQgZW52ID0gbWVyZ2UgW2VudjsgIWdsb2JhbF0gaW5cbiAgbGV0IGNvbnRhaW5lcl9jcmVhdGVkLCBjb250YWluZXIgPVxuICAgIG1hdGNoIGNvbnRhaW5lciB3aXRoXG4gICAgfCBOb25lIC0+IHRydWUsIERvY3VtZW50LmNyZWF0ZV9lbGVtZW50IGRvY3VtZW50IFwiZGl2XCJcbiAgICB8IFNvbWUgY29udGFpbmVyIC0+IGZhbHNlLCBjb250YWluZXJcbiAgaW5cbiAgbGV0IHBvc3RfcmVkcmF3ID0gcmVmIFtdIGluXG4gIGxldCBhZnRlcl9yZWRyYXcgZiA9IHBvc3RfcmVkcmF3IDo9IGYgOjogIXBvc3RfcmVkcmF3IGluXG4gIGxldCBmbHVzaCBfID1cbiAgICBsZXQgbCA9IExpc3QucmV2ICFwb3N0X3JlZHJhdyBpblxuICAgIHBvc3RfcmVkcmF3IDo9IFtdO1xuICAgIExpc3QuaXRlciAoZnVuIGYgLT4gZiAoKSkgbFxuICBpblxuXG4gIGxldCBwcm9jZXNzX2N1c3RvbV9md2QgPSByZWYgKGZ1biBfIF8gLT4gYXNzZXJ0IGZhbHNlKSBpblxuICBsZXQgcHJvY2Vzc19md2QgPSByZWYgKGZ1biBfIC0+IGFzc2VydCBmYWxzZSkgaW5cblxuICBsZXQgbGlzdGVuZXJzID0gSGFzaHRibC5jcmVhdGUgOCBpblxuICBsZXQgbW9kZWwgPSByZWYgbW9kZWwwIGluXG4gIGxldCBjdXJyZW50ID0gcmVmIE5vbmUgaW5cblxuICBsZXQgcGVuZGluZ19yZWRyYXcgPSByZWYgZmFsc2UgaW5cblxuICBsZXQgdmlldyBtb2RlbCA9XG4gICAgdHJ5IHZpZXcgbW9kZWxcbiAgICB3aXRoIGV4biAtPlxuICAgICAgUHJpbnRmLnByaW50ZiBcIkVycm9yIGR1cmluZyB2ZG9tIHZpZXc6ICVzXFxuJSFcIiAoUHJpbnRleGMudG9fc3RyaW5nIGV4bik7XG4gICAgICByYWlzZSBleG5cbiAgaW5cblxuICBsZXQgb25fZXZlbnQgZXZ0ID1cbiAgICBsZXQgdHkgPSBFdmVudC50eXBlXyBldnQgaW5cbiAgICB0cnlcbiAgICAgIGxldCB0Z3QgPSBFbGVtZW50LnRfb2ZfanMgKEV2ZW50LnRhcmdldCBldnQpIGluXG4gICAgICBsZXQgYXBwbHlfaGFuZGxlciBkb20gPVxuICAgICAgICBMaXN0LmZpbHRlcl9tYXAgKGZ1biBhdHRyaWJ1dGUgLT5cbiAgICAgICAgICAgIG1hdGNoIGF0dHJpYnV0ZSB3aXRoXG4gICAgICAgICAgICB8IEhhbmRsZXIgKERlY29kZXIge2V2ZW50X3R5cGU7IGRlY29kZXI7IG1hcH0pIHdoZW4gdHkgPSBldmVudF90eXBlIC0+XG4gICAgICAgICAgICAgICAgbGV0IHttc2c7IHByZXZlbnRfZGVmYXVsdDsgc3RvcF9wcm9wYWdhdGlvbn0gPVxuICAgICAgICAgICAgICAgICAgQkRlY29kZXIuZGVjb2RlX2ZhaWxcbiAgICAgICAgICAgICAgICAgICAgfmV4dHJhX2ZpZWxkczpbXCJjdXJyZW50VGFyZ2V0XCIsIEVsZW1lbnQudF90b19qcyBkb21dXG4gICAgICAgICAgICAgICAgICAgIGRlY29kZXJcbiAgICAgICAgICAgICAgICAgICAgKEV2ZW50LnRfdG9fanMgZXZ0KVxuICAgICAgICAgICAgICAgIGluXG4gICAgICAgICAgICAgICAgaWYgcHJldmVudF9kZWZhdWx0IHRoZW4gRXZlbnQucHJldmVudF9kZWZhdWx0IGV2dDtcbiAgICAgICAgICAgICAgICBpZiBzdG9wX3Byb3BhZ2F0aW9uIHRoZW4gRXZlbnQuc3RvcF9wcm9wYWdhdGlvbiBldnQ7XG4gICAgICAgICAgICAgICAgYmVnaW4gbWF0Y2ggbWFwIG1zZyB3aXRoXG4gICAgICAgICAgICAgICAgfCBOb25lIC0+IE5vbmVcbiAgICAgICAgICAgICAgICB8IFNvbWUgbXNnIC0+XG4gICAgICAgICAgICAgICAgICAgIFNvbWUgKG1zZywgc3RvcF9wcm9wYWdhdGlvbilcbiAgICAgICAgICAgICAgICBlbmRcbiAgICAgICAgICAgIHwgXyAtPiBOb25lKVxuICAgICAgaW5cbiAgICAgIGxldCByZWMgcHJvcGFnYXRlID0gZnVuY3Rpb25cbiAgICAgICAgfCBGb3VuZCB7XG4gICAgICAgICAgICBtYXBwZXI7XG4gICAgICAgICAgICBpbm5lciA9ICggQkVsZW1lbnQge3Zkb20gPSBFbGVtZW50IHthdHRyaWJ1dGVzOyBffTsgZG9tOyBffVxuICAgICAgICAgICAgICAgICAgICB8IEJDdXN0b20gIHt2ZG9tID0gQ3VzdG9tICB7YXR0cmlidXRlczsgX307IGVsdCA9IHtkb207IF99OyBffSApO1xuICAgICAgICAgICAgcGFyZW50O1xuICAgICAgICAgIH0gLT5cbiAgICAgICAgICAgIGxldCBzdG9wX3Byb3BhZ2F0aW9uID1cbiAgICAgICAgICAgICAgTGlzdC5mb2xkX2xlZnRcbiAgICAgICAgICAgICAgICAoZnVuIHN0b3BwZWRfcHJvcGFnYXRpb24gKG1zZywgc3RvcF9wcm9wYWdhdGlvbikgLT5cbiAgICAgICAgICAgICAgICAgICAhcHJvY2Vzc19md2QgKG1hcHBlciBtc2cpO1xuICAgICAgICAgICAgICAgICAgIHN0b3BwZWRfcHJvcGFnYXRpb24gfHwgc3RvcF9wcm9wYWdhdGlvbilcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgIChhcHBseV9oYW5kbGVyIGRvbSBhdHRyaWJ1dGVzKVxuICAgICAgICAgICAgaW5cbiAgICAgICAgICAgIGlmIG5vdCBzdG9wX3Byb3BhZ2F0aW9uIHRoZW4gcHJvcGFnYXRlIHBhcmVudFxuICAgICAgICB8IF8gLT5cbiAgICAgICAgICAgICgpXG4gICAgICBpblxuICAgICAgT3B0aW9uLml0ZXIgKGZ1biByb290IC0+XG4gICAgICAgICAgcHJvcGFnYXRlICh2ZG9tX29mX2RvbSByb290IHRndCk7XG4gICAgICAgICkgIWN1cnJlbnQ7XG5cbiAgICAgIGlmIHR5ID0gXCJpbnB1dFwiIHx8IHR5ID0gXCJibHVyXCIgdGhlblxuICAgICAgICBsZXQgZiAoKSA9XG4gICAgICAgICAgT3B0aW9uLml0ZXJcbiAgICAgICAgICAgIChmdW4gcm9vdCAtPlxuICAgICAgICAgICAgICAgbWF0Y2ggdmRvbV9vZl9kb20gcm9vdCB0Z3Qgd2l0aFxuICAgICAgICAgICAgICAgKCogbm90ZTogdGhlIG5ldyB2ZG9tIGNhbiBiZSBkaWZmZXJlbnQgYWZ0ZXIgcHJvY2Vzc2luZ1xuICAgICAgICAgICAgICAgICAgdGhlIGV2ZW50IGFib3ZlICopXG4gICAgICAgICAgICAgICAoKiAhISBUaGlzIGlzIHByb2JhYmx5IGJyb2tlbiBub3cgdGhhdCB3ZSBkZWxheSB1cGRhdGluZyB0aGUgdmRvbVxuICAgICAgICAgICAgICAgICAgICAgd2l0aCByZXF1ZXN0X2FuaW1hdGlvbl9mcmFtZSAhISAqKVxuICAgICAgICAgICAgICAgfCBGb3VuZCB7bWFwcGVyID0gXzsgaW5uZXIgPSBCRWxlbWVudCB7dmRvbSA9IEVsZW1lbnQge2F0dHJpYnV0ZXM7IF99OyBffTsgX30gLT5cbiAgICAgICAgICAgICAgICAgICBMaXN0Lml0ZXJcbiAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICAgICB8IFByb3BlcnR5IChcInZhbHVlXCIsIFN0cmluZyBzMikgd2hlbiBzMiA8PiBFbGVtZW50LnZhbHVlIHRndCAtPiBFbGVtZW50LnNldF92YWx1ZSB0Z3QgczJcbiAgICAgICAgICAgICAgICAgICAgICAgfCBQcm9wZXJ0eSAoXCJjaGVja2VkXCIsIEJvb2wgczIpIC0+IEVsZW1lbnQuc2V0X2NoZWNrZWQgdGd0IHMyXG4gICAgICAgICAgICAgICAgICAgICAgIHwgXyAtPiAoKVxuICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlc1xuICAgICAgICAgICAgICAgfCBfIC0+ICgpXG4gICAgICAgICAgICApICFjdXJyZW50XG4gICAgICAgIGluXG4gICAgICAgIGlmICFwZW5kaW5nX3JlZHJhdyB0aGVuIGFmdGVyX3JlZHJhdyBmIGVsc2UgZiAoKVxuICAgIHdpdGggZXhuIC0+XG4gICAgICBQcmludGYucHJpbnRmIFwiRXJyb3IgaW4gZXZlbnQgaGFuZGxlciAlUzogJXNcXG4lIVwiIHR5IChQcmludGV4Yy50b19zdHJpbmcgZXhuKVxuICBpblxuXG4gIGxldCBhZGRfbGlzdGVuZXIgZXZlbnRfdHlwZSA9XG4gICAgaWYgbm90IChIYXNodGJsLm1lbSBsaXN0ZW5lcnMgZXZlbnRfdHlwZSkgdGhlbiBiZWdpblxuICAgICAgaWYgZGVidWcgdGhlbiBQcmludGYucHJpbnRmIFwiQWRkaW5nIGxpc3RlbmVyIGZvciAlc1xcbiUhXCIgZXZlbnRfdHlwZTtcbiAgICAgIGxldCByZW1vdmVfbGlzdGVuZXIgPSBFbGVtZW50LmFkZF9jYW5jZWxsYWJsZV9ldmVudF9saXN0ZW5lciBjb250YWluZXIgKEV2ZW50Lk5vblN0YW5kYXJkIGV2ZW50X3R5cGUpIG9uX2V2ZW50IHRydWUgaW5cbiAgICAgIEhhc2h0YmwuYWRkIGxpc3RlbmVycyBldmVudF90eXBlIHJlbW92ZV9saXN0ZW5lclxuICAgIGVuZFxuICBpblxuXG4gIGxldCBjdHggPVxuICAgIHtcbiAgICAgIHByb2Nlc3NfY3VzdG9tID0gKGZ1biBlbHQgZXZ0IC0+ICFwcm9jZXNzX2N1c3RvbV9md2QgZWx0IGV2dCk7XG4gICAgICBjdXN0b21faGFuZGxlcnMgPSBlbnYuY3VzdG9tcztcbiAgICAgIGFmdGVyX3JlZHJhdztcbiAgICAgIGFkZF9saXN0ZW5lcjtcbiAgICB9XG4gIGluXG4gIGxldCB4ID0gYmxpdCB+cGFyZW50OmNvbnRhaW5lciBjdHggKHZpZXcgbW9kZWwwKSBpblxuICBXaW5kb3cucmVxdWVzdF9hbmltYXRpb25fZnJhbWUgd2luZG93IGZsdXNoO1xuXG4gIGN1cnJlbnQgOj0gU29tZSB4O1xuXG4gIGxldCByZWRyYXcgXyA9XG4gICAgKCogVE9ETzpcbiAgICAgICBjb3VsZCBhdm9pZCBjYWxsaW5nIHZpZXcvc3luYyBpZiBtb2RlbCBpcyB0aGUgc2FtZSBhcyB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgKGJlY2F1c2UgdXBkYXRlcyBhcmUgbm93IGJhdGNoZWRcbiAgICAqKVxuICAgIG1hdGNoICFjdXJyZW50IHdpdGhcbiAgICB8IE5vbmUgLT4gKClcbiAgICB8IFNvbWUgcm9vdCAtPlxuICAgICAgICBwZW5kaW5nX3JlZHJhdyA6PSBmYWxzZTtcbiAgICAgICAgbGV0IHggPSBzeW5jIGN0eCBjb250YWluZXIgZmFsc2UgRWxlbWVudC5udWxsIHJvb3QgKHZpZXcgIW1vZGVsKSBpblxuICAgICAgICBjdXJyZW50IDo9IFNvbWUgeDtcbiAgICAgICAgZmx1c2ggKClcbiAgaW5cblxuICBsZXQgcmVjIHByb2Nlc3MgbXNnID1cbiAgICB0cnlcbiAgICAgIGxldCAobmV3X21vZGVsIDogbW9kZWwpLCAoY21kIDogbXNnIFZkb20uQ21kLnQpID0gdXBkYXRlICFtb2RlbCBtc2cgaW5cbiAgICAgIG1vZGVsIDo9IG5ld19tb2RlbDtcbiAgICAgIHJ1bl9jbWQgY29udGFpbmVyIGNtZDtcbiAgICAgIGlmIG5vdCAhcGVuZGluZ19yZWRyYXcgdGhlbiBiZWdpblxuICAgICAgICBwZW5kaW5nX3JlZHJhdyA6PSB0cnVlO1xuICAgICAgICBXaW5kb3cucmVxdWVzdF9hbmltYXRpb25fZnJhbWUgd2luZG93IHJlZHJhd1xuICAgICAgZW5kXG4gICAgd2l0aCBleG4gLT5cbiAgICAgIFByaW50Zi5wcmludGYgXCJFcnJvciBkdXJpbmcgdmRvbSBwcm9jZXNzOiAlc1xcbiUhXCIgKFByaW50ZXhjLnRvX3N0cmluZyBleG4pO1xuICAgICAgcmFpc2UgZXhuXG4gIGFuZCBydW5fY21kIChwYXJlbnQgOiBKc19icm93c2VyLkVsZW1lbnQudCkgY21kID1cbiAgICBDbWQucnVuIGFmdGVyX3JlZHJhdyAoZW52LmNtZHMgQCAoIWdsb2JhbCkuY21kcykgcHJvY2VzcyBwYXJlbnQgY21kXG4gIGluXG5cbiAgcHJvY2Vzc19md2QgOj0gcHJvY2VzcztcblxuXG4gIExpc3QuaXRlciAoRWxlbWVudC5hcHBlbmRfY2hpbGQgY29udGFpbmVyKSAoZ2V0X2RvbXMgeCk7XG5cbiAgbGV0IHByb2Nlc3NfY3VzdG9tIHRndCBldmVudCA9XG4gICAgT3B0aW9uLml0ZXJcbiAgICAgIChmdW4gcm9vdCAtPlxuICAgICAgICAgbGV0IHByb2Nlc3MgbWFwcGVyIGF0dHJpYnV0ZXMgPVxuICAgICAgICAgICBsZXQgc2VsZWN0X2hhbmRsZXIgYXR0ciA9XG4gICAgICAgICAgICAgbWF0Y2ggYXR0ciwgZXZlbnQgd2l0aFxuICAgICAgICAgICAgIHwgSGFuZGxlciAoRGVjb2RlciB7ZGVjb2RlcjsgbWFwOyBldmVudF90eXBlID0gZXQxfSksIEN1c3RvbS5FbmNvZGVkIHtlbmNvZGVyOyBldmVudF90eXBlID0gZXQyfSB3aGVuIGV0MSA9IGV0MiAtPlxuICAgICAgICAgICAgICAgICBsZXQge21zZzsgX30gPSBCRGVjb2Rlci5kZWNvZGVfZmFpbCBkZWNvZGVyIChFbmNvZGVyLmVuY29kZSBlbmNvZGVyKSBpbiBtYXAgbXNnXG4gICAgICAgICAgICAgfCBIYW5kbGVyIChDdXN0b21FdmVudCBmKSwgQ3VzdG9tIGUgLT4gZiBlXG4gICAgICAgICAgICAgfCBfIC0+IE5vbmVcbiAgICAgICAgICAgaW5cbiAgICAgICAgICAgbGV0IG1zZ3MgPSBMaXN0LmZpbHRlcl9tYXAgc2VsZWN0X2hhbmRsZXIgYXR0cmlidXRlcyBpblxuICAgICAgICAgICBMaXN0Lml0ZXIgKGZ1biBtc2cgLT4gcHJvY2VzcyAobWFwcGVyIG1zZykpIG1zZ3NcbiAgICAgICAgIGluXG4gICAgICAgICBiZWdpbiBtYXRjaCB2ZG9tX29mX2RvbSByb290IHRndCB3aXRoXG4gICAgICAgICB8IEZvdW5kIHttYXBwZXI7IGlubmVyID0gQkVsZW1lbnQge3Zkb20gPSBFbGVtZW50IHthdHRyaWJ1dGVzOyBffTsgX307IF99IC0+XG4gICAgICAgICAgICAgcHJvY2VzcyBtYXBwZXIgYXR0cmlidXRlc1xuICAgICAgICAgfCBGb3VuZCB7bWFwcGVyOyBpbm5lciA9IEJDdXN0b20gIHt2ZG9tID0gQ3VzdG9tICB7YXR0cmlidXRlczsgX307IF99OyBffSAtPlxuICAgICAgICAgICAgIHByb2Nlc3MgbWFwcGVyIGF0dHJpYnV0ZXNcbiAgICAgICAgIHwgXyAtPlxuICAgICAgICAgICAgICgpXG4gICAgICAgICBlbmRcbiAgICAgICkgIWN1cnJlbnRcbiAgICAgICgqIERvIHdlIG5lZWQgdG8gZG8gc29tZXRoaW5nIHNpbWlsYXIgdG8gdGhlIFwiaW5wdXRcIiBjYXNlIGluIG9uX2V2ZW50PyAqKVxuICBpblxuICBwcm9jZXNzX2N1c3RvbV9md2QgOj0gcHJvY2Vzc19jdXN0b207XG5cbiAgcnVuX2NtZCBjb250YWluZXIgY21kMDtcbiAgbGV0IGRpc3Bvc2UgKCkgPVxuICAgIE9wdGlvbi5pdGVyXG4gICAgICAoZnVuIHJvb3QgLT5cbiAgICAgICAgIGN1cnJlbnQgOj0gTm9uZTtcbiAgICAgICAgIGRpc3Bvc2Ugcm9vdDtcbiAgICAgICAgIEhhc2h0YmwuaXRlciAoZnVuIF8gZiAtPiBmICgpKSBsaXN0ZW5lcnM7XG4gICAgICAgICBpZiBjb250YWluZXJfY3JlYXRlZCB0aGVuXG4gICAgICAgICAgIEVsZW1lbnQucmVtb3ZlIGNvbnRhaW5lclxuICAgICAgICAgZWxzZVxuICAgICAgICAgICBFbGVtZW50LnNldF9pbm5lcl9IVE1MIGNvbnRhaW5lciBcIlwiXG4gICAgICApICFjdXJyZW50XG4gIGluXG4gIHtkb20gPSBjb250YWluZXI7IHByb2Nlc3M7IGdldCA9IChmdW4gKCkgLT4gIW1vZGVsKTsgYWZ0ZXJfcmVkcmF3OyBkaXNwb3NlfVxuXG5sZXQgZGlzcG9zZSB7ZGlzcG9zZTsgX30gPSBkaXNwb3NlICgpXG4iXX0=
