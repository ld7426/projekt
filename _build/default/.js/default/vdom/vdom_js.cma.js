// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.2

//# unitInfo: Provides: Js_browser
//# unitInfo: Requires: Ojs, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Array = "Array",
    cst_Date = "Date",
    cst_JSON = "JSON",
    cst_URL = "URL",
    cst_Uint8Array = "Uint8Array",
    cst_binaryType = "binaryType",
    cst_blur = "blur",
    cst_bottom = "bottom",
    cst_challenge = "challenge",
    cst_checked = "checked",
    cst_className = "className",
    cst_click = "click",
    cst_clientDataJSON = "clientDataJSON",
    cst_close = "close",
    cst_code = "code",
    cst_cookie = "cookie",
    cst_credentials = "credentials",
    cst_document = "document",
    cst_files = "files",
    cst_firstChild = "firstChild",
    cst_focus = "focus",
    cst_hash = "hash",
    cst_height = "height",
    cst_host = "host",
    cst_hostname = "hostname",
    cst_href = "href",
    cst_id = "id",
    cst_innerHTML = "innerHTML",
    cst_key = "key",
    cst_left = "left",
    cst_length = "length",
    cst_lib_js_browser_ml = "lib/js_browser.ml",
    cst_location = "location",
    cst_name = "name",
    cst_navigator = "navigator",
    cst_nodeValue = "nodeValue",
    cst_onload = "onload",
    cst_open = "open",
    cst_origin = "origin",
    cst_pathname = "pathname",
    cst_port = "port",
    cst_protocol = "protocol",
    cst_publicKey = "publicKey",
    cst_push = "push",
    cst_readyState = "readyState",
    cst_response = "response",
    cst_responseType = "responseType",
    cst_result = "result",
    cst_right = "right",
    cst_scrollTop = "scrollTop",
    cst_search = "search",
    cst_select = "select",
    cst_selectionEnd = "selectionEnd",
    cst_selectionStart = "selectionStart",
    cst_submit = "submit",
    cst_timeout = "timeout",
    cst_top = "top",
    cst_type = "type",
    cst_userVerification = "userVerification",
    cst_value = "value",
    cst_width = "width",
    cst_window = "window",
    caml_js_from_string = runtime.caml_js_from_string,
    caml_js_to_string = runtime.caml_js_to_string,
    caml_js_wrap_callback_strict = runtime.caml_js_wrap_callback_strict,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ojs_new_arr = runtime.caml_ojs_new_arr;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Ojs = global_data.Ojs,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List;
   function then(error, success, param){
    var ojs = param[2], alpha_of_js = param[1];
    function x1(x){return caml_call1(success, caml_call1(alpha_of_js, x));}
    ojs.then
     (caml_js_wrap_callback_strict(1, x1),
      caml_call2
       (Ojs[8],
        function(x4){return caml_js_wrap_callback_strict(1, x4);},
        error));
    return 0;
   }
   function t_of_js(x8){return x8;}
   function t_to_js(x7){return x7;}
   function length(x9){return x9[cst_length];}
   function key(x11){
    return function(x10){
     var _ak_ = x11.key(x10);
     return caml_call2(Ojs[7], caml_js_to_string, _ak_);};
   }
   function get_item(x14){
    return function(x13){
     var _aj_ = x14.getItem(caml_js_from_string(x13));
     return caml_call2(Ojs[7], caml_js_to_string, _aj_);};
   }
   function set_item(x18){
    return function(x16){
     return function(x17){
      x18.setItem(caml_js_from_string(x16), caml_js_from_string(x17));
      return 0;};};
   }
   function remove_item(x20){
    return function(x19){x20.removeItem(caml_js_from_string(x19)); return 0;};
   }
   function clear(x21){x21.clear(); return 0;}
   var
    Storage =
      [0,
       t_of_js,
       t_to_js,
       length,
       key,
       get_item,
       set_item,
       remove_item,
       clear];
   function t_of_js$0(x23){return x23;}
   function t_to_js$0(x22){return x22;}
   function new_reg_exp(x24){
    return function(x25){
     return function(param){
      var x26 = new Ojs[19][cst_Array];
      x26.push(caml_js_from_string(x24));
      if(x25){var x27 = x25[1]; x26.push(caml_js_from_string(x27));}
      var x23 = caml_ojs_new_arr(Ojs[19]["RegExp"], x26);
      return x23;};};
   }
   var RegExp = [0, t_of_js$0, t_to_js$0, new_reg_exp];
   function t_of_js$1(x29){return x29;}
   function t_to_js$1(x28){return x28;}
   var of_string = caml_js_from_string, to_string = caml_js_to_string;
   function length$0(x30){return x30[cst_length];}
   function char_code_at(x32){
    return function(x31){return x32.charCodeAt(x31);};
   }
   function to_lower_case(x33){var x29 = x33.toLowerCase(); return x29;}
   function to_upper_case(x34){var x29 = x34.toUpperCase(); return x29;}
   function concat(x38){
    return function(x35){
     var x36 = new Ojs[19][cst_Array];
     caml_call2(Stdlib_List[18], function(x37){x36.push(x37); return 0;}, x35);
     var x29 = x38["concat"].apply(x38, x36);
     return x29;};
   }
   function includes(x41){
    return function(x40){return x41.includes(x40) | 0;};
   }
   function ends_with(x43){
    return function(x42){return x43.endsWith(x42) | 0;};
   }
   function index_of(x45){return function(x44){return x45.indexOf(x44);};}
   function repeat(x47){
    return function(x46){var x29 = x47.repeat(x46); return x29;};
   }
   function search(x49){
    return function(x48){return x49.search(caml_call1(RegExp[2], x48));};
   }
   function trim(x50){var x29 = x50.trim(); return x29;}
   var
    JsString =
      [0,
       t_of_js$1,
       t_to_js$1,
       of_string,
       to_string,
       length$0,
       char_code_at,
       to_lower_case,
       to_upper_case,
       concat,
       includes,
       ends_with,
       index_of,
       repeat,
       search,
       trim];
   function t_of_js$2(x52){return x52;}
   function t_to_js$2(x51){return x51;}
   function new_date(x53){var x52 = new Ojs[19][cst_Date](x53); return x52;}
   function now(param){return Ojs[19][cst_Date].now();}
   function parse(x54){
    var _ai_ = caml_js_from_string(x54), x52 = Ojs[19][cst_Date].parse(_ai_);
    return x52;
   }
   function get_date(x55){return x55.getDate();}
   function get_day(x56){return x56.getDay();}
   function get_full_year(x57){return x57.getFullYear();}
   function get_hours(x58){return x58.getHours();}
   function get_milliseconds(x59){return x59.getMilliseconds();}
   function get_minutes(x60){return x60.getMinutes();}
   function get_month(x61){return x61.getMonth();}
   function get_seconds(x62){return x62.getSeconds();}
   function get_time(x63){return x63.getTime();}
   function get_timezone_offset(x64){return x64.getTimezoneOffset();}
   function get_UTC_date(x65){return x65.getUTCDate();}
   function get_UTC_day(x66){return x66.getUTCDay();}
   function get_UTC_full_year(x67){return x67.getUTCFullYear();}
   function get_UTC_hours(x68){return x68.getUTCHours();}
   function get_UTC_milliseconds(x69){return x69.getUTCMilliseconds();}
   function get_UTC_minutes(x70){return x70.getUTCMinutes();}
   function get_UTC_month(x71){return x71.getUTCMonth();}
   function get_UTC_seconds(x72){return x72.getUTCSeconds();}
   function get_year(x73){return x73.getYear();}
   function set_date(x75){return function(x74){x75.setDate(x74); return 0;};}
   function set_full_year(x77){
    return function(x76){x77.setFullYear(x76); return 0;};
   }
   function set_hours(x79){
    return function(x78){x79.setHours(x78); return 0;};
   }
   function set_milliseconds(x81){
    return function(x80){x81.setMilliseconds(x80); return 0;};
   }
   function set_minutes(x83){
    return function(x82){x83.setMinutes(x82); return 0;};
   }
   function set_month(x85){
    return function(x84){x85.setMonth(x84); return 0;};
   }
   function set_seconds(x87){
    return function(x86){x87.setSeconds(x86); return 0;};
   }
   function set_time(x89){return function(x88){x89.setTime(x88); return 0;};}
   function set_UTC_date(x91){
    return function(x90){x91.setUTCDate(x90); return 0;};
   }
   function set_UTC_full_year(x93){
    return function(x92){x93.setUTCFullYear(x92); return 0;};
   }
   function set_UTC_hours(x95){
    return function(x94){x95.setUTCHours(x94); return 0;};
   }
   function set_UTC_milliseconds(x97){
    return function(x96){x97.setUTCMilliseconds(x96); return 0;};
   }
   function set_UTC_minutes(x99){
    return function(x98){x99.setUTCMinutes(x98); return 0;};
   }
   function set_UTC_month(x101){
    return function(x100){x101.setUTCMonth(x100); return 0;};
   }
   function set_UTC_seconds(x103){
    return function(x102){x103.setUTCSeconds(x102); return 0;};
   }
   function set_year(x105){
    return function(x104){x105.setYear(x104); return 0;};
   }
   function to_date_string(x106){
    return caml_js_to_string(x106.toDateString());
   }
   function to_GMT_string(x107){return caml_js_to_string(x107.toGMTString());}
   function to_ISO_string(x108){return caml_js_to_string(x108.toISOString());}
   function to_locale_string(x109){
    return caml_js_to_string(x109.toLocaleString());
   }
   function to_string$0(x110){return caml_js_to_string(x110.toString());}
   function to_time_string(x111){
    return caml_js_to_string(x111.toTimeString());
   }
   function to_UTC_string(x112){return caml_js_to_string(x112.toUTCString());}
   var
    Date =
      [0,
       t_of_js$2,
       t_to_js$2,
       new_date,
       now,
       parse,
       get_date,
       get_day,
       get_full_year,
       get_hours,
       get_milliseconds,
       get_minutes,
       get_month,
       get_seconds,
       get_time,
       get_timezone_offset,
       get_UTC_date,
       get_UTC_day,
       get_UTC_full_year,
       get_UTC_hours,
       get_UTC_milliseconds,
       get_UTC_minutes,
       get_UTC_month,
       get_UTC_seconds,
       get_year,
       set_date,
       set_full_year,
       set_hours,
       set_milliseconds,
       set_minutes,
       set_month,
       set_seconds,
       set_time,
       set_UTC_date,
       set_UTC_full_year,
       set_UTC_hours,
       set_UTC_milliseconds,
       set_UTC_minutes,
       set_UTC_month,
       set_UTC_seconds,
       set_year,
       to_date_string,
       to_GMT_string,
       to_ISO_string,
       to_locale_string,
       to_string$0,
       to_time_string,
       to_UTC_string];
   function t_of_js$3(x114){return x114;}
   function t_to_js$3(x113){return x113;}
   function create(x115){
    var x114 = new Ojs[19]["ArrayBuffer"](x115);
    return x114;
   }
   var ArrayBuffer = [0, t_of_js$3, t_to_js$3, create];
   function options(x118){
    return function(x119){
     return function(param){
      var x120 = caml_call1(Ojs[11], 0);
      if(x118){
       var x122 = x118[1];
       x120[cst_type] = caml_js_from_string(x122);
      }
      if(x119){
       var x121 = x119[1];
       x120["endings"] = caml_js_from_string(x121);
      }
      return x120;};};
   }
   function t_of_js$4(x124){return x124;}
   function t_to_js$4(x123){return x123;}
   function create$0(x125){
    return function(x126){
     return function(param){
      var x127 = new Ojs[19][cst_Array];
      x127.push(caml_call2(Ojs[4], function(x129){return x129;}, x125));
      if(x126){var x128 = x126[1]; x127.push(x128);}
      var x124 = caml_ojs_new_arr(Ojs[19]["Blob"], x127);
      return x124;};};
   }
   function size(x130){return x130["size"];}
   function type(x131){return caml_js_to_string(x131[cst_type]);}
   function text(x132){
    return function(param){
     var x = x132.text(), f = caml_js_to_string;
     return [0, f, x];};
   }
   function t_of_js$5(x135){return x135;}
   function t_to_js$5(x134){return x134;}
   function options$0(x138){
    return function(x139){
     return function(param){
      var x140 = caml_call1(Ojs[11], 0);
      if(x138){
       var x142 = x138[1];
       x140[cst_type] = caml_js_from_string(x142);
      }
      if(x139){var x141 = x139[1]; x140["lastModified"] = x141;}
      return x140;};};
   }
   function create$1(x143){
    return function(x145){
     return function(x146){
      var
       _ag_ = caml_js_from_string(x145),
       _ah_ = caml_call2(Ojs[2], t_to_js$4, x143),
       x135 = new Ojs[19]["File"](_ah_, _ag_, x146);
      return x135;};};
   }
   function name(x147){return caml_js_to_string(x147[cst_name]);}
   function t_of_js$6(x149){return x149;}
   function t_to_js$6(x148){return x148;}
   function files(x150){
    var _af_ = x150[cst_files];
    return caml_call2(Ojs[3], t_of_js$5, _af_);
   }
   function get_data(x153){
    return function(x152){
     return caml_js_to_string(x153.getData(caml_js_from_string(x152)));};
   }
   var DataTransfer = [0, t_of_js$6, t_to_js$6, files, get_data];
   function t_of_js$7(x155){return x155;}
   function t_to_js$7(x154){return x154;}
   function kind_to_js(x156){
    if(typeof x156 !== "number"){
     var x157 = x156[1];
     return caml_js_from_string(x157);
    }
    var _ae_ = x156;
    if(88 <= _ae_){
     if(132 <= _ae_)
      switch(_ae_){
        case 132:
         return "resume";
        case 133:
         return "scroll";
        case 134:
         return "seeked";
        case 135:
         return "seeking";
        case 136:
         return cst_select;
        case 137:
         return "selectionchange";
        case 138:
         return "selectstart";
        case 139:
         return "show";
        case 140:
         return "slotchange";
        case 141:
         return "soundend";
        case 142:
         return "soundstart";
        case 143:
         return "speechend";
        case 144:
         return "speechstart";
        case 145:
         return "stalled";
        case 146:
         return "start";
        case 147:
         return "storage";
        case 148:
         return cst_submit;
        case 149:
         return "success";
        case 150:
         return "suspend";
        case 151:
         return "SVGAbort";
        case 152:
         return "SVGError";
        case 153:
         return "SVGLoad";
        case 154:
         return "SVGResize";
        case 155:
         return "SVGScroll";
        case 156:
         return "SVGUnload";
        case 157:
         return "SVGZoom";
        case 158:
         return cst_timeout;
        case 159:
         return "timeupdate";
        case 160:
         return "touchcancel";
        case 161:
         return "touchend";
        case 162:
         return "touchmove";
        case 163:
         return "touchstart";
        case 164:
         return "transitionend";
        case 165:
         return "unload";
        case 166:
         return "updateready";
        case 167:
         return "upgradeneeded";
        case 168:
         return "userproximity";
        case 169:
         return "versionchange";
        case 170:
         return "visibilitychange";
        case 171:
         return "voiceschanged";
        case 172:
         return "volumechange";
        case 173:
         return "waiting";
        default: return "wheel";
      }
     switch(_ae_){
       case 88:
        return "message";
       case 89:
        return "messageerror";
       case 90:
        return "mousedown";
       case 91:
        return "mouseenter";
       case 92:
        return "mouseleave";
       case 93:
        return "mousemove";
       case 94:
        return "mouseout";
       case 95:
        return "mouseover";
       case 96:
        return "mouseup";
       case 97:
        return "nomatch";
       case 98:
        return "notificationclick";
       case 99:
        return "noupdate";
       case 100:
        return "obsolete";
       case 101:
        return "offline";
       case 102:
        return "online";
       case 103:
        return cst_open;
       case 104:
        return "orientationchange";
       case 105:
        return "pagehide";
       case 106:
        return "pageshow";
       case 107:
        return "paste";
       case 108:
        return "pause";
       case 109:
        return "play";
       case 110:
        return "playing";
       case 111:
        return "pointercancel";
       case 112:
        return "pointerdown";
       case 113:
        return "pointerenter";
       case 114:
        return "pointerleave";
       case 115:
        return "pointerlockchange";
       case 116:
        return "pointerlockerror";
       case 117:
        return "pointermove";
       case 118:
        return "pointerout";
       case 119:
        return "pointerover";
       case 120:
        return "pointerup";
       case 121:
        return "popstate";
       case 122:
        return "progress";
       case 123:
        return cst_push;
       case 124:
        return "pushsubscriptionchange";
       case 125:
        return "ratechange";
       case 126:
        return "readystatechange";
       case 127:
        return "repeatEvent";
       case 128:
        return "reset";
       case 129:
        return "resize";
       case 130:
        return "resourcetimingbufferfull";
       default: return cst_result;
     }
    }
    if(44 <= _ae_)
     switch(_ae_){
       case 44:
        return "DOMFocusIn";
       case 45:
        return "DOMFocusOut";
       case 46:
        return "DOMNodeInserted";
       case 47:
        return "DOMNodeInsertedIntoDocument";
       case 48:
        return "DOMNodeRemoved";
       case 49:
        return "DOMNodeRemovedFromDocument";
       case 50:
        return "DOMSubtreeModified";
       case 51:
        return "downloading";
       case 52:
        return "drag";
       case 53:
        return "dragend";
       case 54:
        return "dragenter";
       case 55:
        return "dragleave";
       case 56:
        return "dragover";
       case 57:
        return "dragstart";
       case 58:
        return "drop";
       case 59:
        return "durationchange";
       case 60:
        return "emptied";
       case 61:
        return "end";
       case 62:
        return "ended";
       case 63:
        return "endEvent";
       case 64:
        return "error";
       case 65:
        return cst_focus;
       case 66:
        return "focusin";
       case 67:
        return "focusout";
       case 68:
        return "fullscreenchange";
       case 69:
        return "fullscreenerror";
       case 70:
        return "gamepadconnected";
       case 71:
        return "gamepaddisconnected";
       case 72:
        return "gotpointercapture";
       case 73:
        return "hashchange";
       case 74:
        return "input";
       case 75:
        return "invalid";
       case 76:
        return "keydown";
       case 77:
        return "keypress";
       case 78:
        return "keyup";
       case 79:
        return "languagechange";
       case 80:
        return "levelchange";
       case 81:
        return "load";
       case 82:
        return "loadeddata";
       case 83:
        return "loadedmetadata";
       case 84:
        return "loadend";
       case 85:
        return "loadstart";
       case 86:
        return "lostpointercapture";
       default: return "mark";
     }
    switch(_ae_){
      case 0:
       return "abort";
      case 1:
       return "afterprint";
      case 2:
       return "animationend";
      case 3:
       return "animationiteration";
      case 4:
       return "animationstart";
      case 5:
       return "appinstalled";
      case 6:
       return "audioend";
      case 7:
       return "audioprocess";
      case 8:
       return "audiostart";
      case 9:
       return "beforeprint";
      case 10:
       return "beforeunload";
      case 11:
       return "beginEvent";
      case 12:
       return "blocked";
      case 13:
       return cst_blur;
      case 14:
       return "boundary";
      case 15:
       return "cached";
      case 16:
       return "canplay";
      case 17:
       return "canplaythrough";
      case 18:
       return "change";
      case 19:
       return "chargingchange";
      case 20:
       return "chargingtimechange";
      case 21:
       return "checking";
      case 22:
       return cst_click;
      case 23:
       return cst_close;
      case 24:
       return "complete";
      case 25:
       return "compositionend";
      case 26:
       return "compositionstart";
      case 27:
       return "compositionupdate";
      case 28:
       return "contextmenu";
      case 29:
       return "copy";
      case 30:
       return "cut";
      case 31:
       return "dblclick";
      case 32:
       return "devicechange";
      case 33:
       return "devicelight";
      case 34:
       return "devicemotion";
      case 35:
       return "deviceorientation";
      case 36:
       return "deviceproximity";
      case 37:
       return "dischargingtimechange";
      case 38:
       return "DOMActivate";
      case 39:
       return "DOMAttributeNameChanged";
      case 40:
       return "DOMAttrModified";
      case 41:
       return "DOMCharacterDataModified";
      case 42:
       return "DOMContentLoaded";
      default: return "DOMElementNameChanged";
    }
   }
   function target(x161){return x161["target"];}
   function related_target(x162){
    var _ad_ = x162["relatedTarget"];
    return caml_call2(Ojs[7], function(x163){return x163;}, _ad_);
   }
   function prevent_default(x164){x164.preventDefault(); return 0;}
   function stop_propagation(x165){x165.stopPropagation(); return 0;}
   function type$0(x166){return caml_js_to_string(x166[cst_type]);}
   function init_event(x170){
    return function(x167){
     return function(x168){
      return function(x169){
       x170.initEvent(kind_to_js(x167), ! ! x168, ! ! x169);
       return 0;};};};
   }
   function client_x(x171){return x171["clientX"];}
   function client_y(x172){return x172["clientY"];}
   function page_x(x173){return x173["pageX"];}
   function page_y(x174){return x174["pageY"];}
   function screen_x(x175){return x175["screenX"];}
   function screen_y(x176){return x176["screenY"];}
   function movement_x(x177){return x177["movementX"];}
   function movement_y(x178){return x178["movementY"];}
   function buttons(x179){return x179["buttons"];}
   function alt_key(x180){return x180["altKey"] | 0;}
   function ctrl_key(x181){return x181["ctrlKey"] | 0;}
   function shift_key(x182){return x182["shiftKey"] | 0;}
   function which(x183){return x183["which"];}
   function code(x184){return caml_js_to_string(x184[cst_code]);}
   function key$0(x185){return caml_js_to_string(x185[cst_key]);}
   function delta_y(x186){return x186["deltaY"];}
   function delta_x(x187){return x187["deltaX"];}
   function data_transfer(x188){
    var _ac_ = x188["dataTransfer"];
    return caml_call1(DataTransfer[1], _ac_);
   }
   function clipboard_data(x189){
    var _ab_ = x189["clipboardData"];
    return caml_call1(DataTransfer[1], _ab_);
   }
   function data(x190){return x190["data"];}
   function origin(x191){return caml_js_to_string(x191[cst_origin]);}
   function state(x192){return x192["state"];}
   function t_of_js$8(x194){return x194;}
   function t_to_js$8(x193){return x193;}
   function height(x195){return x195[cst_height];}
   function width(x196){return x196[cst_width];}
   function left(x197){return x197[cst_left];}
   function right(x198){return x198[cst_right];}
   function top(x199){return x199[cst_top];}
   function bottom(x200){return x200[cst_bottom];}
   var
    Rect = [0, t_of_js$8, t_to_js$8, height, width, left, right, top, bottom];
   function t_of_js$9(x202){return x202;}
   function t_to_js$9(x201){return x201;}
   function x(x203){return x203["x"];}
   function y(x204){return x204["y"];}
   function height$0(x205){return x205[cst_height];}
   function width$0(x206){return x206[cst_width];}
   var SVGRect = [0, t_of_js$9, t_to_js$9, x, y, height$0, width$0];
   function t_of_js$10(x208){return x208;}
   function t_to_js$10(x207){return x207;}
   function set(style, prop, value){
    return style[prop] = caml_js_from_string(value);
   }
   function set_color(x209){
    return function(x210){return x209["color"] = caml_js_from_string(x210);};
   }
   function set_border(x211){
    return function(x212){return x211["border"] = caml_js_from_string(x212);};
   }
   function set_background(x213){
    return function(x214){
     return x213["background"] = caml_js_from_string(x214);};
   }
   function set_background_color(x215){
    return function(x216){
     return x215["backgroundColor"] = caml_js_from_string(x216);};
   }
   function set_height(x217){
    return function(x218){
     return x217[cst_height] = caml_js_from_string(x218);};
   }
   function set_width(x219){
    return function(x220){
     return x219[cst_width] = caml_js_from_string(x220);};
   }
   function set_bottom(x221){
    return function(x222){
     return x221[cst_bottom] = caml_js_from_string(x222);};
   }
   function set_left(x223){
    return function(x224){return x223[cst_left] = caml_js_from_string(x224);};
   }
   function set_top(x225){
    return function(x226){return x225[cst_top] = caml_js_from_string(x226);};
   }
   function set_right(x227){
    return function(x228){
     return x227[cst_right] = caml_js_from_string(x228);};
   }
   function set_position(x229){
    return function(x230){
     return x229["position"] = caml_js_from_string(x230);};
   }
   function set_cursor(x231){
    return function(x232){return x231["cursor"] = caml_js_from_string(x232);};
   }
   function set_display(x233){
    return function(x234){
     return x233["display"] = caml_js_from_string(x234);};
   }
   function set_visibility(x235){
    return function(x236){
     return x235["visibility"] = caml_js_from_string(x236);};
   }
   function get(style, prop){return caml_js_to_string(style[prop]);}
   function unset(style, prop){return style[prop] = Ojs[20];}
   var
    Style =
      [0,
       t_of_js$10,
       t_to_js$10,
       set,
       set_color,
       set_border,
       set_background,
       set_background_color,
       set_height,
       set_width,
       set_bottom,
       set_left,
       set_top,
       set_right,
       set_position,
       set_cursor,
       set_display,
       set_visibility,
       get,
       unset];
   function t_of_js$11(x238){return x238;}
   function t_to_js$11(x237){return x237;}
   function add(x240){
    return function(x239){x240.add(caml_js_from_string(x239)); return 0;};
   }
   function remove(x242){
    return function(x241){x242.remove(caml_js_from_string(x241)); return 0;};
   }
   function contains(x244){
    return function(x243){
     return x244.contains(caml_js_from_string(x243)) | 0;};
   }
   function replace(x247){
    return function(x245){
     return function(x246){
      x247.replace(caml_js_from_string(x245), caml_js_from_string(x246));
      return 0;};};
   }
   function toggle(x250){
    return function(x248){
     return function(x249){
      return x250.toggle(caml_js_from_string(x248), ! ! x249) | 0;};};
   }
   var
    ClassList =
      [0, t_of_js$11, t_to_js$11, add, remove, contains, replace, toggle];
   function t_of_js$12(x252){return x252;}
   function t_to_js$12(x251){return x251;}
   var null$0 = Ojs[20], _a_ = [0, cst_lib_js_browser_ml, 1231, 15];
   function id(x253){return caml_js_to_string(x253[cst_id]);}
   function set_id(x254){
    return function(x255){return x254[cst_id] = caml_js_from_string(x255);};
   }
   function node_type(x259){
    var x257 = x259["nodeType"], switcher = x257 - 1 | 0;
    if(10 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return 0;
       case 2:
        return 1;
       case 6:
        return 2;
       case 7:
        return 3;
       case 8:
        return 4;
       case 9:
        return 5;
       case 10:
        return 6;
     }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function clone_node(x261){
    return function(x260){var x252 = x261.cloneNode(! ! x260); return x252;};
   }
   function contains$0(x263){
    return function(x262){return x263.contains(x262) | 0;};
   }
   function append_child(x265){
    return function(x264){x265.appendChild(x264); return 0;};
   }
   function insert_before(x268){
    return function(x266){
     return function(x267){x268.insertBefore(x266, x267); return 0;};};
   }
   function replace_child(x271){
    return function(x269){
     return function(x270){x271.replaceChild(x269, x270); return 0;};};
   }
   function remove_child(x273){
    return function(x272){x273.removeChild(x272); return 0;};
   }
   function first_child(x274){var x252 = x274[cst_firstChild]; return x252;}
   function last_child(x275){var x252 = x275["lastChild"]; return x252;}
   function next_sibling(x276){var x252 = x276["nextSibling"]; return x252;}
   function remove_all_children(x274){
    var child$1 = x274[cst_firstChild], child = child$1;
    for(;;){
     if(runtime.caml_equal(child, null$0)) return 0;
     remove_child(x274)(child);
     var child$0 = x274[cst_firstChild];
     child = child$0;
    }
   }
   function has_child_nodes(x277){return x277.hasChildNodes() | 0;}
   function add_event_listener(x282){
    return function(x278){
     return function(x279){
      return function(x281){
       x282.addEventListener
        (kind_to_js(x278),
         caml_js_wrap_callback_strict
          (1, function(x280){return caml_call1(x279, x280);}),
         ! ! x281);
       return 0;};};};
   }
   function add_cancellable_event_listener(x286, x283, f, c){
    var
     x284 =
       caml_js_wrap_callback_strict
        (1, function(x155){return caml_call1(f, x155);});
    (function(x285){
       x286.addEventListener(kind_to_js(x283), x284, ! ! x285);
       return;
      }
      (c));
    return function(param){
     return function(x289){
              x286.removeEventListener(kind_to_js(x283), x284, ! ! x289);
              return 0;
             }
             (c);};
   }
   function inner_text(x291){return caml_js_to_string(x291["innerText"]);}
   function get_elements_by_tag_name(x293){
    return function(x292){
     var _aa_ = x293.getElementsByTagName(caml_js_from_string(x292));
     return caml_call2(Ojs[1], t_of_js$12, _aa_);};
   }
   function get_elements_by_class_name(x296){
    return function(x295){
     var _$_ = x296.getElementsByClassName(caml_js_from_string(x295));
     return caml_call2(Ojs[1], t_of_js$12, _$_);};
   }
   function has_attribute(x299){
    return function(x298){
     return x299.hasAttribute(caml_js_from_string(x298)) | 0;};
   }
   function get_attribute(x301){
    return function(x300){
     return caml_js_to_string(x301.getAttribute(caml_js_from_string(x300)));};
   }
   function remove_attribute(x303){
    return function(x302){
     x303.removeAttribute(caml_js_from_string(x302));
     return 0;};
   }
   function set_attribute(x306){
    return function(x304){
     return function(x305){
      x306.setAttribute(caml_js_from_string(x304), caml_js_from_string(x305));
      return 0;};};
   }
   function get_bounding_client_rect(x307){
    var ___ = x307.getBoundingClientRect();
    return caml_call1(Rect[1], ___);
   }
   function get_bounding_box(x308){
    var _Z_ = x308.getBBox();
    return caml_call1(SVGRect[1], _Z_);
   }
   function attach_shadow(mode, element){
    var
     _Y_ = mode ? "closed" : cst_open,
     x252 = element.attachShadow({mode: _Y_});
    return x252;
   }
   function normalize(x316){x316.normalize(); return 0;}
   function value(x317){return caml_js_to_string(x317[cst_value]);}
   function set_value(x318){
    return function(x319){
     return x318[cst_value] = caml_js_from_string(x319);};
   }
   function select(x320){x320.select(); return 0;}
   function files$0(x321){
    var _X_ = x321[cst_files];
    return caml_call2(Ojs[3], t_of_js$5, _X_);
   }
   function submit(x323){x323.submit(); return 0;}
   function show_picker(x324){x324.showPicker(); return 0;}
   function selected_index(x325){return x325["selectedIndex"];}
   function checked(x326){return x326[cst_checked] | 0;}
   function set_checked(x327){
    return function(x328){return x327[cst_checked] = ! ! x328;};
   }
   function node_value(x329){return caml_js_to_string(x329[cst_nodeValue]);}
   function set_node_value(x330){
    return function(x331){
     return x330[cst_nodeValue] = caml_js_from_string(x331);};
   }
   function parent_node(x332){var x252 = x332["parentNode"]; return x252;}
   function node_name(x333){return caml_js_to_string(x333["nodeName"]);}
   function dispatch_event(x335){
    return function(x334){return x335.dispatchEvent(x334) | 0;};
   }
   function style(x336){
    var _W_ = x336["style"];
    return caml_call1(Style[1], _W_);
   }
   function inner_HTML(x337){return caml_js_to_string(x337[cst_innerHTML]);}
   function outer_HTML(x338){return caml_js_to_string(x338["outerHTML"]);}
   function set_inner_HTML(x339){
    return function(x340){
     return x339[cst_innerHTML] = caml_js_from_string(x340);};
   }
   function set_text_content(x341){
    return function(x342){
     return x341["textContent"] = caml_js_from_string(x342);};
   }
   function set_class_name(x343){
    return function(x344){
     return x343[cst_className] = caml_js_from_string(x344);};
   }
   function class_name(x345){return caml_js_to_string(x345[cst_className]);}
   function client_width(x346){return x346["clientWidth"];}
   function client_height(x347){return x347["clientHeight"];}
   function scroll_width(x348){return x348["scrollWidth"];}
   function scroll_height(x349){return x349["scrollHeight"];}
   function width$1(x350){return x350[cst_width];}
   function height$1(x351){return x351[cst_height];}
   function offset_parent(x352){
    var _V_ = x352["offsetParent"];
    return caml_call2(Ojs[7], t_of_js$12, _V_);
   }
   function offset_top(x354){return x354["offsetTop"];}
   function offset_left(x355){return x355["offsetLeft"];}
   function offset_width(x356){return x356["offsetWidth"];}
   function offset_height(x357){return x357["offsetHeight"];}
   function scroll_top(x358){return x358[cst_scrollTop];}
   function set_scroll_top(x359){
    return function(x360){return x359[cst_scrollTop] = x360;};
   }
   function scroll_into_view(x362){
    return function(x361){x362.scrollIntoView(! ! x361); return 0;};
   }
   function focus(x363){x363.focus(); return 0;}
   function blur(x364){x364.blur(); return 0;}
   function behavior_to_js(x369){
    switch(x369){
      case 0:
       return "auto";
      case 1:
       return "instant";
      default: return "smooth";
    }
   }
   function scroll_into_view_options(x373){
    return function(x372){
     x373.scrollIntoView
      ({behavior: caml_call2(Ojs[8], behavior_to_js, x372[1])});
     return 0;};
   }
   function scroll_by(x379){
    return function(x378){
     var _U_ = caml_call2(Ojs[8], behavior_to_js, x378[3]);
     x379.scrollBy({top: x378[1], left: x378[2], behavior: _U_});
     return 0;};
   }
   function selection_start(x380){return x380[cst_selectionStart];}
   function selection_end(x381){return x381[cst_selectionEnd];}
   function set_selection_start(x382){
    return function(x383){return x382[cst_selectionStart] = x383;};
   }
   function set_selection_end(x384){
    return function(x385){return x384[cst_selectionEnd] = x385;};
   }
   function remove$0(x386){x386.remove(); return 0;}
   function click(x387){x387.click(); return 0;}
   function query_selector(x389){
    return function(x388){
     var x252 = x389.querySelector(caml_js_from_string(x388));
     return x252;};
   }
   function query_selector_all(x391){
    return function(x390){
     var _T_ = x391.querySelectorAll(caml_js_from_string(x390));
     return caml_call2(Ojs[3], t_of_js$12, _T_);};
   }
   function class_list(x393){
    var _S_ = x393["classList"];
    return caml_call1(ClassList[1], _S_);
   }
   function t_of_js$13(x395){return x395;}
   function t_to_js$13(x394){return x394;}
   function create_element(x397){
    return function(x396){
     var x252 = x397.createElement(caml_js_from_string(x396));
     return x252;};
   }
   function create_element_ns(x400){
    return function(x398){
     return function(x399){
      var
       x252 =
         x400.createElementNS
          (caml_js_from_string(x398), caml_js_from_string(x399));
      return x252;};};
   }
   function create_text_node(x402){
    return function(x401){
     var x252 = x402.createTextNode(caml_js_from_string(x401));
     return x252;};
   }
   function create_event(x404){
    return function(x403){
     var x155 = x404.createEvent(caml_js_from_string(x403));
     return x155;};
   }
   function get_element_by_id(x406){
    return function(x405){
     var _R_ = x406.getElementById(caml_js_from_string(x405));
     return caml_call2(Ojs[7], t_of_js$12, _R_);};
   }
   function get_elements_by_class_name$0(x409){
    return function(x408){
     var _Q_ = x409.getElementsByClassName(caml_js_from_string(x408));
     return caml_call2(Ojs[1], t_of_js$12, _Q_);};
   }
   function body(x411){var x252 = x411["body"]; return x252;}
   function document_element(x412){
    var x252 = x412["documentElement"];
    return x252;
   }
   function active_element(x413){
    var x252 = x413["activeElement"];
    return x252;
   }
   function cookie(x414){return caml_js_to_string(x414[cst_cookie]);}
   function set_cookie(x415){
    return function(x416){
     return x415[cst_cookie] = caml_js_from_string(x416);};
   }
   function set_title(x417){
    return function(x418){return x417["title"] = caml_js_from_string(x418);};
   }
   function open(x424){
    return function(x419){
     return function(x420){
      return function(param){
       var x421 = new Ojs[19][cst_Array];
       if(x419){var x423 = x419[1]; x421.push(caml_js_from_string(x423));}
       if(x420){var x422 = x420[1]; x421.push(caml_js_from_string(x422));}
       x424[cst_open].apply(x424, x421);
       return 0;};};};
   }
   function write(x427){
    return function(x426){x427.write(caml_js_from_string(x426)); return 0;};
   }
   function writeln(x429){
    return function(x428){x429.writeln(caml_js_from_string(x428)); return 0;};
   }
   function close(x430){x430.close(); return 0;}
   function exec_command(x432){
    return function(x431){
     return x432.execCommand(caml_js_from_string(x431)) | 0;};
   }
   function query_selector$0(x434){
    return function(x433){
     var x252 = x434.querySelector(caml_js_from_string(x433));
     return x252;};
   }
   function query_selector_all$0(x436){
    return function(x435){
     var _P_ = x436.querySelectorAll(caml_js_from_string(x435));
     return caml_call2(Ojs[3], t_of_js$12, _P_);};
   }
   function remove_all_selection_ranges(x438){
    runtime.caml_js_meth_call(x438, "getSelection().removeAllRanges", [0]);
    return 0;
   }
   var
    Document =
      [0,
       t_of_js$13,
       t_to_js$13,
       create_element,
       create_element_ns,
       create_text_node,
       create_event,
       get_element_by_id,
       get_elements_by_class_name$0,
       body,
       document_element,
       active_element,
       cookie,
       set_cookie,
       set_title,
       open,
       write,
       writeln,
       close,
       exec_command,
       query_selector$0,
       query_selector_all$0,
       remove_all_selection_ranges];
   function t_of_js$14(x440){return x440;}
   function t_to_js$14(x439){return x439;}
   function length$1(x441){return x441[cst_length];}
   function back(x442){x442.back(); return 0;}
   function forward(x443){x443.forward(); return 0;}
   function go(x447){
    return function(x444){
     if(349440947 <= x444[1])
      var x445 = x444[2], x445$0 = x445;
     else
      var x446 = x444[2], x445$0 = caml_js_from_string(x446);
     x447.go(x445$0);
     return 0;};
   }
   function replace_state(x451){
    return function(x448){
     return function(x449){
      return function(x450){
       x451.replaceState
        (x448, caml_js_from_string(x449), caml_js_from_string(x450));
       return 0;};};};
   }
   function push_state(x455){
    return function(x452){
     return function(x453){
      return function(x454){
       x455.pushState
        (x452, caml_js_from_string(x453), caml_js_from_string(x454));
       return 0;};};};
   }
   var
    History =
      [0,
       t_of_js$14,
       t_to_js$14,
       length$1,
       back,
       forward,
       go,
       replace_state,
       push_state];
   function t_of_js$15(x457){return x457;}
   function t_to_js$15(x456){return x456;}
   function get_hash(param){
    return caml_js_to_string(Ojs[19][cst_location][cst_hash]);
   }
   function set_hash(x458){
    var _O_ = caml_js_from_string(x458);
    return Ojs[19][cst_location][cst_hash] = _O_;
   }
   function host(x459){return caml_js_to_string(x459[cst_host]);}
   function set_host(x460){
    return function(x461){return x460[cst_host] = caml_js_from_string(x461);};
   }
   function hostname(x462){return caml_js_to_string(x462[cst_hostname]);}
   function set_hostname(x463){
    return function(x464){
     return x463[cst_hostname] = caml_js_from_string(x464);};
   }
   function href(param){
    return caml_js_to_string(Ojs[19][cst_location][cst_href]);
   }
   function set_href(x465){
    var _N_ = caml_js_from_string(x465);
    return Ojs[19][cst_location][cst_href] = _N_;
   }
   function pathname(x466){return caml_js_to_string(x466[cst_pathname]);}
   function set_pathname(x467){
    return function(x468){
     return x467[cst_pathname] = caml_js_from_string(x468);};
   }
   function port(x469){return caml_js_to_string(x469[cst_port]);}
   function set_port(x470){
    return function(x471){return x470[cst_port] = caml_js_from_string(x471);};
   }
   function protocol(x472){return caml_js_to_string(x472[cst_protocol]);}
   function set_protocol(x473){
    return function(x474){
     return x473[cst_protocol] = caml_js_from_string(x474);};
   }
   function search$0(x475){return caml_js_to_string(x475[cst_search]);}
   function set_search(x476){
    return function(x477){
     return x476[cst_search] = caml_js_from_string(x477);};
   }
   function origin$0(x478){return caml_js_to_string(x478[cst_origin]);}
   function assign(x480){
    return function(x479){x480.assign(caml_js_from_string(x479)); return 0;};
   }
   function reload(x484){
    return function(x481){
     return function(param){
      var x482 = new Ojs[19][cst_Array];
      if(x481){var x483 = x481[1]; x482.push(! ! x483);}
      x484["reload"].apply(x484, x482);
      return 0;};};
   }
   function replace$0(x487){
    return function(x486){x487.replace(caml_js_from_string(x486)); return 0;};
   }
   var
    Location =
      [0,
       t_of_js$15,
       t_to_js$15,
       get_hash,
       set_hash,
       host,
       set_host,
       hostname,
       set_hostname,
       href,
       set_href,
       pathname,
       set_pathname,
       port,
       set_port,
       protocol,
       set_protocol,
       search$0,
       set_search,
       origin$0,
       assign,
       reload,
       replace$0];
   function t_of_js$16(x489){return x489;}
   function t_to_js$16(x488){return x488;}
   function add_event_listener$0(x498){
    return function(x494){
     return function(x495){
      return function(x497){
       x498.addEventListener
        (kind_to_js(x494),
         caml_js_wrap_callback_strict
          (1, function(x496){return caml_call1(x495, x496);}),
         ! ! x497);
       return 0;};};};
   }
   function add_cancellable_event_listener$0(x502, x499, f, c){
    var
     x500 =
       caml_js_wrap_callback_strict
        (1, function(x155){return caml_call1(f, x155);});
    (function(x501){
       x502.addEventListener(kind_to_js(x499), x500, ! ! x501);
       return;
      }
      (c));
    return function(param){
     return function(x505){
              x502.removeEventListener(kind_to_js(x499), x500, ! ! x505);
              return 0;
             }
             (c);};
   }
   function document(x507){
    var _M_ = x507[cst_document];
    return caml_call1(Document[1], _M_);
   }
   function set_onload(x508){
    return function(x509){
     return x508[cst_onload] =
             caml_js_wrap_callback_strict
              (1, function(param){return caml_call1(x509, 0);});};
   }
   function set_interval(x512){
    return function(x510){
     return function(x511){
      var
       x493 =
         x512.setInterval
          (caml_js_wrap_callback_strict
            (1, function(param){return caml_call1(x510, 0);}),
           x511);
      return x493;};};
   }
   function set_timeout(x515){
    return function(x513){
     return function(x514){
      var
       x491 =
         x515.setTimeout
          (caml_js_wrap_callback_strict
            (1, function(param){return caml_call1(x513, 0);}),
           x514);
      return x491;};};
   }
   function clear_timeout(x517){
    return function(x516){x517.clearTimeout(x516); return 0;};
   }
   function clear_interval(x519){
    return function(x518){x519.clearInterval(x518); return 0;};
   }
   function request_animation_frame(x522){
    return function(x520){
     x522.requestAnimationFrame
      (caml_js_wrap_callback_strict
        (1, function(x521){return caml_call1(x520, x521);}));
     return 0;};
   }
   function open$0(x532){
    return function(x523){
     return function(x524){
      return function(x525){
       return function(x526){
        return function(param){
         var x527 = new Ojs[19][cst_Array];
         if(x523){var x531 = x523[1]; x527.push(caml_js_from_string(x531));}
         if(x524){var x530 = x524[1]; x527.push(caml_js_from_string(x530));}
         if(x525){var x529 = x525[1]; x527.push(caml_js_from_string(x529));}
         if(x526){var x528 = x526[1]; x527.push(! ! x528);}
         var x489 = x532[cst_open].apply(x532, x527);
         return x489;};};};};};
   }
   function alert(x535){
    return function(x534){x535.alert(caml_js_from_string(x534)); return 0;};
   }
   function session_storage(x536){
    var _L_ = x536["sessionStorage"];
    return caml_call2(Ojs[7], Storage[1], _L_);
   }
   function local_storage(x538){
    var _K_ = x538["localStorage"];
    return caml_call2(Ojs[7], Storage[1], _K_);
   }
   function inner_width(x540){return x540["innerWidth"];}
   function inner_height(x541){return x541["innerHeight"];}
   function page_x_offset(x542){return x542["pageXOffset"];}
   function page_y_offset(x543){return x543["pageYOffset"];}
   function scroll_by$0(x546){
    return function(x544){
     return function(x545){x546.scrollBy(x544, x545); return 0;};};
   }
   function scroll_to(x549){
    return function(x547){
     return function(x548){x549.scrollTo(x547, x548); return 0;};};
   }
   function scroll_to_options(x555){
    return function(x554){
     var _J_ = caml_call2(Ojs[8], behavior_to_js, x554[3]);
     x555.scrollTo({top: x554[1], left: x554[2], behavior: _J_});
     return 0;};
   }
   function history(x556){
    var _I_ = x556["history"];
    return caml_call1(History[1], _I_);
   }
   function location(x557){
    var _H_ = x557[cst_location];
    return caml_call1(Location[1], _H_);
   }
   function frame_element(x558){var x252 = x558["frameElement"]; return x252;}
   function get_computed_style(x560){
    return function(x559){
     var _G_ = x560.getComputedStyle(x559);
     return caml_call1(Style[1], _G_);};
   }
   function decode_URI_component(x562){
    return function(x561){
     return caml_js_to_string
             (x562.decodeURIComponent(caml_js_from_string(x561)));};
   }
   function event_source(x563){var x489 = x563["source"]; return x489;}
   function post_message(x566){
    return function(x564){
     return function(x565){
      x566.postMessage(x564, caml_js_from_string(x565));
      return 0;};};
   }
   function content_window(x567){
    var _F_ = x567["contentWindow"];
    return caml_call2(Ojs[7], t_of_js$16, _F_);
   }
   function content_document(x569){
    var _E_ = x569["contentDocument"];
    return caml_call2(Ojs[7], Document[1], _E_);
   }
   var IFrame = [0, content_window, content_document];
   function parse$0(x571){
    var _D_ = caml_js_from_string(x571);
    return Ojs[19][cst_JSON].parse(_D_);
   }
   function stringify(x572){
    return caml_js_to_string(Ojs[19][cst_JSON].stringify(x572));
   }
   var
    JSON = [0, parse$0, stringify],
    _b_ = [0, cst_lib_js_browser_ml, 2161, 15],
    _c_ = [0, cst_lib_js_browser_ml, 2326, 15];
   function t_of_js$17(x577){return x577;}
   function t_to_js$17(x576){return x576;}
   function create$2(param){
    var x577 = new Ojs[19]["FileReader"];
    return x577;
   }
   function ready_state(x578){
    var x574 = x578[cst_readyState];
    if(2 < x574 >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    switch(x574){case 0: return 0;case 1: return 1;default: return 2;
    }
   }
   function result(x579){return caml_js_to_string(x579[cst_result]);}
   function set_onload$0(x580){
    return function(x581){
     return x580[cst_onload] =
             caml_js_wrap_callback_strict
              (1, function(param){return caml_call1(x581, 0);});};
   }
   function read_as_binary_string(x583){
    return function(x582){x583.readAsBinaryString(x582); return 0;};
   }
   function read_as_text(x585){
    return function(x584){x585.readAsText(x584); return 0;};
   }
   function read_as_data_url(x587){
    return function(x586){x587.readAsDataURL(x586); return 0;};
   }
   function t_of_js$18(x589){return x589;}
   function t_to_js$18(x588){return x588;}
   function create$3(param){
    var x589 = new Ojs[19]["XMLHttpRequest"];
    return x589;
   }
   function open$1(x592){
    return function(x590){
     return function(x591){
      x592.open(caml_js_from_string(x590), caml_js_from_string(x591));
      return 0;};};
   }
   function send(x594){return function(x593){x594.send(x593); return 0;};}
   function set_request_header(x597){
    return function(x595){
     return function(x596){
      x597.setRequestHeader
       (caml_js_from_string(x595), caml_js_from_string(x596));
      return 0;};};
   }
   function get_response_header(x599){
    return function(x598){
     var _C_ = x599.getResponseHeader(caml_js_from_string(x598));
     return caml_call2(Ojs[7], caml_js_to_string, _C_);};
   }
   function get_all_response_headers(x601){
    return caml_js_to_string(x601.getAllResponseHeaders());
   }
   function set_response_type(x602){
    return function(x603){
     return x602[cst_responseType] = caml_js_from_string(x603);};
   }
   function override_mime_type(x605){
    return function(x604){
     x605.overrideMimeType(caml_js_from_string(x604));
     return 0;};
   }
   function set_with_credentials(x606){
    return function(x607){return x606["withCredentials"] = ! ! x607;};
   }
   function status(x613){return x613["status"];}
   function status_text(x614){return caml_js_to_string(x614["statusText"]);}
   function ready_state$0(x615){
    var x610 = x615[cst_readyState];
    if(4 < x610 >>> 0) return [0, x610];
    switch(x610){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      case 3:
       return 3;
      default: return 4;
    }
   }
   function response_type(x616){
    return caml_js_to_string(x616[cst_responseType]);
   }
   function response_text(x617){
    return caml_js_to_string(x617["responseText"]);
   }
   function response(x618){return x618[cst_response];}
   function response_URL(x619){return caml_js_to_string(x619["responseURL"]);}
   function set_onreadystatechange(x620){
    return function(x621){
     return x620["onreadystatechange"] =
             caml_js_wrap_callback_strict
              (1, function(param){return caml_call1(x621, 0);});};
   }
   function t_of_js$19(x623){return x623;}
   function t_to_js$19(x622){return x622;}
   function create$4(x627){
    return function(x628){
     return function(param){
      var x629 = new Ojs[19][cst_Array];
      x629.push(caml_js_from_string(x627));
      if(x628){
       var x630 = x628[1];
       x629.push(caml_call2(Ojs[4], caml_js_from_string, x630));
      }
      var x623 = caml_ojs_new_arr(Ojs[19]["WebSocket"], x629);
      return x623;};};
   }
   function send$0(x633){
    return function(x632){x633.send(caml_js_from_string(x632)); return 0;};
   }
   function close$0(x639){
    return function(x634){
     return function(x635){
      return function(param){
       var x636 = new Ojs[19][cst_Array];
       if(x634){var x638 = x634[1]; x636.push(x638);}
       if(x635){var x637 = x635[1]; x636.push(caml_js_from_string(x637));}
       x639[cst_close].apply(x639, x636);
       return 0;};};};
   }
   function binary_type(x641){return caml_js_to_string(x641[cst_binaryType]);}
   function set_binary_type(x642){
    return function(x643){
     return x642[cst_binaryType] = caml_js_from_string(x643);};
   }
   function ready_state$1(x644){
    var x625 = x644[cst_readyState];
    if(3 < x625 >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    switch(x625){
      case 0:
       return 0;
      case 1:
       return 1;
      case 2:
       return 2;
      default: return 3;
    }
   }
   function add_event_listener$1(x649){
    return function(x645){
     return function(x646){
      return function(x648){
       x649.addEventListener
        (kind_to_js(x645),
         caml_js_wrap_callback_strict
          (1, function(x647){return caml_call1(x646, x647);}),
         ! ! x648);
       return 0;};};};
   }
   function code$0(x652){return x652[cst_code];}
   var
    window = Ojs[19][cst_window],
    _d_ = Ojs[19][cst_document],
    document$0 = caml_call1(Document[1], _d_);
   function context_of_js(x654){return x654;}
   function context_to_js(x653){return x653;}
   function gradient_of_js(x656){return x656;}
   function gradient_to_js(x655){return x655;}
   function get_context(opt, canvas){
    var
     alpha = opt ? opt[1] : 1,
     _B_ = canvas.getContext("2d", {alpha: ! ! alpha});
    return caml_call2(Ojs[7], context_of_js, _B_);
   }
   function to_data_URL(x665){return caml_js_to_string(x665.toDataURL());}
   function set_fill_style(x666){
    return function(x667){
     if(66123280 <= x667[1])
      var x669 = x667[2], _A_ = x669;
     else
      var x668 = x667[2], _A_ = caml_js_from_string(x668);
     return x666["fillStyle"] = _A_;};
   }
   function set_stroke_style(x670){
    return function(x671){
     if(66123280 <= x671[1])
      var x673 = x671[2], _z_ = x673;
     else
      var x672 = x671[2], _z_ = caml_js_from_string(x672);
     return x670["strokeStyle"] = _z_;};
   }
   function set_line_width(x674){
    return function(x675){return x674["lineWidth"] = x675;};
   }
   function create_linear_gradient(x680){
    return function(x676){
     return function(x677){
      return function(x678){
       return function(x679){
        var x656 = x680.createLinearGradient(x676, x677, x678, x679);
        return x656;};};};};
   }
   function add_color_stop(x683){
    return function(x681){
     return function(x682){
      x683.addColorStop(x681, caml_js_from_string(x682));
      return 0;};};
   }
   function begin_path(x684){x684.beginPath(); return 0;}
   function close_path(x685){x685.closePath(); return 0;}
   function arc(x691){
    return function(x686){
     return function(x687){
      return function(x688){
       return function(x689){
        return function(x690){
         x691.arc(x686, x687, x688, x689, x690);
         return 0;};};};};};
   }
   function move_to(x694){
    return function(x692){
     return function(x693){x694.moveTo(x692, x693); return 0;};};
   }
   function line_to(x697){
    return function(x695){
     return function(x696){x697.lineTo(x695, x696); return 0;};};
   }
   function fill(x698){x698.fill(); return 0;}
   function stroke(x699){x699.stroke(); return 0;}
   function stroke_rect(x704){
    return function(x700){
     return function(x701){
      return function(x702){
       return function(x703){
        x704.strokeRect(x700, x701, x702, x703);
        return 0;};};};};
   }
   function fill_rect(x709){
    return function(x705){
     return function(x706){
      return function(x707){
       return function(x708){
        x709.fillRect(x705, x706, x707, x708);
        return 0;};};};};
   }
   function set_font(x710){
    return function(x711){return x710["font"] = caml_js_from_string(x711);};
   }
   function fill_text(x715){
    return function(x712){
     return function(x713){
      return function(x714){
       x715.fillText(caml_js_from_string(x712), x713, x714);
       return 0;};};};
   }
   function stroke_text(x719){
    return function(x716){
     return function(x717){
      return function(x718){
       x719.strokeText(caml_js_from_string(x716), x717, x718);
       return 0;};};};
   }
   function t_of_js$20(x721){return x721;}
   function t_to_js$20(x720){return x720;}
   function width$2(x722){return x722[cst_width];}
   var TextMetrics = [0, t_of_js$20, t_to_js$20, width$2];
   function measure_text(x724){
    return function(x723){
     var _y_ = x724.measureText(caml_js_from_string(x723));
     return caml_call1(TextMetrics[1], _y_);};
   }
   function rotate(x726){return function(x725){x726.rotate(x725); return 0;};}
   function translate(x729){
    return function(x727){
     return function(x728){x729.translate(x727, x728); return 0;};};
   }
   function scale(x732){
    return function(x730){
     return function(x731){x732.scale(x730, x731); return 0;};};
   }
   function clear_rect(x737){
    return function(x733){
     return function(x734){
      return function(x735){
       return function(x736){
        x737.clearRect(x733, x734, x735, x736);
        return 0;};};};};
   }
   function now$0(param){return Ojs[19]["performance"].now();}
   var Performance = [0, now$0];
   function log(x741){return function(x740){x741.log(x740); return 0;};}
   function time(x743){
    return function(x742){x743.time(caml_js_from_string(x742)); return 0;};
   }
   function time_end(x745){
    return function(x744){x745.timeEnd(caml_js_from_string(x744)); return 0;};
   }
   var console = Ojs[19]["console"];
   function t_of_js$21(x747){return caml_call1(ArrayBuffer[1], x747);}
   function t_to_js$21(x746){return caml_call1(ArrayBuffer[2], x746);}
   function from_buffer(x748){
    var _x_ = caml_call1(ArrayBuffer[2], x748);
    return t_of_js$21(new Ojs[19][cst_Uint8Array](_x_));
   }
   function create$5(x749){
    return t_of_js$21(new Ojs[19][cst_Uint8Array](x749));
   }
   function set$0(x753){
    return function(x750){
     return function(x752){
      var _v_ = caml_call2(Ojs[2], function(_w_){return _w_;}, x750);
      t_to_js$21(x753).set(_v_, x752);
      return 0;};};
   }
   function length$2(x754){return t_to_js$21(x754)[cst_length];}
   function random(x755){
    var _u_ = t_to_js$21(x755);
    Ojs[19][cst_window]["crypto"].getRandomValues(_u_);
    return 0;
   }
   function to_array(x756){
    var _s_ = t_to_js$21(x756);
    return caml_call2(Ojs[1], function(_t_){return _t_;}, _s_);
   }
   function get$0(a, i){
    var _r_ = t_to_js$21(a);
    return caml_call2(Ojs[17], _r_, i);
   }
   function from(x758){
    return function(x759){
     return t_of_js$21
             (Ojs[19][cst_Uint8Array].from
               (x758,
                caml_js_wrap_callback_strict
                 (1, function(x760){return caml_call1(x759, x760);})));};
   }
   var
    Uint8Array =
      [0,
       t_of_js$21,
       t_to_js$21,
       from_buffer,
       create$5,
       set$0,
       length$2,
       random,
       to_array,
       get$0,
       from];
   function of_blob(x761){
    return caml_js_to_string(Ojs[19][cst_URL].createObjectURL(x761));
   }
   function of_file(x762){
    return caml_js_to_string(Ojs[19][cst_URL].createObjectURL(x762));
   }
   function revoke(x763){
    var _q_ = caml_js_from_string(x763);
    Ojs[19][cst_URL].revokeObjectURL(_q_);
    return 0;
   }
   var ObjectURL = [0, of_blob, of_file, revoke];
   function t_of_js$22(x765){return x765;}
   function t_to_js$22(x764){return x764;}
   function unit_type(x766){return x766["unitType"];}
   function value$0(x767){return x767[cst_value];}
   function value_as_string(x768){
    return caml_js_to_string(x768["valueAsString"]);
   }
   function value_in_specified_units(x769){return x769["valueInSpecifiedUnits"];
   }
   var
    Length =
      [0,
       t_of_js$22,
       t_to_js$22,
       unit_type,
       value$0,
       value_as_string,
       value_in_specified_units];
   function t_of_js$23(x771){return x771;}
   function t_to_js$23(x770){return x770;}
   function anim_val(x772){
    var _p_ = x772["animVal"];
    return caml_call1(Length[1], _p_);
   }
   function base_val(x773){
    var _o_ = x773["baseVal"];
    return caml_call1(Length[1], _o_);
   }
   var
    AnimatedLength = [0, t_of_js$23, t_to_js$23, anim_val, base_val],
    Svg = [0, Length, AnimatedLength];
   function encode(x774){
    var _n_ = caml_call1(JsString[2], x774);
    return caml_js_to_string(Ojs[19][cst_window].btoa(_n_));
   }
   function decode(x775){
    var _l_ = caml_js_from_string(x775), _m_ = Ojs[19][cst_window].atob(_l_);
    return caml_call1(JsString[1], _m_);
   }
   var Base64 = [0, encode, decode];
   function t_of_js$24(x777){return x777;}
   function t_to_js$24(x776){return x776;}
   function blob(x778){
    var x = x778.blob();
    function f(x779){return x779;}
    return [0, f, x];
   }
   var FetchResponse = [0, t_of_js$24, t_to_js$24, blob];
   function fetch(x780){
    var x = Ojs[19].fetch(caml_js_from_string(x780)), f = FetchResponse[1];
    return [0, f, x];
   }
   function t_of_js$25(x783){return x783;}
   function t_to_js$25(x782){return x782;}
   function create$6(x784){
    return function(param){
     var x785 = new Ojs[19][cst_Array];
     if(x784){var x786 = x784[1]; x785.push(caml_js_from_string(x786));}
     var x783 = caml_ojs_new_arr(Ojs[19]["TextDecoder"], x785);
     return x783;};
   }
   function decode$0(x788){
    return function(x787){
     return caml_js_to_string(x788.decode(caml_call1(ArrayBuffer[2], x787)));};
   }
   var TextDecoder = [0, t_of_js$25, t_to_js$25, create$6, decode$0];
   function t_of_js$26(x790){return x790;}
   function t_to_js$26(x789){return x789;}
   function client_data_json(x791){
    var _k_ = x791[cst_clientDataJSON];
    return caml_call1(ArrayBuffer[1], _k_);
   }
   function attestation_object(x792){
    var _j_ = x792["attestationObject"];
    return caml_call1(ArrayBuffer[1], _j_);
   }
   var
    AuthenticatorAttestationRespon =
      [0, t_of_js$26, t_to_js$26, client_data_json, attestation_object];
   function t_of_js$27(x794){return x794;}
   function t_to_js$27(x793){return x793;}
   function client_data_json$0(x795){
    var _i_ = x795[cst_clientDataJSON];
    return caml_call1(ArrayBuffer[1], _i_);
   }
   function authenticator_data(x796){
    var _h_ = x796["authenticatorData"];
    return caml_call1(ArrayBuffer[1], _h_);
   }
   function signature(x797){
    var _g_ = x797["signature"];
    return caml_call1(ArrayBuffer[1], _g_);
   }
   function user_handle(x798){
    var _f_ = x798["userHandle"];
    return caml_call1(ArrayBuffer[1], _f_);
   }
   var
    AuthenticatorAssertionResponse =
      [0,
       t_of_js$27,
       t_to_js$27,
       client_data_json$0,
       authenticator_data,
       signature,
       user_handle];
   function t_of_js$28(x800){return x800;}
   function t_to_js$28(x799){return x799;}
   function type$1(x801){return caml_js_to_string(x801[cst_type]);}
   function id$0(x802){return caml_js_to_string(x802[cst_id]);}
   function raw_id(x803){
    var _e_ = x803["rawId"];
    return caml_call1(ArrayBuffer[1], _e_);
   }
   function response$0(x804){return x804[cst_response];}
   var
    PublicKeyCredential =
      [0, t_of_js$28, t_to_js$28, type$1, id$0, raw_id, response$0];
   function t_of_js$29(x806){return x806;}
   function t_to_js$29(x805){return x805;}
   function rp_options(x809){
    return function(x810){
     return function(param){
      var x811 = caml_call1(Ojs[11], 0);
      if(x809){var x813 = x809[1]; x811[cst_id] = caml_js_from_string(x813);}
      if(x810){
       var x812 = x810[1];
       x811[cst_name] = caml_js_from_string(x812);
      }
      return x811;};};
   }
   function user_options(x816){
    return function(x817){
     return function(x818){
      return function(param){
       var x819 = caml_call1(Ojs[11], 0);
       if(x816){
        var x822 = x816[1];
        x819[cst_id] = caml_call1(ArrayBuffer[2], x822);
       }
       if(x817){
        var x821 = x817[1];
        x819[cst_name] = caml_js_from_string(x821);
       }
       if(x818){
        var x820 = x818[1];
        x819["displayName"] = caml_js_from_string(x820);
       }
       return x819;};};};
   }
   function key_param_to_js(x823){return x823;}
   function key_param(x825){
    return function(x826){
     return function(param){
      var x827 = caml_call1(Ojs[11], 0);
      if(x825){
       var x829 = x825[1];
       x827[cst_type] = caml_js_from_string(x829);
      }
      if(x826){var x828 = x826[1]; x827["alg"] = x828;}
      return x827;};};
   }
   function authenticator_options(x832){
    return function(x833){
     return function(x834){
      return function(x835){
       return function(param){
        var x836 = caml_call1(Ojs[11], 0);
        if(x832){
         var x840 = x832[1];
         x836["authenticatorAttachment"] = caml_js_from_string(x840);
        }
        if(x833){
         var x839 = x833[1];
         x836["residentKey"] = caml_js_from_string(x839);
        }
        if(x834){var x838 = x834[1]; x836["requireResidentKey"] = ! ! x838;}
        if(x835){
         var x837 = x835[1];
         x836[cst_userVerification] = caml_js_from_string(x837);
        }
        return x836;};};};};
   }
   function public_key_options(x843){
    return function(x844){
     return function(x845){
      return function(x846){
       return function(x847){
        return function(x848){
         return function(x849){
          return function(x850){
           return function(param){
            var x851 = caml_call1(Ojs[11], 0);
            if(x843){var x861 = x843[1]; x851["rp"] = x861;}
            if(x844){var x860 = x844[1]; x851["user"] = x860;}
            if(x845){
             var x859 = x845[1];
             x851[cst_challenge] = caml_call1(ArrayBuffer[2], x859);
            }
            if(x846){
             var x857 = x846[1];
             x851["pubKeyCredParams"] =
              caml_call2(Ojs[4], key_param_to_js, x857);
            }
            if(x847){var x856 = x847[1]; x851[cst_timeout] = x856;}
            if(x848){
             var x854 = x848[1];
             x851["excludeCredentials"] =
              caml_call2(Ojs[4], function(x855){return x855;}, x854);
            }
            if(x849){
             var x853 = x849[1];
             x851["authenticatorSelection"] = x853;
            }
            if(x850){
             var x852 = x850[1];
             x851["attestation"] = caml_js_from_string(x852);
            }
            return x851;};};};};};};};};
   }
   function create_options(x864){
    return function(param){
     var x865 = caml_call1(Ojs[11], 0);
     if(x864){var x866 = x864[1]; x865[cst_publicKey] = x866;}
     return x865;};
   }
   function create$7(x867){
    var x = Ojs[19][cst_navigator][cst_credentials].create(x867);
    function f(x868){return x868;}
    return [0, f, x];
   }
   function credential_descriptor_to_js(x869){return x869;}
   function credential_descriptor(x871){
    return function(x872){
     return function(x873){
      return function(param){
       var x874 = caml_call1(Ojs[11], 0);
       if(x871){
        var x877 = x871[1];
        x874[cst_type] = caml_js_from_string(x877);
       }
       if(x872){
        var x876 = x872[1];
        x874[cst_id] = caml_call1(ArrayBuffer[2], x876);
       }
       if(x873){var x875 = x873[1]; x874["transports"] = x875;}
       return x874;};};};
   }
   function get_public_key_options(x880){
    return function(x881){
     return function(x882){
      return function(x883){
       return function(x884){
        return function(x885){
         return function(param){
          var x886 = caml_call1(Ojs[11], 0);
          if(x880){
           var x893 = x880[1];
           x886[cst_challenge] = caml_call1(ArrayBuffer[2], x893);
          }
          if(x881){var x892 = x881[1]; x886[cst_timeout] = x892;}
          if(x882){
           var x891 = x882[1];
           x886["rpId"] = caml_js_from_string(x891);
          }
          if(x883){
           var x889 = x883[1];
           x886["allowCredentials"] =
            caml_call2(Ojs[4], credential_descriptor_to_js, x889);
          }
          if(x884){
           var x888 = x884[1];
           x886[cst_userVerification] = caml_js_from_string(x888);
          }
          if(x885){var x887 = x885[1]; x886["extensions"] = x887;}
          return x886;};};};};};};
   }
   function get_options_to_js(x894){return x894;}
   function get_options(x896){
    return function(param){
     var x897 = caml_call1(Ojs[11], 0);
     if(x896){var x898 = x896[1]; x897[cst_publicKey] = x898;}
     return x897;};
   }
   function get$1(x899){
    var x = Ojs[19][cst_navigator][cst_credentials].get(x899);
    function f(x900){return x900;}
    return [0, f, x];
   }
   var
    Js_browser =
      [0,
       [0, then],
       Storage,
       RegExp,
       JsString,
       Date,
       ArrayBuffer,
       [0, options, t_of_js$4, t_to_js$4, create$0, size, type, text],
       [0, t_of_js$5, t_to_js$5, options$0, create$1, name],
       DataTransfer,
       [0,
        t_of_js$7,
        t_to_js$7,
        target,
        related_target,
        prevent_default,
        stop_propagation,
        type$0,
        init_event,
        client_x,
        client_y,
        page_x,
        page_y,
        screen_x,
        screen_y,
        movement_x,
        movement_y,
        buttons,
        alt_key,
        ctrl_key,
        shift_key,
        which,
        code,
        key$0,
        delta_y,
        delta_x,
        data_transfer,
        clipboard_data,
        data,
        origin,
        state],
       Rect,
       SVGRect,
       Style,
       ClassList,
       [0,
        t_of_js$12,
        t_to_js$12,
        null$0,
        id,
        set_id,
        node_type,
        clone_node,
        contains$0,
        append_child,
        insert_before,
        replace_child,
        remove_child,
        first_child,
        last_child,
        next_sibling,
        remove_all_children,
        has_child_nodes,
        add_event_listener,
        add_cancellable_event_listener,
        inner_text,
        get_elements_by_tag_name,
        get_elements_by_class_name,
        has_attribute,
        get_attribute,
        remove_attribute,
        set_attribute,
        get_bounding_client_rect,
        get_bounding_box,
        attach_shadow,
        normalize,
        value,
        set_value,
        select,
        files$0,
        submit,
        show_picker,
        selected_index,
        checked,
        set_checked,
        node_value,
        set_node_value,
        parent_node,
        node_name,
        dispatch_event,
        style,
        inner_HTML,
        outer_HTML,
        set_inner_HTML,
        set_text_content,
        set_class_name,
        class_name,
        client_width,
        client_height,
        scroll_width,
        scroll_height,
        width$1,
        height$1,
        offset_parent,
        offset_top,
        offset_left,
        offset_width,
        offset_height,
        scroll_top,
        set_scroll_top,
        scroll_into_view,
        focus,
        blur,
        scroll_into_view_options,
        scroll_by,
        selection_start,
        selection_end,
        set_selection_start,
        set_selection_end,
        remove$0,
        click,
        query_selector,
        query_selector_all,
        class_list],
       Document,
       History,
       Location,
       [0,
        t_of_js$16,
        t_to_js$16,
        add_event_listener$0,
        add_cancellable_event_listener$0,
        document,
        set_onload,
        set_interval,
        set_timeout,
        clear_timeout,
        clear_interval,
        request_animation_frame,
        open$0,
        alert,
        session_storage,
        local_storage,
        inner_width,
        inner_height,
        page_x_offset,
        page_y_offset,
        scroll_by$0,
        scroll_to,
        scroll_to_options,
        history,
        location,
        frame_element,
        get_computed_style,
        decode_URI_component,
        event_source,
        post_message],
       IFrame,
       JSON,
       [0,
        t_of_js$17,
        t_to_js$17,
        create$2,
        ready_state,
        result,
        set_onload$0,
        read_as_binary_string,
        read_as_text,
        read_as_data_url],
       [0,
        t_of_js$18,
        t_to_js$18,
        create$3,
        open$1,
        send,
        set_request_header,
        get_response_header,
        get_all_response_headers,
        set_response_type,
        override_mime_type,
        set_with_credentials,
        status,
        status_text,
        ready_state$0,
        response_type,
        response_text,
        response,
        response_URL,
        set_onreadystatechange],
       [0,
        t_of_js$19,
        t_to_js$19,
        create$4,
        send$0,
        close$0,
        binary_type,
        set_binary_type,
        ready_state$1,
        add_event_listener$1,
        [0, code$0]],
       window,
       document$0,
       [0,
        context_of_js,
        context_to_js,
        gradient_of_js,
        gradient_to_js,
        get_context,
        to_data_URL,
        set_fill_style,
        set_stroke_style,
        set_line_width,
        create_linear_gradient,
        add_color_stop,
        begin_path,
        close_path,
        arc,
        move_to,
        line_to,
        fill,
        stroke,
        stroke_rect,
        fill_rect,
        set_font,
        fill_text,
        stroke_text,
        TextMetrics,
        measure_text,
        rotate,
        translate,
        scale,
        clear_rect],
       Performance,
       [0, log, time, time_end],
       console,
       Uint8Array,
       ObjectURL,
       Svg,
       Base64,
       FetchResponse,
       fetch,
       TextDecoder,
       [0,
        AuthenticatorAttestationRespon,
        AuthenticatorAssertionResponse,
        PublicKeyCredential,
        [0,
         t_of_js$29,
         t_to_js$29,
         rp_options,
         user_options,
         key_param,
         authenticator_options,
         public_key_options,
         create_options,
         create$7,
         credential_descriptor,
         get_public_key_options,
         get_options,
         get_options_to_js,
         get$1]]];
   runtime.caml_register_global(853, Js_browser, "Js_browser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Vdom_blit
//# unitInfo: Requires: CamlinternalLazy, Js_browser, Ojs, Ojs_exn, Stdlib, Stdlib__Array, Stdlib__Hashtbl, Stdlib__List, Stdlib__Obj, Stdlib__Option, Stdlib__Printexc, Stdlib__Printf, Stdlib__Result, Stdlib__String, Vdom
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$3 = "",
    cst_baseVal = "baseVal",
    cst_blur = "blur",
    cst_boolean$0 = "boolean",
    cst_change$1 = "change",
    cst_checked$0 = "checked",
    cst_className = "className",
    cst_http_www_w3_org_2000_svg = "http://www.w3.org/2000/svg",
    cst_input$0 = "input",
    cst_lib_vdom_blit_ml = "lib/vdom_blit.ml",
    cst_number = "number",
    cst_string$0 = "string",
    cst_style = "style",
    cst_target$3 = "target",
    cst_value$1 = "value",
    caml_check_bound = runtime.caml_check_bound,
    caml_js_from_string = runtime.caml_js_from_string,
    caml_js_to_string = runtime.caml_js_to_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_lessthan = runtime.caml_string_lessthan,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$1 = cst$3,
    cst$2 = cst$3,
    cst$0 = "]: ",
    cst = ".",
    blur_event = [1, cst_blur, [5, 0]],
    empty = [0, 0, 0],
    Js_browser = global_data.Js_browser,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Ojs$0 = global_data.Ojs,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Vdom = global_data.Vdom,
    Stdlib_Result = global_data.Stdlib__Result,
    Ojs_exn = global_data.Ojs_exn,
    Ojs = [248, "Vdom_blit.Ojs", runtime.caml_fresh_oo_id(0)],
    cst_list = "list",
    cst_string = cst_string$0,
    cst_boolean = cst_boolean$0,
    cst_int = "int",
    cst_float = "float",
    _a_ = [0, [11, "unbound field: ", [3, 0, 0]], "unbound field: %S"],
    _b_ =
      [0,
       [11, "unbound method (or wrong number of arguments): ", [3, 0, 0]],
       "unbound method (or wrong number of arguments): %S"],
    _c_ =
      [0,
       [11, "cannot convert ", [2, 0, [11, " to ", [2, 0, 0]]]],
       "cannot convert %s to %s"],
    cst_At_path = "At path [",
    _d_ = [0, 0],
    cst_Encoded_function_received_ =
      "Encoded function received an argument with unsupported type: ",
    _e_ =
      [0,
       [11, "No command handler found! (", [2, 0, [12, 41, 0]]],
       "No command handler found! (%s)"],
    cst_value = cst_value$1,
    cst_target = cst_target$3,
    cst_input = cst_input$0,
    cst_checked = cst_checked$0,
    cst_target$0 = cst_target$3,
    cst_click = "click",
    cst_value$0 = cst_value$1,
    cst_target$1 = cst_target$3,
    cst_change = cst_change$1,
    cst_selectedIndex = "selectedIndex",
    cst_target$2 = cst_target$3,
    cst_change$0 = cst_change$1,
    _f_ = [0, [11, "scroll: ", [2, 0, [12, 10, [10, 0]]]], "scroll: %s\n%!"];
   function string_of_step(param){
    if(0 === param[0]){var n = param[1]; return caml_call1(Stdlib[33], n);}
    var s = param[1];
    return s;
   }
   function string_of_error_kind(param){
    switch(param[0]){
      case 0:
       var s = param[1]; return caml_call2(Stdlib_Printf[4], _a_, s);
      case 1:
       var s$0 = param[1]; return caml_call2(Stdlib_Printf[4], _b_, s$0);
      case 2:
       var s$1 = param[1]; return s$1;
      default:
       var got = param[2], expected = param[1];
       switch(expected){
         case 0:
          var _bv_ = cst_list; break;
         case 1:
          var _bv_ = cst_string; break;
         case 2:
          var _bv_ = cst_boolean; break;
         case 3:
          var _bv_ = cst_int; break;
         default: var _bv_ = cst_float;
       }
       return caml_call3(Stdlib_Printf[4], _c_, got, _bv_);
    }
   }
   function string_of_error(param){
    var path = param[1];
    if(path){
     var
      errk = param[2],
      _bs_ = string_of_error_kind(errk),
      _bt_ = caml_call2(Stdlib[28], cst$0, _bs_),
      _bq_ = caml_call2(Stdlib_List[22], string_of_step, path),
      _br_ = caml_call2(Stdlib_String[7], cst, _bq_),
      _bu_ = caml_call2(Stdlib[28], _br_, _bt_);
     return caml_call2(Stdlib[28], cst_At_path, _bu_);
    }
    var errk$0 = param[2];
    return string_of_error_kind(errk$0);
   }
   function typerr(ty, path, got){return [1, [0, path, [3, ty, got]]];}
   function string(param){
    var obj = param[2], path = param[1], ty = caml_call1(Ojs$0[21], obj);
    return ty !== cst_string$0
            ? typerr(1, path, ty)
            : [0, caml_js_to_string(obj)];
   }
   function int$0(param){
    var obj = param[2], path = param[1], ty = caml_call1(Ojs$0[21], obj);
    return ty !== cst_number ? typerr(3, path, ty) : [0, obj];
   }
   function float$0(param){
    var obj = param[2], path = param[1], ty = caml_call1(Ojs$0[21], obj);
    return ty !== cst_number ? typerr(4, path, ty) : [0, obj];
   }
   function bool(param){
    var obj = param[2], path = param[1], ty = caml_call1(Ojs$0[21], obj);
    return ty !== cst_boolean$0 ? typerr(2, path, ty) : [0, obj | 0];
   }
   function object(param){var obj = param[2]; return [0, [0, Ojs, obj]];}
   function eval$0(opt, param){
    var extra_fields = opt ? opt[1] : 0;
    if(typeof param === "number")
     switch(param){
       case 0:
        return string;
       case 1:
        return int$0;
       case 2:
        return float$0;
       case 3:
        return bool;
       default: return object;
     }
    switch(param[0]){
      case 0:
       var
        d = param[2],
        key = param[1],
        match = caml_call2(Stdlib_List[50], key, extra_fields);
       if(match){
        var obj = match[1];
        return function(o){
         var _bp_ = [0, [0, [1, key], o[1]], obj];
         return eval$0(0, d)(_bp_);};
       }
       var d$0 = eval$0(0, d);
       return function(o$1){
        var
         keys$0 = caml_call2(Stdlib_String[17], 46, key),
         o = o$1,
         param = keys$0;
        for(;;){
         if(param){
          var keys = param[2], key$0 = param[1], obj = o[2][key$0];
          if(! runtime.caml_equal(obj, caml_call1(Ojs$0[10], 0))){
           var o$0 = [0, [0, [1, key$0], o[1]], obj];
           o = o$0;
           param = keys;
           continue;
          }
          var _bo_ = [1, [0, o[1], [0, key$0]]];
         }
         else
          var _bo_ = [0, o];
         return caml_call2(Stdlib_Result[6], _bo_, d$0);
        }};
      case 1:
       var
        d$1 = param[3],
        arg = param[2],
        name = param[1],
        d$2 = eval$0(0, d$1);
       return function(o){
        var
         arg$0 =
           caml_call2
            (Stdlib_List[20],
             function(param){
              switch(param[0]){
                case 0:
                 var s = param[1]; return caml_js_from_string(s);
                case 1:
                 var b = param[1]; return ! ! b;
                case 2:
                 var f = param[1]; return f;
                default: var i = param[1]; return i;
              }
             },
             arg),
         arg$1 = caml_call1(Stdlib_Array[11], arg$0);
        try{
         var
          obj = runtime.caml_js_meth_call(o[2], name, arg$1),
          _bm_ = d$2([0, [0, [1, name], o[1]], obj]);
         return _bm_;
        }
        catch(_bn_){
         var _bl_ = caml_wrap_exception(_bn_);
         if(_bl_[1] === Ojs_exn[5]) return [1, [0, o[1], [1, name]]];
         throw caml_maybe_attach_backtrace(_bl_, 0);
        }};
      case 2:
       var d$3 = param[2], f = param[1], d$4 = eval$0([0, extra_fields], d$3);
       return function(o){
        var match = d$4(o);
        if(0 === match[0]){
         var x = match[1];
         return eval$0([0, extra_fields], caml_call1(f, x))(o);
        }
        var err = match[1];
        return [1, err];};
      case 3:
       var msg = param[1]; return function(_bk_){return [0, msg];};
      case 4:
       var f$0 = param[1];
       return function(o){
        return [0,
                function(x){
                 var _bj_ = eval$0([0, extra_fields], caml_call1(f$0, x))(o);
                 return caml_call2(Stdlib_Result[9], string_of_error, _bj_);
                }];};
      case 5:
       var d$5 = param[1], d$6 = eval$0(0, d$5);
       return function(o){
        var ty = caml_call1(Ojs$0[21], o[2]);
        if(ty !== "object") return typerr(0, o[1], ty);
        var l = caml_call2(Ojs$0[3], function(_bi_){return _bi_;}, o[2]);
        function loop(i, acc, param){
         if(! param) return [0, caml_call1(Stdlib_List[10], acc)];
         var
          xs = param[2],
          obj = param[1],
          _bh_ = d$6([0, [0, [0, i], o[1]], obj]);
         return caml_call2
                 (Stdlib_Result[6],
                  _bh_,
                  function(x){return loop(i + 1 | 0, [0, x, acc], xs);});
        }
        return loop(0, 0, l);};
      case 6:
       var msg$0 = param[1];
       return function(param){
        var path = param[1];
        return [1, [0, path, [2, msg$0]]];};
      default:
       var d$7 = param[1], d$8 = eval$0([0, extra_fields], d$7);
       return function(o){
        var match = d$8(o);
        if(0 !== match[0]) return _d_;
        var x = match[1];
        return [0, [0, x]];};
    }
   }
   function decode(opt, d){
    var extra_fields = opt ? opt[1] : 0, d$0 = eval$0([0, extra_fields], d);
    return function(obj){
     var match = d$0([0, 0, obj]);
     if(0 === match[0]){var x = match[1]; return [0, x];}
     var err = match[1];
     return [1, string_of_error(err)];};
   }
   function decode_fail(opt, d, o){
    var
     extra_fields = opt ? opt[1] : 0,
     match = decode([0, extra_fields], d)(o);
    if(0 === match[0]){var res = match[1]; return res;}
    var err = match[1];
    return caml_call1(Stdlib[2], err);
   }
   function convert_arg(o){
    var ty = caml_call1(Ojs$0[21], o);
    if(ty === cst_boolean$0) return [1, o | 0];
    if(ty === cst_number) return [2, o];
    if(ty === cst_string$0) return [0, caml_js_to_string(o)];
    var _bg_ = caml_call2(Stdlib[28], cst_Encoded_function_received_, ty);
    return caml_call1(Stdlib[2], _bg_);
   }
   function encode(param){
    if(typeof param === "number") return caml_call1(Ojs$0[10], 0);
    switch(param[0]){
      case 0:
       var s = param[1]; return caml_js_from_string(s);
      case 1:
       var i = param[1]; return i;
      case 2:
       var f = param[1]; return f;
      case 3:
       var b = param[1]; return ! ! b;
      case 4:
       var l = param[1]; return caml_call2(Ojs$0[4], encode, l);
      case 5:
       var
        l$0 = param[1],
        _bf_ =
          caml_call2
           (Stdlib_List[20],
            function(param){
             var e = param[2], s = param[1];
             return [0, s, encode(e)];
            },
            l$0);
       return runtime.caml_js_object(caml_call1(Stdlib_Array[11], _bf_));
      default:
       var f$0 = param[1];
       return runtime.caml_ojs_wrap_fun_arguments
               (function(o){
                 return encode
                         (caml_call1(f$0, caml_call2(Ojs$0[3], convert_arg, o)));
                });
    }
   }
   function container(ctx){return ctx[1];}
   function send_msg(ctx){return ctx[2];}
   function after_redraw(ctx){return ctx[3];}
   function run(after, h, p, elt, x){
    var p$0 = p, x$0 = x;
    for(;;){
     if(x$0[1] === Vdom[1][1]){var msg = x$0[2]; return caml_call1(p$0, msg);}
     if(x$0[1] === Vdom[1][2]){
      var l = x$0[2];
      return caml_call2
              (Stdlib_List[18],
               function(_be_){return run(after, h, p$0, elt, _be_);},
               l);
     }
     if(x$0[1] === Vdom[1][4]){
      var cmd = x$0[3], f = x$0[2];
      let p = p$0, f$0 = f;
      var p$1 = function(x){return caml_call1(p, caml_call1(f$0, x));};
      p$0 = p$1;
      x$0 = cmd;
     }
     else if(x$0[1] === Vdom[1][3]){
      var f$0 = x$0[3], cmd$0 = x$0[2];
      let p = p$0, f = f$0;
      var p$2 = function(x){return run(after, h, p, elt, caml_call1(f, x));};
      p$0 = p$2;
      x$0 = cmd$0;
     }
     else{
      var ctx = [0, elt, p$0, after], param = h;
      for(;;){
       if(! param){
        var
         _bc_ = caml_call1(Stdlib_Obj[22][1], x$0),
         _bd_ = caml_call1(Stdlib_Obj[22][2], _bc_);
        return caml_call3(Stdlib_Printf[10], Stdlib[2], _e_, _bd_);
       }
       var tl = param[2], hd = param[1];
       if(caml_call2(hd[1], ctx, x$0)) return 0;
       param = tl;
      }
     }
    }
   }
   function input_event(s){
    return [1,
            cst_input,
            [5, [0, [0, cst_target, [5, [0, [0, cst_value, [0, s]], 0]]], 0]]];
   }
   function checked_event(b){
    return [1,
            cst_click,
            [5,
             [0, [0, cst_target$0, [5, [0, [0, cst_checked, [3, b]], 0]]], 0]]];
   }
   function change_event(s){
    return [1,
            cst_change,
            [5,
             [0, [0, cst_target$1, [5, [0, [0, cst_value$0, [0, s]], 0]]], 0]]];
   }
   function change_index_event(i){
    return [1,
            cst_change$0,
            [5,
             [0,
              [0, cst_target$2, [5, [0, [0, cst_selectedIndex, [1, i]], 0]]],
              0]]];
   }
   function custom_event(e){return [0, e];}
   function make(opt, sync, dom){
    var dispose = opt ? opt[1] : function(_bb_){return 0;};
    return [0, dom, sync, dispose];
   }
   function parent(ctx){return ctx[1];}
   function send_event(ctx){return ctx[2];}
   function after_redraw$0(ctx){return ctx[3];}
   function get_doms(param){
    switch(param[0]){
      case 0:
       return [0, param[2], 0];
      case 1:
       return param[2];
      case 2:
       return [0, param[2], 0];
      case 3:
       return param[2];
      case 4:
       return param[2];
      default: return [0, param[2][1], 0];
    }
   }
   function get_vdom(param){
    switch(param[0]){
      case 0:
       return param[1];
      case 1:
       return param[1];
      case 2:
       return param[1];
      case 3:
       return param[1];
      case 4:
       return param[1];
      default: return param[1];
    }
   }
   function eval_prop(param){
    switch(param[0]){
      case 0:
       var x = param[1]; return caml_js_from_string(x);
      case 1:
       var x$0 = param[1]; return x$0;
      case 2:
       var x$1 = param[1]; return x$1;
      default: var x$2 = param[1]; return ! ! x$2;
    }
   }
   function string_of_prop(param){
    switch(param[0]){
      case 0:
       var s = param[1]; return s;
      case 1:
       var x = param[1]; return caml_call1(Stdlib[33], x);
      case 2:
       var x$0 = param[1]; return caml_call1(Stdlib[35], x$0);
      default: var x$1 = param[1]; return caml_call1(Stdlib[30], x$1);
    }
   }
   function same_prop(v1, v2){
    var _a$_ = v1 === v2 ? 1 : 0;
    if(_a$_)
     var _ba_ = _a$_;
    else{
     switch(v1[0]){
       case 0:
        if(0 === v2[0]){var x2 = v2[1], x1 = v1[1]; return x1 == x2 ? 1 : 0;}
        break;
       case 1:
        if(1 === v2[0]){
         var x2$0 = v2[1], x1$0 = v1[1];
         return x1$0 === x2$0 ? 1 : 0;
        }
        break;
       case 2:
        if(2 === v2[0]){
         var x2$1 = v2[1], x1$1 = v1[1];
         return x1$1 == x2$1 ? 1 : 0;
        }
        break;
       default:
        if(3 === v2[0]){
         var x2$2 = v2[1], x1$2 = v1[1];
         return x1$2 === x2$2 ? 1 : 0;
        }
     }
     var _ba_ = 0;
    }
    return _ba_;
   }
   function bmemo(vdom, child){return [4, vdom, get_doms(child), child];}
   function is_visible(dom){
    var
     bounding = caml_call1(Js_browser[15][27], dom),
     top = caml_call1(Js_browser[11][7], bounding),
     bottom = caml_call1(Js_browser[11][8], bounding),
     _a9_ = 0. <= top ? 1 : 0,
     _a__ =
       _a9_
        ? bottom <= caml_call1(Js_browser[19][17], Js_browser[25]) ? 1 : 0
        : _a9_;
    return _a__;
   }
   function custom_attribute(prop){
    return prop !== "autofocus"
            ? prop
              !== "autosubmit"
              ? prop
                !== "scroll-to-show"
                ? prop
                  !== "select"
                  ? 0
                  : [0,
                    function(dom, param){
                     return caml_call1(Js_browser[15][33], dom);
                    }]
                : [0,
                  function(dom, v){
                   try{
                    a:
                    {
                     if(3 === v[0] && ! v[1]){var align_top = 0; break a;}
                     var align_top = 1;
                    }
                    var
                     _a7_ = 1 - is_visible(dom),
                     _a8_ =
                       _a7_ ? caml_call2(Js_browser[15][65], dom, align_top) : _a7_;
                    return _a8_;
                   }
                   catch(exn$0){
                    var
                     exn = caml_wrap_exception(exn$0),
                     _a6_ = caml_call1(Stdlib_Printexc[1], exn);
                    return caml_call2(Stdlib_Printf[2], _f_, _a6_);
                   }
                  }]
              : [0,
                function(dom, param){
                 return caml_call1(Js_browser[15][35], dom);
                }]
            : [0,
              function(dom, v){
               a:
               {
                if(0 === v[0] && v[1] === "if-visible"){
                 var do_focus = is_visible(dom);
                 break a;
                }
                var do_focus = 1;
               }
               return do_focus
                       ? caml_call1(Js_browser[15][66], dom)
                       : do_focus;
              }];
   }
   function apply_effect_prop(dom, prop, value){
    var match = custom_attribute(prop);
    if(! match) return 0;
    var f = match[1];
    function f$0(param){return f(dom, value);}
    caml_call3(Js_browser[19][8], Js_browser[25], f$0, 0);
    return 1;
   }
   function set_style(dom, k, v){
    if
     (0 < runtime.caml_ml_string_length(k)
      && 45 === runtime.caml_string_get(k, 0)){
     var _a5_ = caml_js_from_string(k);
     caml_call1(Js_browser[15][2], dom)[cst_style].setProperty(_a5_, v);
     return 0;
    }
    return caml_call1(Js_browser[15][2], dom)[cst_style][k] = v;
   }
   function apply_special_prop(ns, dom, k, v){
    if
     (ns === cst_http_www_w3_org_2000_svg && k === cst_className && 0 === v[0]){
     var
      s = v[1],
      class_obj = caml_call1(Js_browser[15][2], dom)[cst_className];
     class_obj[cst_baseVal] = caml_js_from_string(s);
     return 1;
    }
    return 0;
   }
   var js_empty_string = cst$3;
   function cmd(h){return [0, [0, h, 0], empty[2]];}
   function custom(h){return [0, empty[1], [0, h, 0]];}
   function merge(envs){
    var
     _a2_ = caml_call2(Stdlib_List[20], function(e){return e[2];}, envs),
     _a3_ = caml_call1(Stdlib_List[14], _a2_),
     _a4_ = caml_call2(Stdlib_List[20], function(e){return e[1];}, envs);
    return [0, caml_call1(Stdlib_List[14], _a4_), _a3_];
   }
   var
    global = [0, empty],
    cst_Vdom_blit_no_custom_elemen =
      "Vdom_blit: no custom element handler found",
    _h_ =
      [0,
       [11,
        "Error during vdom Custom ",
        [2, 0, [11, " lookup: ", [2, 0, [12, 10, [10, 0]]]]]],
       "Error during vdom Custom %s lookup: %s\n%!"],
    _i_ =
      [0,
       [11, "Error during vdom blit: ", [2, 0, [12, 10, [10, 0]]]],
       "Error during vdom blit: %s\n%!"];
   function register(e){
    global[1] = merge([0, e, [0, global[1], 0]]);
    return 0;
   }
   function apply_attributes(ctx, ns, dom, attributes){
    return caml_call2
            (Stdlib_List[18],
             function(param){
              switch(param[0]){
                case 0:
                 var
                  v = param[2],
                  k = param[1],
                  _aY_ = 1 - apply_special_prop(ns, dom, k, v);
                 if(_aY_){
                  var _aZ_ = 1 - apply_effect_prop(dom, k, v);
                  if(_aZ_)
                   var
                    _a0_ = eval_prop(v),
                    _a1_ = caml_call1(Js_browser[15][2], dom)[k] = _a0_;
                  else
                   var _a1_ = _aZ_;
                 }
                 else
                  var _a1_ = _aY_;
                 return _a1_;
                case 1:
                 var v$0 = param[2], k$0 = param[1];
                 return set_style(dom, k$0, caml_js_from_string(v$0));
                case 2:
                 var match = param[1];
                 if(0 !== match[0]) return 0;
                 var event_type = match[1];
                 return caml_call1(ctx[4], event_type);
                default:
                 var v$1 = param[2], k$1 = param[1];
                 return caml_call3(Js_browser[15][26], dom, k$1, v$1);
              }
             },
             attributes);
   }
   function _g_(parent, ctx, vdom){
    switch(vdom[0]){
      case 0:
       var txt = vdom[2];
       return [0, vdom, caml_call2(Js_browser[16][5], Js_browser[26], txt)];
      case 1:
       var
        children = vdom[2],
        children$0 =
          caml_call2
           (Stdlib_List[20],
            function(_aX_){return _g_(parent, ctx, _aX_);},
            children),
        doms = caml_call2(Stdlib_List[24], get_doms, children$0);
       return [1, vdom, doms, children$0];
      case 2:
       var
        children$1 = vdom[5],
        attributes = vdom[4],
        tag = vdom[3],
        ns = vdom[2],
        dom$0 =
          ns == cst$3
           ? caml_call2(Js_browser[16][3], Js_browser[26], tag)
           : caml_call3(Js_browser[16][4], Js_browser[26], ns, tag),
        children$2 =
          caml_call2
           (Stdlib_List[20],
            function(_aW_){return _g_(dom$0, ctx, _aW_);},
            children$1);
       caml_call2
        (Stdlib_List[18],
         function(c){
          var _aU_ = get_doms(c), _aV_ = caml_call1(Js_browser[15][9], dom$0);
          return caml_call2(Stdlib_List[18], _aV_, _aU_);
         },
         children$2);
       apply_attributes(ctx, ns, dom$0, attributes);
       return [2, vdom, dom$0, children$2];
      case 3:
       var child = vdom[3], f = vdom[2], child$0 = _g_(parent, ctx, child);
       return [3, vdom, get_doms(child$0), f, child$0];
      case 4:
       var arg = vdom[3], f$0 = vdom[2];
       return bmemo(vdom, _g_(parent, ctx, caml_call1(f$0, arg)));
      default:
       var propagate_events = vdom[4], attributes$0 = vdom[3], elt = vdom[2];
       try{
        var
         handlers = caml_call2(Stdlib[37], ctx[2], global[1][2]),
         after_redraw = ctx[3],
         process_custom = ctx[1],
         dom = [],
         el = [],
         send_event =
           function(e){
            var _aS_ = caml_obj_tag(dom);
            a:
            if(250 === _aS_)
             var _aT_ = dom[1];
            else{
             if(246 !== _aS_ && 244 !== _aS_){var _aT_ = dom; break a;}
             var _aT_ = caml_call1(CamlinternalLazy[2], dom);
            }
            return caml_call2(process_custom, _aT_, e);
           };
        caml_update_dummy
         (dom,
          [246,
           function(_aP_){
            var _aQ_ = caml_obj_tag(el);
            a:
            if(250 === _aQ_)
             var _aR_ = el[1];
            else{
             if(246 !== _aQ_ && 244 !== _aQ_){var _aR_ = el; break a;}
             var _aR_ = caml_call1(CamlinternalLazy[2], el);
            }
            return _aR_[1];
           }]);
        caml_update_dummy
         (el,
          [246,
           function(_aO_){
            var ctx = [0, parent, send_event, after_redraw], param = handlers;
            for(;;){
             if(! param)
              return caml_call1(Stdlib[2], cst_Vdom_blit_no_custom_elemen);
             var
              tl = param[2],
              hd = param[1],
              match = caml_call2(hd, ctx, elt);
             if(match){var f = match[1]; return f;}
             param = tl;
            }
           }]);
        var _aI_ = caml_obj_tag(el);
        a:
        if(250 === _aI_)
         var elt$0 = el[1];
        else{
         if(246 !== _aI_ && 244 !== _aI_){var elt$0 = el; break a;}
         var elt$0 = caml_call1(CamlinternalLazy[2], el);
        }
       }
       catch(exn$0){
        var
         exn = caml_wrap_exception(exn$0),
         _aJ_ = caml_call1(Stdlib_Printexc[1], exn),
         _aK_ = caml_call1(Stdlib_Obj[22][1], elt),
         _aL_ = caml_call1(Stdlib_Obj[22][2], _aK_);
        caml_call3(Stdlib_Printf[2], _h_, _aL_, _aJ_);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
       var
        _aM_ = caml_call1(Js_browser[15][2], elt$0[1])["namespaceURI"],
        _aN_ = caml_call2(Ojs$0[7], caml_js_to_string, _aM_),
        ns$0 = caml_call2(Stdlib_Option[3], _aN_, cst$1);
       apply_attributes(ctx, ns$0, elt$0[1], attributes$0);
       return [5, vdom, elt$0, ns$0, propagate_events];
    }
   }
   function blit(parent, ctx, vdom){
    try{var _aH_ = _g_(parent, ctx, vdom); return _aH_;}
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      _aG_ = caml_call1(Stdlib_Printexc[1], exn);
     caml_call2(Stdlib_Printf[2], _i_, _aG_);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function sync_props(to_string, same, set, clear, l1, l2){
    var
     sort =
       caml_call1
        (Stdlib_List[59],
         function(_aF_, param){
          var k2 = param[1], k1 = _aF_[1];
          return caml_call2(Stdlib_String[10], k1, k2);
         }),
     l1$0 = caml_call1(sort, l1),
     l2$0 = caml_call1(sort, l2),
     l1$1 = l1$0,
     l2$1 = l2$0;
    for(;;)
     if(l1$1){
      var tl1 = l1$1[2], _aE_ = l1$1[1], v1 = _aE_[2], k1 = _aE_[1];
      if(l2$1){
       var match = l2$1[1], k2 = match[1], v2 = match[2];
       if(caml_string_lessthan(k1, k2)){
        caml_call2(clear, k1, v1);
        l1$1 = tl1;
       }
       else{
        var tl2 = l2$1[2];
        if(caml_string_lessthan(k2, k1)){
         caml_call2(set, k2, v2);
         l2$1 = tl2;
        }
        else{
         var tl2$0 = l2$1[2], v2$0 = match[2];
         if(1 - caml_call2(same, v1, v2$0)) caml_call2(set, k2, v2$0);
         l1$1 = tl1;
         l2$1 = tl2$0;
        }
       }
      }
      else{caml_call2(clear, k1, v1); l1$1 = tl1; l2$1 = 0;}
     }
     else{
      if(! l2$1) return;
      var
       tl2$1 = l2$1[2],
       match$0 = l2$1[1],
       v2$1 = match$0[2],
       k2$0 = match$0[1];
      caml_call2(set, k2$0, v2$1);
      l1$1 = 0;
      l2$1 = tl2$1;
     }
   }
   function choose(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var tl = param$0[2], hd = param$0[1], match = caml_call1(f, hd);
     if(match){var x = match[1]; return [0, x, choose(f, tl)];}
     param$0 = tl;
    }
   }
   var
    js_false = ! ! 0,
    js_zero = 0,
    _k_ = [0, cst_lib_vdom_blit_ml, 861, 33],
    _l_ = [0, cst_lib_vdom_blit_ml, 890, 13],
    _m_ = [0, cst_lib_vdom_blit_ml, 923, 43],
    _n_ = [0, cst_lib_vdom_blit_ml, 924, 34],
    _o_ =
      [0,
       [11, "Error during vdom view: ", [2, 0, [12, 10, [10, 0]]]],
       "Error during vdom view: %s\n%!"],
    _p_ =
      [0,
       [11,
        "Error in event handler ",
        [3, 0, [11, ": ", [2, 0, [12, 10, [10, 0]]]]]],
       "Error in event handler %S: %s\n%!"],
    cst_currentTarget = "currentTarget",
    _q_ =
      [0,
       [11, "Error during vdom process: ", [2, 0, [12, 10, [10, 0]]]],
       "Error during vdom process: %s\n%!"],
    cst_div = "div";
   function sync_attributes(ctx, ns, dom, a1, a2){
    function props(param){
     if(0 !== param[0]) return 0;
     var v = param[2], k = param[1];
     return [0, [0, k, v]];
    }
    function set(k, v){
     if(k === cst_value$1 && 0 === v[0]){
      var s = v[1];
      if(s == caml_call1(Js_browser[15][31], dom)) return 0;
     }
     var _aA_ = 1 - apply_special_prop(ns, dom, k, v);
     if(_aA_){
      var _aB_ = 1 - apply_effect_prop(dom, k, v);
      if(_aB_)
       var
        _aC_ = eval_prop(v),
        _aD_ = caml_call1(Js_browser[15][2], dom)[k] = _aC_;
      else
       var _aD_ = _aB_;
     }
     else
      var _aD_ = _aA_;
     return _aD_;
    }
    function clear(k, v){
     var _aw_ = 0 === custom_attribute(k) ? 1 : 0;
     if(_aw_){
      var o = caml_call1(Js_browser[15][2], dom);
      if(o.hasOwnProperty(caml_js_from_string(k)) | 0)
       return delete caml_call1(Js_browser[15][2], dom)[k];
      a:
      {
       if(ns === cst_http_www_w3_org_2000_svg && k === cst_className){
        var class_obj = caml_call1(Js_browser[15][2], dom)[cst_className];
        class_obj[cst_baseVal] = cst$3;
        var _ax_ = 1;
        break a;
       }
       var _ax_ = 0;
      }
      var _ay_ = 1 - _ax_;
      if(_ay_){
       switch(v[0]){
         case 0:
          var js_empty_string$0 = js_empty_string; break;
         case 3:
          var js_empty_string$0 = js_false; break;
         default: var js_empty_string$0 = js_zero;
       }
       var _az_ = caml_call1(Js_browser[15][2], dom)[k] = js_empty_string$0;
      }
      else
       var _az_ = _ay_;
     }
     else
      var _az_ = _aw_;
     return _az_;
    }
    var _as_ = choose(props, a2);
    sync_props(string_of_prop, same_prop, set, clear, choose(props, a1), _as_);
    function styles(param){
     if(1 !== param[0]) return 0;
     var v = param[2], k = param[1];
     return [0, [0, k, [0, v]]];
    }
    function set$0(k, v){return set_style(dom, k, eval_prop(v));}
    function clear$0(k, param){return set_style(dom, k, js_empty_string);}
    var _at_ = choose(styles, a2);
    sync_props
     (string_of_prop, same_prop, set$0, clear$0, choose(styles, a1), _at_);
    function attrs(param){
     if(3 !== param[0]) return 0;
     var v = param[2], k = param[1];
     return [0, [0, k, v]];
    }
    function set$1(k, v){return caml_call3(Js_browser[15][26], dom, k, v);}
    function clear$1(k, param){return caml_call2(Js_browser[15][25], dom, k);}
    var _au_ = choose(attrs, a2);
    sync_props
     (function(_av_){return _av_;},
      caml_string_equal,
      set$1,
      clear$1,
      choose(attrs, a1),
      _au_);
    return caml_call2
            (Stdlib_List[18],
             function(param){
              if(2 === param[0]){
               var match = param[1];
               if(0 === match[0]){
                var event_type = match[1];
                return caml_call1(ctx[4], event_type);
               }
              }
              return 0;
             },
             a2);
   }
   function dispose(ctrl){
    var ctrl$0 = ctrl;
    for(;;)
     switch(ctrl$0[0]){
       case 0:
        return 0;
       case 3:
        var child = ctrl$0[4]; ctrl$0 = child; break;
       case 4:
        var child$0 = ctrl$0[3]; ctrl$0 = child$0; break;
       case 5:
        var elt = ctrl$0[2]; return caml_call1(elt[3], 0);
       default:
        var children = ctrl$0[3];
        return caml_call2(Stdlib_List[18], dispose, children);
     }
   }
   function remove_child(parent, child){
    return caml_call2(Js_browser[15][12], parent, child);
   }
   function insert_before(parent, o, n){
    return caml_call3(Js_browser[15][10], parent, o, n);
   }
   function _j_(ctx, parent, prev_move, next, old, vdom){
    if(vdom === get_vdom(old)) return old;
    switch(old[0]){
      case 0:
       var match = old[1];
       if(0 === match[0] && 0 === vdom[0]){
        var s2 = vdom[2], dom = old[2], s1 = match[2];
        if(s1 !== s2) caml_call2(Js_browser[15][41], dom, s2);
        return [0, vdom, dom];
       }
       break;
      case 1:
       var match$0 = old[1];
       if(1 === match$0[0] && 1 === vdom[0]){
        var children = old[3];
        if(match$0[1] == vdom[1]){
         var
          children$0 =
            sync_children(ctx, parent, prev_move, next, children, vdom[2]),
          doms = caml_call2(Stdlib_List[24], get_doms, children$0);
         return [1, vdom, doms, children$0];
        }
       }
       break;
      case 2:
       var e1 = old[1];
       if(2 === e1[0] && 2 === vdom[0]){
        var children$1 = old[3], dom$0 = old[2];
        if(e1[3] == vdom[3] && e1[2] == vdom[2] && e1[1] == vdom[1]){
         var
          children$2 =
            sync_children
             (ctx, dom$0, 0, Js_browser[15][3], children$1, vdom[5]);
         sync_attributes(ctx, e1[2], dom$0, e1[4], vdom[4]);
         return [2, vdom, dom$0, children$2];
        }
       }
       break;
      case 3:
       if(3 === vdom[0]){
        var
         c2 = vdom[3],
         f = vdom[2],
         c1 = old[4],
         child = _j_(ctx, parent, prev_move, next, c1, c2);
        return [3, vdom, get_doms(child), f, child];
       }
       break;
      case 4:
       var match$1 = old[1];
       if(4 === match$1[0] && 4 === vdom[0]){
        var
         a2 = vdom[3],
         f2 = vdom[2],
         c1$0 = old[3],
         a1 = match$1[3],
         f1 = match$1[2];
        if(f1 === f2 && a1 === a2) return bmemo(vdom, c1$0);
        return bmemo
                (vdom,
                 _j_(ctx, parent, prev_move, next, c1$0, caml_call1(f2, a2)));
       }
       break;
      default:
       var match$2 = old[1];
       if(5 === match$2[0] && 5 === vdom[0]){
        var
         propagate_events = vdom[4],
         a2$0 = vdom[3],
         arg2 = vdom[2],
         key2 = vdom[1],
         ns = old[3],
         elt = old[2],
         a1$0 = match$2[3],
         arg1 = match$2[2],
         key1 = match$2[1];
        a:
        if(key1 == key2){
         if(arg1 !== arg2 && ! caml_call1(elt[2], arg2)) break a;
         sync_attributes(ctx, ns, elt[1], a1$0, a2$0);
         return [5, vdom, elt, ns, propagate_events];
        }
       }
    }
    var x = blit(parent, ctx, vdom), l2$0 = get_doms(old), l1$0 = get_doms(x);
    a:
    {
     b:
     {
      var l1 = l1$0, l2 = l2$0;
      for(;;){
       if(! l1) break;
       if(! l2) break b;
       var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
       caml_call3(Js_browser[15][11], parent, h1, h2);
       l1 = t1;
       l2 = t2;
      }
      caml_call2
       (Stdlib_List[18],
        function(_ar_){return remove_child(parent, _ar_);},
        l2);
      break a;
     }
     caml_call2
      (Stdlib_List[18],
       function(c){return insert_before(parent, c, next);},
       l1);
    }
    dispose(old);
    return x;
   }
   function sync_children
   (ctx, dom, prev_move, next, old_children, new_children){
    var
     old_children$0 = caml_call1(Stdlib_Array[11], old_children),
     new_children$0 = caml_call1(Stdlib_Array[11], new_children),
     by_key = caml_call2(Stdlib_Hashtbl[1], 0, 8),
     _$_ = old_children$0.length - 2 | 0;
    if(_$_ >= 0){
     var i$1 = _$_;
     for(;;){
      var key = get_vdom(caml_check_bound(old_children$0, i$1)[1 + i$1])[1];
      caml_call3(Stdlib_Hashtbl[5], by_key, key, i$1);
      var _an_ = i$1 - 1 | 0;
      if(0 === i$1) break;
      i$1 = _an_;
     }
    }
    var
     indices = runtime.caml_make_vect(new_children$0.length - 1, -1),
     _ab_ = indices.length - 2 | 0,
     _aa_ = 0;
    if(_ab_ >= 0){
     var i$0 = _aa_;
     for(;;){
      var key$0 = caml_check_bound(new_children$0, i$0)[1 + i$0][1];
      a:
      {
       try{var idx$0 = caml_call2(Stdlib_Hashtbl[6], by_key, key$0);}
       catch(_aq_){
        var _al_ = caml_wrap_exception(_aq_);
        if(_al_ === Stdlib[8]) break a;
        throw caml_maybe_attach_backtrace(_al_, 0);
       }
       caml_check_bound(indices, i$0)[1 + i$0] = idx$0;
       caml_call2(Stdlib_Hashtbl[10], by_key, key$0);
      }
      var _am_ = i$0 + 1 | 0;
      if(_ab_ === i$0) break;
      i$0 = _am_;
     }
    }
    caml_call2
     (Stdlib_Hashtbl[12],
      function(param, i){
       var
        to_remove = caml_check_bound(old_children$0, i)[1 + i],
        _ao_ = get_doms(to_remove);
       caml_call2
        (Stdlib_List[18],
         function(_ap_){return remove_child(dom, _ap_);},
         _ao_);
       return dispose(to_remove);
      },
      by_key);
    var
     ctrls = [0, 0],
     prev_move$0 = [0, prev_move],
     next$0 = [0, next],
     _ac_ = new_children$0.length - 2 | 0;
    if(_ac_ >= 0){
     var i = _ac_;
     for(;;){
      var idx = caml_check_bound(indices, i)[1 + i];
      if(0 <= idx)
       var
        _ad_ = caml_check_bound(new_children$0, i)[1 + i],
        _ae_ = caml_check_bound(old_children$0, idx)[1 + idx],
        c = _j_(ctx, dom, prev_move$0[1], next$0[1], _ae_, _ad_);
      else
       var c = blit(dom, ctx, caml_check_bound(new_children$0, i)[1 + i]);
      var doms = get_doms(c);
      a:
      {
       b:
       {
        var param = doms;
        for(;;){
         if(! param) break;
         var c_dom = param[1];
         if(! param[2]) break b;
         var tl = param[2];
         param = tl;
        }
        var match = 0;
        break a;
       }
       var match = [0, c_dom];
      }
      if(match){
       var right_most = match[1], _af_ = idx < 0 ? 1 : 0;
       if(_af_)
        var move = _af_;
       else{
        if(i === (new_children$0.length - 2 | 0))
         var _ah_ = idx !== (old_children$0.length - 2 | 0) ? 1 : 0;
        else{
         var _aj_ = prev_move$0[1];
         if(_aj_)
          var _ah_ = _aj_;
         else
          var
           _ak_ = i + 1 | 0,
           _ah_ =
             caml_check_bound(indices, _ak_)[1 + _ak_] !== (idx + 1 | 0)
              ? 1
              : 0;
        }
        if(_ah_)
         var
          _ai_ = next$0[1],
          move = caml_call1(Js_browser[15][15], right_most) !== _ai_ ? 1 : 0;
        else
         var move = _ah_;
       }
       if(move)
        caml_call2
         (Stdlib_List[18],
          function(c_dom){return insert_before(dom, c_dom, next$0[1]);},
          doms);
       prev_move$0[1] = move;
       next$0[1] = caml_call1(Stdlib_List[6], doms);
       ctrls[1] = [0, c, ctrls[1]];
      }
      var _ag_ = i - 1 | 0;
      if(0 === i) break;
      i = _ag_;
     }
    }
    return ctrls[1];
   }
   function found(mapper, parent, dom, inner){
    var mapper$0 = mapper, inner$0 = inner;
    for(;;)
     switch(inner$0[0]){
       case 1:
        var children = inner$0[3];
        try{
         var
          inner$1 =
            caml_call2
             (Stdlib_List[39],
              function(c){
               var ___ = get_doms(c);
               return caml_call2(Stdlib_List[38], dom, ___);
              },
              children);
        }
        catch(_Z_){
         var _Y_ = caml_wrap_exception(_Z_);
         if(_Y_ === Stdlib[8])
          throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
         throw caml_maybe_attach_backtrace(_Y_, 0);
        }
        inner$0 = inner$1;
        break;
       case 3:
        var child = inner$0[4], f = inner$0[3];
        let mapper = mapper$0, f$0 = f;
        var
         mapper$1 =
           function(x){return caml_call1(mapper, caml_call1(f$0, x));};
        mapper$0 = mapper$1;
        inner$0 = child;
        break;
       case 4:
        var child$0 = inner$0[3]; inner$0 = child$0; break;
       default: return [0, mapper$0, inner$0, parent];
     }
   }
   function vdom_of_dom(root, dom){
    var
     _S_ = caml_call1(Js_browser[15][2], dom),
     match = caml_call2(Ojs$0[7], Js_browser[15][1], _S_);
    if(! match) return 0;
    var dom$0 = match[1], _T_ = get_doms(root);
    if(caml_call2(Stdlib_List[38], dom$0, _T_))
     return found(function(_X_){return _X_;}, 0, dom$0, root);
    var parent = vdom_of_dom(root, caml_call1(Js_browser[15][42], dom$0));
    if(! parent) return 0;
    var inner = parent[2], mapper = parent[1];
    switch(inner[0]){
      case 2:
       var children = inner[3];
       try{
        var
         c =
           caml_call2
            (Stdlib_List[39],
             function(c){
              var _W_ = get_doms(c);
              return caml_call2(Stdlib_List[38], dom$0, _W_);
             },
             children);
       }
       catch(_V_){
        var _U_ = caml_wrap_exception(_V_);
        if(_U_ === Stdlib[8]) return 0;
        throw caml_maybe_attach_backtrace(_U_, 0);
       }
       return found(mapper, parent, dom$0, c);
      case 5:
       var parent$0 = parent[3], propagate_events = inner[4];
       return propagate_events ? found(mapper, parent$0, dom$0, inner) : 0;
      default: throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
    }
   }
   function dom(x){return x[1];}
   function process(x){return x[2];}
   function get(x){return caml_call1(x[3], 0);}
   function after_redraw$1(x){return x[4];}
   function run$0(opt, container, param){
    var
     env = opt ? opt[1] : empty,
     view = param[3],
     update = param[2],
     match = param[1],
     cmd0 = match[2],
     model0 = match[1],
     env$0 = merge([0, env, [0, global[1], 0]]);
    if(container)
     var
      container$0 = container[1],
      container$1 = container$0,
      container_created = 0;
    else
     var
      container$2 = caml_call2(Js_browser[16][3], Js_browser[26], cst_div),
      container$1 = container$2,
      container_created = 1;
    var post_redraw = [0, 0];
    function after_redraw(f){
     post_redraw[1] = [0, f, post_redraw[1]];
     return 0;
    }
    function flush(param){
     var l = caml_call1(Stdlib_List[10], post_redraw[1]);
     post_redraw[1] = 0;
     return caml_call2
             (Stdlib_List[18], function(f){return caml_call1(f, 0);}, l);
    }
    var
     process_custom_fwd =
       [0,
        function(_R_, param){
         throw caml_maybe_attach_backtrace([0, Assert_failure, _m_], 1);
        }],
     process_fwd =
       [0,
        function(param){
         throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
        }],
     listeners = caml_call2(Stdlib_Hashtbl[1], 0, 8),
     model = [0, model0],
     current = [0, 0],
     pending_redraw = [0, 0];
    function view$0(model){
     try{var _Q_ = caml_call1(view, model); return _Q_;}
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       _P_ = caml_call1(Stdlib_Printexc[1], exn);
      caml_call2(Stdlib_Printf[2], _o_, _P_);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    function on_event(evt){
     var ty = caml_call1(Js_browser[10][7], evt);
     try{
      var
       _B_ = caml_call1(Js_browser[10][3], evt),
       tgt = caml_call1(Js_browser[15][1], _B_);
      caml_call2
       (Stdlib_Option[9],
        function(root){
         var param = vdom_of_dom(root, tgt);
         for(;;){
          a:
          if(param){
           var _I_ = param[2], mapper = param[1];
           switch(_I_[0]){
             case 2:
              var _J_ = _I_[1];
              if(2 !== _J_[0]) break a;
              var dom = _I_[2], attributes = _J_[4];
              break;
             case 5:
              var _M_ = _I_[1];
              if(5 !== _M_[0]) break a;
              var dom = _I_[2][1], attributes = _M_[3];
              break;
             default: break a;
           }
           var parent = param[3];
           let dom$0 = dom, mapper$0 = mapper;
           var
            _K_ =
              caml_call1
               (caml_call1
                 (Stdlib_List[23],
                  function(attribute){
                   if(2 === attribute[0]){
                    var match = attribute[1];
                    if(0 === match[0]){
                     var
                      map = match[3],
                      decoder = match[2],
                      event_type = match[1];
                     if(ty == event_type){
                      var
                       _O_ = caml_call1(Js_browser[10][2], evt),
                       match$0 =
                         decode_fail
                          ([0,
                            [0,
                             [0, cst_currentTarget, caml_call1(Js_browser[15][2], dom$0)],
                             0]],
                           decoder,
                           _O_),
                       prevent_default = match$0[3],
                       stop_propagation = match$0[2],
                       msg = match$0[1];
                      if(prevent_default) caml_call1(Js_browser[10][5], evt);
                      if(stop_propagation) caml_call1(Js_browser[10][6], evt);
                      var match$1 = caml_call1(map, msg);
                      if(! match$1) return 0;
                      var msg$0 = match$1[1];
                      return [0, [0, msg$0, stop_propagation]];
                     }
                    }
                   }
                   return 0;
                  }),
                attributes),
            stop_propagation =
              caml_call3
               (Stdlib_List[26],
                function(stopped_propagation, param){
                 var
                  stop_propagation = param[2],
                  msg = param[1],
                  _N_ = caml_call1(mapper$0, msg);
                 caml_call1(process_fwd[1], _N_);
                 var
                  stopped_propagation$0 =
                    stopped_propagation || stop_propagation;
                 return stopped_propagation$0;
                },
                0,
                _K_),
            _L_ = 1 - stop_propagation;
           if(! _L_) return _L_;
           param = parent;
           continue;
          }
          return 0;
         }
        },
        current[1]);
      var
       _C_ = ty == cst_input$0 ? 1 : 0,
       _D_ = _C_ || (ty == cst_blur ? 1 : 0);
      if(_D_)
       var
        f =
          function(param){
           return caml_call2
                   (Stdlib_Option[9],
                    function(root){
                     var match = vdom_of_dom(root, tgt);
                     if(match){
                      var _G_ = match[2];
                      if(2 === _G_[0]){
                       var match$0 = _G_[1];
                       if(2 === match$0[0]){
                        var attributes = match$0[4];
                        return caml_call2
                                (Stdlib_List[18],
                                 function(param){
                                  if(0 === param[0]){
                                   var _H_ = param[1];
                                   if(_H_ !== cst_checked$0){
                                    if(_H_ === cst_value$1){
                                     var match = param[2];
                                     if(0 === match[0]){
                                      var s2 = match[1];
                                      if(s2 !== caml_call1(Js_browser[15][31], tgt))
                                       return caml_call2(Js_browser[15][32], tgt, s2);
                                     }
                                    }
                                   }
                                   else{
                                    var match$0 = param[2];
                                    if(3 === match$0[0]){
                                     var s2$0 = match$0[1];
                                     return caml_call2(Js_browser[15][39], tgt, s2$0);
                                    }
                                   }
                                  }
                                  return 0;
                                 },
                                 attributes);
                       }
                      }
                     }
                     return 0;
                    },
                    current[1]);
          },
        _E_ = pending_redraw[1] ? after_redraw(f) : f(0),
        _F_ = _E_;
      else
       var _F_ = _D_;
      return _F_;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       _A_ = caml_call1(Stdlib_Printexc[1], exn);
      return caml_call3(Stdlib_Printf[2], _p_, ty, _A_);
     }
    }
    function add_listener(event_type){
     var _z_ = 1 - caml_call2(Stdlib_Hashtbl[9], listeners, event_type);
     if(! _z_) return _z_;
     var
      remove_listener =
        caml_call4
         (Js_browser[15][19], container$1, [0, event_type], on_event, 1);
     return caml_call3
             (Stdlib_Hashtbl[5], listeners, event_type, remove_listener);
    }
    var
     ctx =
       [0,
        function(elt, evt){
         return caml_call2(process_custom_fwd[1], elt, evt);
        },
        env$0[2],
        after_redraw,
        add_listener],
     x = blit(container$1, ctx, view$0(model0));
    caml_call2(Js_browser[19][11], Js_browser[25], flush);
    current[1] = [0, x];
    function redraw(param){
     var match = current[1];
     if(! match) return 0;
     var root = match[1];
     pending_redraw[1] = 0;
     var
      _y_ = view$0(model[1]),
      vdom = Js_browser[15][3],
      x = _j_(ctx, container$1, 0, vdom, root, _y_);
     current[1] = [0, x];
     return flush(0);
    }
    function process(msg){
     try{
      var
       match = caml_call2(update, model[1], msg),
       cmd = match[2],
       new_model = match[1];
      model[1] = new_model;
      run_cmd(container$1, cmd);
      var
       _w_ = 1 - pending_redraw[1],
       _x_ =
         _w_
          ? (pending_redraw
             [1]
            = 1,
            caml_call2(Js_browser[19][11], Js_browser[25], redraw))
          : _w_;
      return _x_;
     }
     catch(exn$0){
      var
       exn = caml_wrap_exception(exn$0),
       _v_ = caml_call1(Stdlib_Printexc[1], exn);
      caml_call2(Stdlib_Printf[2], _q_, _v_);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    function run_cmd(parent, cmd){
     return run
             (after_redraw,
              caml_call2(Stdlib[37], env$0[1], global[1][1]),
              process,
              parent,
              cmd);
    }
    process_fwd[1] = process;
    var _r_ = get_doms(x), _s_ = caml_call1(Js_browser[15][9], container$1);
    caml_call2(Stdlib_List[18], _s_, _r_);
    function process_custom(tgt, event){
     return caml_call2
             (Stdlib_Option[9],
              function(root){
               function process$0(mapper, attributes){
                function select_handler(attr){
                 if(2 === attr[0]){
                  var _u_ = attr[1];
                  if(0 === _u_[0]){
                   var map = _u_[3], decoder = _u_[2], et1 = _u_[1];
                   if(0 !== event[0]){
                    var encoder = event[2], et2 = event[1];
                    if(et1 == et2){
                     var msg = decode_fail(0, decoder, encode(encoder))[1];
                     return caml_call1(map, msg);
                    }
                   }
                  }
                  else{
                   var f = _u_[1];
                   if(0 === event[0]){
                    var e = event[1];
                    return caml_call1(f, e);
                   }
                  }
                 }
                 return 0;
                }
                var
                 msgs =
                   caml_call2(Stdlib_List[23], select_handler, attributes);
                return caml_call2
                        (Stdlib_List[18],
                         function(msg){return process(caml_call1(mapper, msg));},
                         msgs);
               }
               var match = vdom_of_dom(root, tgt);
               if(match){
                var _t_ = match[2], mapper = match[1];
                switch(_t_[0]){
                  case 2:
                   var match$0 = _t_[1];
                   if(2 === match$0[0]){
                    var attributes = match$0[4];
                    return process$0(mapper, attributes);
                   }
                   break;
                  case 5:
                   var match$1 = _t_[1];
                   if(5 === match$1[0]){
                    var attributes$0 = match$1[3];
                    return process$0(mapper, attributes$0);
                   }
                   break;
                }
               }
               return 0;
              },
              current[1]);
    }
    process_custom_fwd[1] = process_custom;
    run_cmd(container$1, cmd0);
    function dispose$0(param){
     return caml_call2
             (Stdlib_Option[9],
              function(root){
               current[1] = 0;
               dispose(root);
               caml_call2
                (Stdlib_Hashtbl[12],
                 function(param, f){return caml_call1(f, 0);},
                 listeners);
               return container_created
                       ? caml_call1(Js_browser[15][74], container$1)
                       : caml_call2(Js_browser[15][48], container$1, cst$2);
              },
              current[1]);
    }
    return [0,
            container$1,
            process,
            function(param){return model[1];},
            after_redraw,
            dispose$0];
   }
   function dispose$0(param){
    var dispose = param[5];
    return caml_call1(dispose, 0);
   }
   var
    Vdom_blit =
      [0,
       Ojs,
       [0, decode],
       [0, encode],
       [0, container, send_msg, after_redraw],
       [0,
        blur_event,
        input_event,
        checked_event,
        change_event,
        change_index_event,
        custom_event,
        make,
        parent,
        send_event,
        after_redraw$0],
       cmd,
       custom,
       merge,
       empty,
       register,
       run$0,
       dispose$0,
       dom,
       process,
       get,
       after_redraw$1];
   runtime.caml_register_global(112, Vdom_blit, "Vdom_blit");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
